!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=181)}({0:function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},173:function(t,e,n){(function(t){var r;!function(t,o,i){function s(t){var e,n=this,r=(e=4022871197,function(t){t=String(t);for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function u(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function a(t,e){var n=new s(t),r=e&&e.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,r&&("object"==typeof r&&u(r,n),o.state=function(){return u(n,{})}),o}o&&o.exports?o.exports=a:n(0)&&n(4)?void 0===(r=function(){return a}.call(e,n,e,o))||(o.exports=r):this.alea=a}(0,t,n(0))}).call(this,n(3)(t))},174:function(t,e,n){(function(t){var r;!function(t,o,i){function s(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function u(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function a(t,e){var n=new s(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&u(r,n),o.state=function(){return u(n,{})}),o}o&&o.exports?o.exports=a:n(0)&&n(4)?void 0===(r=function(){return a}.call(e,n,e,o))||(o.exports=r):this.xor128=a}(0,t,n(0))}).call(this,n(3)(t))},175:function(t,e,n){(function(t){var r;!function(t,o,i){function s(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function u(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function a(t,e){var n=new s(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&u(r,n),o.state=function(){return u(n,{})}),o}o&&o.exports?o.exports=a:n(0)&&n(4)?void 0===(r=function(){return a}.call(e,n,e,o))||(o.exports=r):this.xorwow=a}(0,t,n(0))}).call(this,n(3)(t))},176:function(t,e,n){(function(t){var r;!function(t,o,i){function s(t){var e=this;e.next=function(){var t,n,r=e.x,o=e.i;return t=r[o],n=(t^=t>>>7)^t<<24,n^=(t=r[o+1&7])^t>>>10,n^=(t=r[o+3&7])^t>>>3,n^=(t=r[o+4&7])^t<<7,t=r[o+7&7],n^=(t^=t<<13)^t<<9,r[o]=n,e.i=o+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function u(t,e){return e.x=t.x.slice(),e.i=t.i,e}function a(t,e){null==t&&(t=+new Date);var n=new s(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&(r.x&&u(r,n),o.state=function(){return u(n,{})}),o}o&&o.exports?o.exports=a:n(0)&&n(4)?void 0===(r=function(){return a}.call(e,n,e,o))||(o.exports=r):this.xorshift7=a}(0,t,n(0))}).call(this,n(3)(t))},177:function(t,e,n){(function(t){var r;!function(t,o,i){function s(t){var e=this;e.next=function(){var t,n,r=e.w,o=e.X,i=e.i;return e.w=r=r+1640531527|0,n=o[i+34&127],t=o[i=i+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=o[i]=n^t,e.i=i,n+(r^r>>>16)|0},function(t,e){var n,r,o,i,s,u=[],a=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,a=Math.max(a,e.length)),o=0,i=-32;i<a;++i)e&&(r^=e.charCodeAt((i+32)%e.length)),0===i&&(s=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,i>=0&&(s=s+1640531527|0,o=0==(n=u[127&i]^=r+s)?o+1:0);for(o>=128&&(u[127&(e&&e.length||0)]=-1),o=127,i=512;i>0;--i)r=u[o+34&127],n=u[o=o+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,u[o]=r^n;t.w=s,t.X=u,t.i=o}(e,t)}function u(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function a(t,e){null==t&&(t=+new Date);var n=new s(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&(r.X&&u(r,n),o.state=function(){return u(n,{})}),o}o&&o.exports?o.exports=a:n(0)&&n(4)?void 0===(r=function(){return a}.call(e,n,e,o))||(o.exports=r):this.xor4096=a}(0,t,n(0))}).call(this,n(3)(t))},178:function(t,e,n){(function(t){var r;!function(t,o,i){function s(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,o=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^o,o=o-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^o,e.a=o-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function u(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function a(t,e){var n=new s(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&u(r,n),o.state=function(){return u(n,{})}),o}o&&o.exports?o.exports=a:n(0)&&n(4)?void 0===(r=function(){return a}.call(e,n,e,o))||(o.exports=r):this.tychei=a}(0,t,n(0))}).call(this,n(3)(t))},179:function(t,e,n){var r;!function(o,i,s){var u,a=s.pow(256,6),l=s.pow(2,52),c=2*l;function f(t,e,n){var r=[],f=g(function t(e,n){var r,o=[],i=typeof e;if(n&&"object"==i)for(r in e)try{o.push(t(e[r],n-1))}catch(t){}return o.length?o:"string"==i?e:e+"\0"}((e=1==e?{entropy:!0}:e||{}).entropy?[t,m(i)]:null==t?function(){try{var t;return u&&(t=u.randomBytes)?t=t(256):(t=new Uint8Array(256),(o.crypto||o.msCrypto).getRandomValues(t)),m(t)}catch(t){var e=o.navigator,n=e&&e.plugins;return[+new Date,o,n,o.screen,m(i)]}}():t,3),r),d=new h(r),y=function(){for(var t=d.g(6),e=a,n=0;t<l;)t=256*(t+n),e*=256,n=d.g(1);for(;t>=c;)t/=2,e/=2,n>>>=1;return(t+n)/e};return y.int32=function(){return 0|d.g(4)},y.quick=function(){return d.g(4)/4294967296},y.double=y,g(m(d.S),i),(e.pass||n||function(t,e,n,r){return r&&(r.S&&p(r,d),t.state=function(){return p(d,{})}),n?(s.random=t,e):t})(y,f,"global"in e?e.global:this==s,e.state)}function h(t){var e,n=t.length,r=this,o=0,i=r.i=r.j=0,s=r.S=[];for(n||(t=[n++]);o<256;)s[o]=o++;for(o=0;o<256;o++)s[o]=s[i=255&i+t[o%n]+(e=s[o])],s[i]=e;(r.g=function(t){for(var e,n=0,o=r.i,i=r.j,s=r.S;t--;)e=s[o=255&o+1],n=256*n+s[255&(s[o]=s[i=255&i+e])+(s[i]=e)];return r.i=o,r.j=i,n})(256)}function p(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function g(t,e){for(var n,r=t+"",o=0;o<r.length;)e[255&o]=255&(n^=19*e[255&o])+r.charCodeAt(o++);return m(e)}function m(t){return String.fromCharCode.apply(0,t)}if(g(s.random(),i),t.exports){t.exports=f;try{u=n(180)}catch(t){}}else void 0===(r=function(){return f}.call(e,n,e,t))||(t.exports=r)}("undefined"!=typeof self?self:this,[],Math)},180:function(t,e){},181:function(t,e,n){"use strict";n.r(e);function r(){}function o(t){return t()}function i(){return Object.create(null)}function s(t){t.forEach(o)}function u(t){return"function"==typeof t}function a(t,e){return t!=t?e==e:t!==e||t&&"object"==typeof t||"function"==typeof t}function l(t){return 0===Object.keys(t).length}new Set;let c=!1;function f(t,e){t.appendChild(e)}function h(t,e,n){const r=p(t);if(!r.getElementById(e)){const t=w("style");t.id=e,t.textContent=n,g(r,t)}}function p(t){if(!t)return document;const e=t.getRootNode?t.getRootNode():t.ownerDocument;return e&&e.host?e:t.ownerDocument}function g(t,e){f(t.head||t,e)}function m(t,e,n){t.insertBefore(e,n||null)}function d(t){t.parentNode.removeChild(t)}function y(t,e){for(let n=0;n<t.length;n+=1)t[n]&&t[n].d(e)}function w(t){return document.createElement(t)}function v(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}function b(t){return document.createTextNode(t)}function x(){return b(" ")}function M(t,e,n,r){return t.addEventListener(e,n,r),()=>t.removeEventListener(e,n,r)}function _(t,e,n){null==n?t.removeAttribute(e):t.getAttribute(e)!==n&&t.setAttribute(e,n)}function S(t){return""===t?null:+t}function E(t,e){e=""+e,t.wholeText!==e&&(t.data=e)}function k(t,e){t.value=null==e?"":e}function A(t,e,n,r){t.style.setProperty(e,n,r?"important":"")}function $(t,e,n=!1){const r=document.createEvent("CustomEvent");return r.initCustomEvent(t,n,!1,e),r}new Set;let j;function R(t){j=t}function N(){if(!j)throw new Error("Function called outside component initialization");return j}function T(t){N().$$.on_mount.push(t)}function O(t){N().$$.after_update.push(t)}const q=[],P=[],C=[],I=[],z=Promise.resolve();let V=!1;function L(){V||(V=!0,z.then(X))}function D(t){C.push(t)}const B=new Set;let F=0;function X(){const t=j;do{for(;F<q.length;){const t=q[F];F++,R(t),U(t.$$)}for(R(null),q.length=0,F=0;P.length;)P.pop()();for(let t=0;t<C.length;t+=1){const e=C[t];B.has(e)||(B.add(e),e())}C.length=0}while(q.length);for(;I.length;)I.pop()();V=!1,B.clear(),R(t)}function U(t){if(null!==t.fragment){t.update(),s(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(D)}}const Y=new Set;let H;function Q(t,e){t&&t.i&&(Y.delete(t),t.i(e))}function G(t,e,n,r){if(t&&t.o){if(Y.has(t))return;Y.add(t),H.c.push(()=>{Y.delete(t),r&&(n&&t.d(1),r())}),t.o(e)}}"undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:global;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);let K;function Z(t){t&&t.c()}function W(t,e,n,r){const{fragment:i,on_mount:a,on_destroy:l,after_update:c}=t.$$;i&&i.m(e,n),r||D(()=>{const e=a.map(o).filter(u);l?l.push(...e):s(e),t.$$.on_mount=[]}),c.forEach(D)}function J(t,e){const n=t.$$;null!==n.fragment&&(s(n.on_destroy),n.fragment&&n.fragment.d(e),n.on_destroy=n.fragment=null,n.ctx=[])}function tt(t,e,n,o,u,a,l,f=[-1]){const h=j;R(t);const p=t.$$={fragment:null,ctx:null,props:a,update:r,not_equal:u,bound:i(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(h?h.$$.context:[])),callbacks:i(),dirty:f,skip_bound:!1,root:e.target||h.$$.root};l&&l(p.root);let g=!1;if(p.ctx=n?n(t,e.props||{},(e,n,...r)=>{const o=r.length?r[0]:n;return p.ctx&&u(p.ctx[e],p.ctx[e]=o)&&(!p.skip_bound&&p.bound[e]&&p.bound[e](o),g&&function(t,e){-1===t.$$.dirty[0]&&(q.push(t),L(),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}(t,e)),n}):[],p.update(),g=!0,s(p.before_update),p.fragment=!!o&&o(p.ctx),e.target){if(e.hydrate){c=!0;const t=(m=e.target,Array.from(m.childNodes));p.fragment&&p.fragment.l(t),t.forEach(d)}else p.fragment&&p.fragment.c();e.intro&&Q(t.$$.fragment),W(t,e.target,e.anchor,e.customElement),c=!1,X()}var m;R(h)}"function"==typeof HTMLElement&&(K=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){const{on_mount:t}=this.$$;this.$$.on_disconnect=t.map(o).filter(u);for(const t in this.$$.slotted)this.appendChild(this.$$.slotted[t])}attributeChangedCallback(t,e,n){this[t]=n}disconnectedCallback(){s(this.$$.on_disconnect)}$destroy(){J(this,1),this.$destroy=r}$on(t,e){const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(t){this.$$set&&!l(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}});class et{$destroy(){J(this,1),this.$destroy=r}$on(t,e){const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(t){this.$$set&&!l(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}}var nt=Array.prototype,rt=nt.slice;nt.map;function ot(t,e){return null==t||null==e?NaN:t<e?-1:t>e?1:t>=e?0:NaN}function it(t){let e=t,n=t,r=t;function o(t,e,o=0,i=t.length){if(o<i){if(0!==n(e,e))return i;do{const n=o+i>>>1;r(t[n],e)<0?o=n+1:i=n}while(o<i)}return o}return 2!==t.length&&(e=(e,n)=>t(e)-n,n=ot,r=(e,n)=>ot(t(e),n)),{left:o,center:function(t,n,r=0,i=t.length){const s=o(t,n,r,i-1);return s>r&&e(t[s-1],n)>-e(t[s],n)?s-1:s},right:function(t,e,o=0,i=t.length){if(o<i){if(0!==n(e,e))return i;do{const n=o+i>>>1;r(t[n],e)<=0?o=n+1:i=n}while(o<i)}return o}}}const st=it(ot),ut=st.right;st.left,it((function(t){return null===t?NaN:+t})).center;var at=ut;function lt(t){return()=>t}function ct(t,e){let n,r;if(void 0===e)for(const e of t)null!=e&&(void 0===n?e>=e&&(n=r=e):(n>e&&(n=e),r<e&&(r=e)));else{let o=-1;for(let i of t)null!=(i=e(i,++o,t))&&(void 0===n?i>=i&&(n=r=i):(n>i&&(n=i),r<i&&(r=i)))}return[n,r]}function ft(t){return t}var ht=Math.sqrt(50),pt=Math.sqrt(10),gt=Math.sqrt(2);function mt(t,e,n){var r,o,i,s,u=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(o=t,t=e,e=o),0===(s=dt(t,e,n))||!isFinite(s))return[];if(s>0){let n=Math.round(t/s),r=Math.round(e/s);for(n*s<t&&++n,r*s>e&&--r,i=new Array(o=r-n+1);++u<o;)i[u]=(n+u)*s}else{s=-s;let n=Math.round(t*s),r=Math.round(e*s);for(n/s<t&&++n,r/s>e&&--r,i=new Array(o=r-n+1);++u<o;)i[u]=(n+u)/s}return r&&i.reverse(),i}function dt(t,e,n){var r=(e-t)/Math.max(0,n),o=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,o);return o>=0?(i>=ht?10:i>=pt?5:i>=gt?2:1)*Math.pow(10,o):-Math.pow(10,-o)/(i>=ht?10:i>=pt?5:i>=gt?2:1)}function yt(t){return Math.ceil(Math.log(function(t,e){let n=0;if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&++n;else{let r=-1;for(let o of t)null!=(o=e(o,++r,t))&&(o=+o)>=o&&++n}return n}(t))/Math.LN2)+1}function wt(){var t=ft,e=ct,n=yt;function r(r){Array.isArray(r)||(r=Array.from(r));var o,i,s=r.length,u=new Array(s);for(o=0;o<s;++o)u[o]=t(r[o],o,r);var a=e(u),l=a[0],c=a[1],f=n(u,l,c);if(!Array.isArray(f)){const t=c,n=+f;if(e===ct&&([l,c]=function(t,e,n){let r;for(;;){const o=dt(t,e,n);if(o===r||0===o||!isFinite(o))return[t,e];o>0?(t=Math.floor(t/o)*o,e=Math.ceil(e/o)*o):o<0&&(t=Math.ceil(t*o)/o,e=Math.floor(e*o)/o),r=o}}(l,c,n)),(f=mt(l,c,n))[f.length-1]>=c)if(t>=c&&e===ct){const t=dt(l,c,n);isFinite(t)&&(t>0?c=(Math.floor(c/t)+1)*t:t<0&&(c=(Math.ceil(c*-t)+1)/-t))}else f.pop()}for(var h=f.length;f[0]<=l;)f.shift(),--h;for(;f[h-1]>c;)f.pop(),--h;var p,g=new Array(h+1);for(o=0;o<=h;++o)(p=g[o]=[]).x0=o>0?f[o-1]:l,p.x1=o<h?f[o]:c;for(o=0;o<s;++o)null!=(i=u[o])&&l<=i&&i<=c&&g[at(f,i,0,h)].push(r[o]);return g}return r.value=function(e){return arguments.length?(t="function"==typeof e?e:lt(e),r):t},r.domain=function(t){return arguments.length?(e="function"==typeof t?t:lt([t[0],t[1]]),r):e},r.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:Array.isArray(t)?lt(rt.call(t)):lt(t),r):n},r}function vt(t,e,n){t=+t,e=+e,n=(o=arguments.length)<2?(e=t,t=0,1):o<3?1:+n;for(var r=-1,o=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(o);++r<o;)i[r]=t+r*n;return i}function bt(t){if(!(o=t.length))return[];for(var e=-1,n=function(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n>e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let o of t)null!=(o=e(o,++r,t))&&(n>o||void 0===n&&o>=o)&&(n=o)}return n}(t,xt),r=new Array(n);++e<n;)for(var o,i=-1,s=r[e]=new Array(o);++i<o;)s[i]=t[i][e];return r}function xt(t){return t.length}var Mt={value:()=>{}};function _t(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new St(r)}function St(t){this._=t}function Et(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function kt(t,e){for(var n,r=0,o=t.length;r<o;++r)if((n=t[r]).name===e)return n.value}function At(t,e,n){for(var r=0,o=t.length;r<o;++r)if(t[r].name===e){t[r]=Mt,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}St.prototype=_t.prototype={constructor:St,on:function(t,e){var n,r=this._,o=Et(t+"",r),i=-1,s=o.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++i<s;)if(n=(t=o[i]).type)r[n]=At(r[n],t.name,e);else if(null==e)for(n in r)r[n]=At(r[n],t.name,null);return this}for(;++i<s;)if((n=(t=o[i]).type)&&(n=kt(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new St(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,o=new Array(n),i=0;i<n;++i)o[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,o)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],o=0,i=r.length;o<i;++o)r[o].value.apply(e,n)}};var $t=_t;function jt(){}var Rt=function(t){return null==t?jt:function(){return this.querySelector(t)}};function Nt(t){return null==t?[]:Array.isArray(t)?t:Array.from(t)}function Tt(){return[]}var Ot=function(t){return null==t?Tt:function(){return this.querySelectorAll(t)}};var qt=function(t){return function(){return this.matches(t)}};function Pt(t){return function(e){return e.matches(t)}}var Ct=Array.prototype.find;function It(){return this.firstElementChild}var zt=Array.prototype.filter;function Vt(){return Array.from(this.children)}var Lt=function(t){return new Array(t.length)};function Dt(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}Dt.prototype={constructor:Dt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var Bt=function(t){return function(){return t}};function Ft(t,e,n,r,o,i){for(var s,u=0,a=e.length,l=i.length;u<l;++u)(s=e[u])?(s.__data__=i[u],r[u]=s):n[u]=new Dt(t,i[u]);for(;u<a;++u)(s=e[u])&&(o[u]=s)}function Xt(t,e,n,r,o,i,s){var u,a,l,c=new Map,f=e.length,h=i.length,p=new Array(f);for(u=0;u<f;++u)(a=e[u])&&(p[u]=l=s.call(a,a.__data__,u,e)+"",c.has(l)?o[u]=a:c.set(l,a));for(u=0;u<h;++u)l=s.call(t,i[u],u,i)+"",(a=c.get(l))?(r[u]=a,a.__data__=i[u],c.delete(l)):n[u]=new Dt(t,i[u]);for(u=0;u<f;++u)(a=e[u])&&c.get(p[u])===a&&(o[u]=a)}function Ut(t){return t.__data__}function Yt(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function Ht(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var Qt="http://www.w3.org/1999/xhtml",Gt={svg:"http://www.w3.org/2000/svg",xhtml:Qt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Kt=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),Gt.hasOwnProperty(e)?{space:Gt[e],local:t}:t};function Zt(t){return function(){this.removeAttribute(t)}}function Wt(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Jt(t,e){return function(){this.setAttribute(t,e)}}function te(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function ee(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function ne(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}var re=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function oe(t){return function(){this.style.removeProperty(t)}}function ie(t,e,n){return function(){this.style.setProperty(t,e,n)}}function se(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function ue(t,e){return t.style.getPropertyValue(e)||re(t).getComputedStyle(t,null).getPropertyValue(e)}function ae(t){return function(){delete this[t]}}function le(t,e){return function(){this[t]=e}}function ce(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function fe(t){return t.trim().split(/^|\s+/)}function he(t){return t.classList||new pe(t)}function pe(t){this._node=t,this._names=fe(t.getAttribute("class")||"")}function ge(t,e){for(var n=he(t),r=-1,o=e.length;++r<o;)n.add(e[r])}function me(t,e){for(var n=he(t),r=-1,o=e.length;++r<o;)n.remove(e[r])}function de(t){return function(){ge(this,t)}}function ye(t){return function(){me(this,t)}}function we(t,e){return function(){(e.apply(this,arguments)?ge:me)(this,t)}}pe.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function ve(){this.textContent=""}function be(t){return function(){this.textContent=t}}function xe(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function Me(){this.innerHTML=""}function _e(t){return function(){this.innerHTML=t}}function Se(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Ee(){this.nextSibling&&this.parentNode.appendChild(this)}function ke(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Ae(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===Qt&&e.documentElement.namespaceURI===Qt?e.createElement(t):e.createElementNS(n,t)}}function $e(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var je=function(t){var e=Kt(t);return(e.local?$e:Ae)(e)};function Re(){return null}function Ne(){var t=this.parentNode;t&&t.removeChild(this)}function Te(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Oe(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function qe(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function Pe(t){return function(){var e=this.__on;if(e){for(var n,r=0,o=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++o]=n:this.removeEventListener(n.type,n.listener,n.options);++o?e.length=o:delete this.__on}}}function Ce(t,e,n){return function(){var r,o=this.__on,i=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(o)for(var s=0,u=o.length;s<u;++s)if((r=o[s]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=i,r.options=n),void(r.value=e);this.addEventListener(t.type,i,n),r={type:t.type,name:t.name,value:e,listener:i,options:n},o?o.push(r):this.__on=[r]}}function Ie(t,e,n){var r=re(t),o=r.CustomEvent;"function"==typeof o?o=new o(e,n):(o=r.document.createEvent("Event"),n?(o.initEvent(e,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(e,!1,!1)),t.dispatchEvent(o)}function ze(t,e){return function(){return Ie(this,t,e)}}function Ve(t,e){return function(){return Ie(this,t,e.apply(this,arguments))}}var Le=[null];function De(t,e){this._groups=t,this._parents=e}function Be(){return new De([[document.documentElement]],Le)}De.prototype=Be.prototype={constructor:De,select:function(t){"function"!=typeof t&&(t=Rt(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,s,u=e[o],a=u.length,l=r[o]=new Array(a),c=0;c<a;++c)(i=u[c])&&(s=t.call(i,i.__data__,c,u))&&("__data__"in i&&(s.__data__=i.__data__),l[c]=s);return new De(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return Nt(t.apply(this,arguments))}}(t):Ot(t);for(var e=this._groups,n=e.length,r=[],o=[],i=0;i<n;++i)for(var s,u=e[i],a=u.length,l=0;l<a;++l)(s=u[l])&&(r.push(t.call(s,s.__data__,l,u)),o.push(s));return new De(r,o)},selectChild:function(t){return this.select(null==t?It:function(t){return function(){return Ct.call(this.children,t)}}("function"==typeof t?t:Pt(t)))},selectChildren:function(t){return this.selectAll(null==t?Vt:function(t){return function(){return zt.call(this.children,t)}}("function"==typeof t?t:Pt(t)))},filter:function(t){"function"!=typeof t&&(t=qt(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,s=e[o],u=s.length,a=r[o]=[],l=0;l<u;++l)(i=s[l])&&t.call(i,i.__data__,l,s)&&a.push(i);return new De(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,Ut);var n=e?Xt:Ft,r=this._parents,o=this._groups;"function"!=typeof t&&(t=Bt(t));for(var i=o.length,s=new Array(i),u=new Array(i),a=new Array(i),l=0;l<i;++l){var c=r[l],f=o[l],h=f.length,p=Yt(t.call(c,c&&c.__data__,l,r)),g=p.length,m=u[l]=new Array(g),d=s[l]=new Array(g),y=a[l]=new Array(h);n(c,f,m,d,y,p,e);for(var w,v,b=0,x=0;b<g;++b)if(w=m[b]){for(b>=x&&(x=b+1);!(v=d[x])&&++x<g;);w._next=v||null}}return(s=new De(s,r))._enter=u,s._exit=a,s},enter:function(){return new De(this._enter||this._groups.map(Lt),this._parents)},exit:function(){return new De(this._exit||this._groups.map(Lt),this._parents)},join:function(t,e,n){var r=this.enter(),o=this,i=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=e&&(o=e(o))&&(o=o.selection()),null==n?i.remove():n(i),r&&o?r.merge(o).order():o},merge:function(t){for(var e=t.selection?t.selection():t,n=this._groups,r=e._groups,o=n.length,i=r.length,s=Math.min(o,i),u=new Array(o),a=0;a<s;++a)for(var l,c=n[a],f=r[a],h=c.length,p=u[a]=new Array(h),g=0;g<h;++g)(l=c[g]||f[g])&&(p[g]=l);for(;a<o;++a)u[a]=n[a];return new De(u,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,o=t[e],i=o.length-1,s=o[i];--i>=0;)(r=o[i])&&(s&&4^r.compareDocumentPosition(s)&&s.parentNode.insertBefore(r,s),s=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=Ht);for(var n=this._groups,r=n.length,o=new Array(r),i=0;i<r;++i){for(var s,u=n[i],a=u.length,l=o[i]=new Array(a),c=0;c<a;++c)(s=u[c])&&(l[c]=s);l.sort(e)}return new De(o,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],o=0,i=r.length;o<i;++o){var s=r[o];if(s)return s}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var o,i=e[n],s=0,u=i.length;s<u;++s)(o=i[s])&&t.call(o,o.__data__,s,i);return this},attr:function(t,e){var n=Kt(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?Wt:Zt:"function"==typeof e?n.local?ne:ee:n.local?te:Jt)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?oe:"function"==typeof e?se:ie)(t,e,null==n?"":n)):ue(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?ae:"function"==typeof e?ce:le)(t,e)):this.node()[t]},classed:function(t,e){var n=fe(t+"");if(arguments.length<2){for(var r=he(this.node()),o=-1,i=n.length;++o<i;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof e?we:e?de:ye)(n,e))},text:function(t){return arguments.length?this.each(null==t?ve:("function"==typeof t?xe:be)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Me:("function"==typeof t?Se:_e)(t)):this.node().innerHTML},raise:function(){return this.each(Ee)},lower:function(){return this.each(ke)},append:function(t){var e="function"==typeof t?t:je(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:je(t),r=null==e?Re:"function"==typeof e?e:Rt(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Ne)},clone:function(t){return this.select(t?Oe:Te)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,o,i=qe(t+""),s=i.length;if(!(arguments.length<2)){for(u=e?Ce:Pe,r=0;r<s;++r)this.each(u(i[r],e,n));return this}var u=this.node().__on;if(u)for(var a,l=0,c=u.length;l<c;++l)for(r=0,a=u[l];r<s;++r)if((o=i[r]).type===a.type&&o.name===a.name)return a.value},dispatch:function(t,e){return this.each(("function"==typeof e?Ve:ze)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,o=t[e],i=0,s=o.length;i<s;++i)(r=o[i])&&(yield r)}};var Fe=Be,Xe=function(t){return"string"==typeof t?new De([[document.querySelector(t)]],[document.documentElement]):new De([[t]],Le)};const Ue={passive:!1},Ye={capture:!0,passive:!1};function He(t){t.stopImmediatePropagation()}var Qe=function(t){t.preventDefault(),t.stopImmediatePropagation()},Ge=function(t){var e=t.document.documentElement,n=Xe(t).on("dragstart.drag",Qe,Ye);"onselectstart"in e?n.on("selectstart.drag",Qe,Ye):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")};function Ke(t,e){var n=t.document.documentElement,r=Xe(t).on("dragstart.drag",null);e&&(r.on("click.drag",Qe,Ye),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}var Ze=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function We(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Je(){}var tn="\\s*([+-]?\\d+)\\s*",en="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",nn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",rn=/^#([0-9a-f]{3,8})$/,on=new RegExp("^rgb\\("+[tn,tn,tn]+"\\)$"),sn=new RegExp("^rgb\\("+[nn,nn,nn]+"\\)$"),un=new RegExp("^rgba\\("+[tn,tn,tn,en]+"\\)$"),an=new RegExp("^rgba\\("+[nn,nn,nn,en]+"\\)$"),ln=new RegExp("^hsl\\("+[en,nn,nn]+"\\)$"),cn=new RegExp("^hsla\\("+[en,nn,nn,en]+"\\)$"),fn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function hn(){return this.rgb().formatHex()}function pn(){return this.rgb().formatRgb()}function gn(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=rn.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?mn(e):3===n?new vn(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?dn(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?dn(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=on.exec(t))?new vn(e[1],e[2],e[3],1):(e=sn.exec(t))?new vn(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=un.exec(t))?dn(e[1],e[2],e[3],e[4]):(e=an.exec(t))?dn(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=ln.exec(t))?_n(e[1],e[2]/100,e[3]/100,1):(e=cn.exec(t))?_n(e[1],e[2]/100,e[3]/100,e[4]):fn.hasOwnProperty(t)?mn(fn[t]):"transparent"===t?new vn(NaN,NaN,NaN,0):null}function mn(t){return new vn(t>>16&255,t>>8&255,255&t,1)}function dn(t,e,n,r){return r<=0&&(t=e=n=NaN),new vn(t,e,n,r)}function yn(t){return t instanceof Je||(t=gn(t)),t?new vn((t=t.rgb()).r,t.g,t.b,t.opacity):new vn}function wn(t,e,n,r){return 1===arguments.length?yn(t):new vn(t,e,n,null==r?1:r)}function vn(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function bn(){return"#"+Mn(this.r)+Mn(this.g)+Mn(this.b)}function xn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Mn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function _n(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new En(t,e,n,r)}function Sn(t){if(t instanceof En)return new En(t.h,t.s,t.l,t.opacity);if(t instanceof Je||(t=gn(t)),!t)return new En;if(t instanceof En)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,o=Math.min(e,n,r),i=Math.max(e,n,r),s=NaN,u=i-o,a=(i+o)/2;return u?(s=e===i?(n-r)/u+6*(n<r):n===i?(r-e)/u+2:(e-n)/u+4,u/=a<.5?i+o:2-i-o,s*=60):u=a>0&&a<1?0:s,new En(s,u,a,t.opacity)}function En(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function kn(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function An(t,e,n,r,o){var i=t*t,s=i*t;return((1-3*t+3*i-s)*e+(4-6*i+3*s)*n+(1+3*t+3*i-3*s)*r+s*o)/6}Ze(Je,gn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:hn,formatHex:hn,formatHsl:function(){return Sn(this).formatHsl()},formatRgb:pn,toString:pn}),Ze(vn,wn,We(Je,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new vn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new vn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:bn,formatHex:bn,formatRgb:xn,toString:xn})),Ze(En,(function(t,e,n,r){return 1===arguments.length?Sn(t):new En(t,e,n,null==r?1:r)}),We(Je,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new En(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new En(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,o=2*n-r;return new vn(kn(t>=240?t-240:t+120,o,r),kn(t,o,r),kn(t<120?t+240:t-120,o,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var $n=t=>()=>t;function jn(t,e){return function(n){return t+n*e}}function Rn(t){return 1==(t=+t)?Nn:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):$n(isNaN(e)?n:e)}}function Nn(t,e){var n=e-t;return n?jn(t,n):$n(isNaN(t)?e:t)}var Tn=function t(e){var n=Rn(e);function r(t,e){var r=n((t=wn(t)).r,(e=wn(e)).r),o=n(t.g,e.g),i=n(t.b,e.b),s=Nn(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=o(e),t.b=i(e),t.opacity=s(e),t+""}}return r.gamma=t,r}(1);function On(t){return function(e){var n,r,o=e.length,i=new Array(o),s=new Array(o),u=new Array(o);for(n=0;n<o;++n)r=wn(e[n]),i[n]=r.r||0,s[n]=r.g||0,u[n]=r.b||0;return i=t(i),s=t(s),u=t(u),r.opacity=1,function(t){return r.r=i(t),r.g=s(t),r.b=u(t),r+""}}}var qn=On((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),o=t[r],i=t[r+1],s=r>0?t[r-1]:2*o-i,u=r<e-1?t[r+2]:2*i-o;return An((n-r/e)*e,s,o,i,u)}})),Pn=(On((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),o=t[(r+e-1)%e],i=t[r%e],s=t[(r+1)%e],u=t[(r+2)%e];return An((n-r/e)*e,o,i,s,u)}})),function(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,o=e.slice();return function(i){for(n=0;n<r;++n)o[n]=t[n]*(1-i)+e[n]*i;return o}});function Cn(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function In(t,e){var n,r=e?e.length:0,o=t?Math.min(r,t.length):0,i=new Array(o),s=new Array(r);for(n=0;n<o;++n)i[n]=Yn(t[n],e[n]);for(;n<r;++n)s[n]=e[n];return function(t){for(n=0;n<o;++n)s[n]=i[n](t);return s}}var zn=function(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}},Vn=function(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}},Ln=function(t,e){var n,r={},o={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Yn(t[n],e[n]):o[n]=e[n];return function(t){for(n in r)o[n]=r[n](t);return o}},Dn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Bn=new RegExp(Dn.source,"g");var Fn,Xn,Un=function(t,e){var n,r,o,i=Dn.lastIndex=Bn.lastIndex=0,s=-1,u=[],a=[];for(t+="",e+="";(n=Dn.exec(t))&&(r=Bn.exec(e));)(o=r.index)>i&&(o=e.slice(i,o),u[s]?u[s]+=o:u[++s]=o),(n=n[0])===(r=r[0])?u[s]?u[s]+=r:u[++s]=r:(u[++s]=null,a.push({i:s,x:Vn(n,r)})),i=Bn.lastIndex;return i<e.length&&(o=e.slice(i),u[s]?u[s]+=o:u[++s]=o),u.length<2?a[0]?function(t){return function(e){return t(e)+""}}(a[0].x):function(t){return function(){return t}}(e):(e=a.length,function(t){for(var n,r=0;r<e;++r)u[(n=a[r]).i]=n.x(t);return u.join("")})},Yn=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?$n(e):("number"===r?Vn:"string"===r?(n=gn(e))?(e=n,Tn):Un:e instanceof gn?Tn:e instanceof Date?zn:Cn(e)?Pn:Array.isArray(e)?In:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Ln:Vn)(t,e)},Hn=function(t,e){if(t=function(t){let e;for(;e=t.sourceEvent;)t=e;return t}(t),void 0===e&&(e=t.currentTarget),e){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}if(e.getBoundingClientRect){var o=e.getBoundingClientRect();return[t.clientX-o.left-e.clientLeft,t.clientY-o.top-e.clientTop]}}return[t.pageX,t.pageY]},Qn=0,Gn=0,Kn=0,Zn=0,Wn=0,Jn=0,tr="object"==typeof performance&&performance.now?performance:Date,er="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function nr(){return Wn||(er(rr),Wn=tr.now()+Jn)}function rr(){Wn=0}function or(){this._call=this._time=this._next=null}function ir(t,e,n){var r=new or;return r.restart(t,e,n),r}function sr(){Wn=(Zn=tr.now())+Jn,Qn=Gn=0;try{!function(){nr(),++Qn;for(var t,e=Fn;e;)(t=Wn-e._time)>=0&&e._call.call(void 0,t),e=e._next;--Qn}()}finally{Qn=0,function(){var t,e,n=Fn,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Fn=e);Xn=t,ar(r)}(),Wn=0}}function ur(){var t=tr.now(),e=t-Zn;e>1e3&&(Jn-=e,Zn=t)}function ar(t){Qn||(Gn&&(Gn=clearTimeout(Gn)),t-Wn>24?(t<1/0&&(Gn=setTimeout(sr,t-tr.now()-Jn)),Kn&&(Kn=clearInterval(Kn))):(Kn||(Zn=tr.now(),Kn=setInterval(ur,1e3)),Qn=1,er(sr)))}or.prototype=ir.prototype={constructor:or,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?nr():+n)+(null==e?0:+e),this._next||Xn===this||(Xn?Xn._next=this:Fn=this,Xn=this),this._call=t,this._time=n,ar()},stop:function(){this._call&&(this._call=null,this._time=1/0,ar())}};var lr=function(t,e,n){var r=new or;return e=null==e?0:+e,r.restart(n=>{r.stop(),t(n+e)},e,n),r},cr=$t("start","end","cancel","interrupt"),fr=[],hr=function(t,e,n,r,o,i){var s=t.__transition;if(s){if(n in s)return}else t.__transition={};!function(t,e,n){var r,o=t.__transition;function i(a){var l,c,f,h;if(1!==n.state)return u();for(l in o)if((h=o[l]).name===n.name){if(3===h.state)return lr(i);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete o[l]):+l<e&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete o[l])}if(lr((function(){3===n.state&&(n.state=4,n.timer.restart(s,n.delay,n.time),s(a))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(f=n.tween.length),l=0,c=-1;l<f;++l)(h=n.tween[l].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=h);r.length=c+1}}function s(e){for(var o=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(u),n.state=5,1),i=-1,s=r.length;++i<s;)r[i].call(t,o);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),u())}function u(){for(var r in n.state=6,n.timer.stop(),delete o[e],o)return;delete t.__transition}o[e]=n,n.timer=ir((function(t){n.state=1,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:o,on:cr,tween:fr,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:0})};function pr(t,e){var n=mr(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function gr(t,e){var n=mr(t,e);if(n.state>3)throw new Error("too late; already running");return n}function mr(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var dr,yr=function(t,e){var n,r,o,i=t.__transition,s=!0;if(i){for(o in e=null==e?null:e+"",i)(n=i[o]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete i[o]):s=!1;s&&delete t.__transition}},wr=180/Math.PI,vr={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},br=function(t,e,n,r,o,i){var s,u,a;return(s=Math.sqrt(t*t+e*e))&&(t/=s,e/=s),(a=t*n+e*r)&&(n-=t*a,r-=e*a),(u=Math.sqrt(n*n+r*r))&&(n/=u,r/=u,a/=u),t*r<e*n&&(t=-t,e=-e,a=-a,s=-s),{translateX:o,translateY:i,rotate:Math.atan2(e,t)*wr,skewX:Math.atan(a)*wr,scaleX:s,scaleY:u}};function xr(t,e,n,r){function o(t){return t.length?t.pop()+" ":""}return function(i,s){var u=[],a=[];return i=t(i),s=t(s),function(t,r,o,i,s,u){if(t!==o||r!==i){var a=s.push("translate(",null,e,null,n);u.push({i:a-4,x:Vn(t,o)},{i:a-2,x:Vn(r,i)})}else(o||i)&&s.push("translate("+o+e+i+n)}(i.translateX,i.translateY,s.translateX,s.translateY,u,a),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(o(n)+"rotate(",null,r)-2,x:Vn(t,e)})):e&&n.push(o(n)+"rotate("+e+r)}(i.rotate,s.rotate,u,a),function(t,e,n,i){t!==e?i.push({i:n.push(o(n)+"skewX(",null,r)-2,x:Vn(t,e)}):e&&n.push(o(n)+"skewX("+e+r)}(i.skewX,s.skewX,u,a),function(t,e,n,r,i,s){if(t!==n||e!==r){var u=i.push(o(i)+"scale(",null,",",null,")");s.push({i:u-4,x:Vn(t,n)},{i:u-2,x:Vn(e,r)})}else 1===n&&1===r||i.push(o(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,s.scaleX,s.scaleY,u,a),i=s=null,function(t){for(var e,n=-1,r=a.length;++n<r;)u[(e=a[n]).i]=e.x(t);return u.join("")}}}var Mr=xr((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?vr:br(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),_r=xr((function(t){return null==t?vr:(dr||(dr=document.createElementNS("http://www.w3.org/2000/svg","g")),dr.setAttribute("transform",t),(t=dr.transform.baseVal.consolidate())?(t=t.matrix,br(t.a,t.b,t.c,t.d,t.e,t.f)):vr)}),", ",")",")");function Sr(t,e){var n,r;return function(){var o=gr(this,t),i=o.tween;if(i!==n)for(var s=0,u=(r=n=i).length;s<u;++s)if(r[s].name===e){(r=r.slice()).splice(s,1);break}o.tween=r}}function Er(t,e,n){var r,o;if("function"!=typeof n)throw new Error;return function(){var i=gr(this,t),s=i.tween;if(s!==r){o=(r=s).slice();for(var u={name:e,value:n},a=0,l=o.length;a<l;++a)if(o[a].name===e){o[a]=u;break}a===l&&o.push(u)}i.tween=o}}function kr(t,e,n){var r=t._id;return t.each((function(){var t=gr(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return mr(t,r).value[e]}}var Ar=function(t,e){var n;return("number"==typeof e?Vn:e instanceof gn?Tn:(n=gn(e))?(e=n,Tn):Un)(t,e)};function $r(t){return function(){this.removeAttribute(t)}}function jr(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Rr(t,e,n){var r,o,i=n+"";return function(){var s=this.getAttribute(t);return s===i?null:s===r?o:o=e(r=s,n)}}function Nr(t,e,n){var r,o,i=n+"";return function(){var s=this.getAttributeNS(t.space,t.local);return s===i?null:s===r?o:o=e(r=s,n)}}function Tr(t,e,n){var r,o,i;return function(){var s,u,a=n(this);if(null!=a)return(s=this.getAttribute(t))===(u=a+"")?null:s===r&&u===o?i:(o=u,i=e(r=s,a));this.removeAttribute(t)}}function Or(t,e,n){var r,o,i;return function(){var s,u,a=n(this);if(null!=a)return(s=this.getAttributeNS(t.space,t.local))===(u=a+"")?null:s===r&&u===o?i:(o=u,i=e(r=s,a));this.removeAttributeNS(t.space,t.local)}}function qr(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function Pr(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function Cr(t,e){var n,r;function o(){var o=e.apply(this,arguments);return o!==r&&(n=(r=o)&&Pr(t,o)),n}return o._value=e,o}function Ir(t,e){var n,r;function o(){var o=e.apply(this,arguments);return o!==r&&(n=(r=o)&&qr(t,o)),n}return o._value=e,o}function zr(t,e){return function(){pr(this,t).delay=+e.apply(this,arguments)}}function Vr(t,e){return e=+e,function(){pr(this,t).delay=e}}function Lr(t,e){return function(){gr(this,t).duration=+e.apply(this,arguments)}}function Dr(t,e){return e=+e,function(){gr(this,t).duration=e}}function Br(t,e){if("function"!=typeof e)throw new Error;return function(){gr(this,t).ease=e}}function Fr(t,e,n){var r,o,i=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?pr:gr;return function(){var s=i(this,t),u=s.on;u!==r&&(o=(r=u).copy()).on(e,n),s.on=o}}var Xr=Fe.prototype.constructor;function Ur(t){return function(){this.style.removeProperty(t)}}function Yr(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}function Hr(t,e,n){var r,o;function i(){var i=e.apply(this,arguments);return i!==o&&(r=(o=i)&&Yr(t,i,n)),r}return i._value=e,i}function Qr(t){return function(e){this.textContent=t.call(this,e)}}function Gr(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&Qr(r)),e}return r._value=t,r}var Kr=0;function Zr(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Wr(){return++Kr}var Jr=Fe.prototype;Zr.prototype=function(t){return Fe().transition(t)}.prototype={constructor:Zr,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Rt(t));for(var r=this._groups,o=r.length,i=new Array(o),s=0;s<o;++s)for(var u,a,l=r[s],c=l.length,f=i[s]=new Array(c),h=0;h<c;++h)(u=l[h])&&(a=t.call(u,u.__data__,h,l))&&("__data__"in u&&(a.__data__=u.__data__),f[h]=a,hr(f[h],e,n,h,f,mr(u,n)));return new Zr(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Ot(t));for(var r=this._groups,o=r.length,i=[],s=[],u=0;u<o;++u)for(var a,l=r[u],c=l.length,f=0;f<c;++f)if(a=l[f]){for(var h,p=t.call(a,a.__data__,f,l),g=mr(a,n),m=0,d=p.length;m<d;++m)(h=p[m])&&hr(h,e,n,m,p,g);i.push(p),s.push(a)}return new Zr(i,s,e,n)},selectChild:Jr.selectChild,selectChildren:Jr.selectChildren,filter:function(t){"function"!=typeof t&&(t=qt(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,s=e[o],u=s.length,a=r[o]=[],l=0;l<u;++l)(i=s[l])&&t.call(i,i.__data__,l,s)&&a.push(i);return new Zr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,o=n.length,i=Math.min(r,o),s=new Array(r),u=0;u<i;++u)for(var a,l=e[u],c=n[u],f=l.length,h=s[u]=new Array(f),p=0;p<f;++p)(a=l[p]||c[p])&&(h[p]=a);for(;u<r;++u)s[u]=e[u];return new Zr(s,this._parents,this._name,this._id)},selection:function(){return new Xr(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Wr(),r=this._groups,o=r.length,i=0;i<o;++i)for(var s,u=r[i],a=u.length,l=0;l<a;++l)if(s=u[l]){var c=mr(s,e);hr(s,t,n,l,u,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Zr(r,this._parents,t,n)},call:Jr.call,nodes:Jr.nodes,node:Jr.node,size:Jr.size,empty:Jr.empty,each:Jr.each,on:function(t,e){var n=this._id;return arguments.length<2?mr(this.node(),n).on.on(t):this.each(Fr(n,t,e))},attr:function(t,e){var n=Kt(t),r="transform"===n?_r:Ar;return this.attrTween(t,"function"==typeof e?(n.local?Or:Tr)(n,r,kr(this,"attr."+t,e)):null==e?(n.local?jr:$r)(n):(n.local?Nr:Rr)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=Kt(t);return this.tween(n,(r.local?Cr:Ir)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Mr:Ar;return null==e?this.styleTween(t,function(t,e){var n,r,o;return function(){var i=ue(this,t),s=(this.style.removeProperty(t),ue(this,t));return i===s?null:i===n&&s===r?o:o=e(n=i,r=s)}}(t,r)).on("end.style."+t,Ur(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,o,i;return function(){var s=ue(this,t),u=n(this),a=u+"";return null==u&&(this.style.removeProperty(t),a=u=ue(this,t)),s===a?null:s===r&&a===o?i:(o=a,i=e(r=s,u))}}(t,r,kr(this,"style."+t,e))).each(function(t,e){var n,r,o,i,s="style."+e,u="end."+s;return function(){var a=gr(this,t),l=a.on,c=null==a.value[s]?i||(i=Ur(e)):void 0;l===n&&o===c||(r=(n=l).copy()).on(u,o=c),a.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,o,i=n+"";return function(){var s=ue(this,t);return s===i?null:s===r?o:o=e(r=s,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,Hr(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(kr(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,Gr(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,o=mr(this.node(),n).tween,i=0,s=o.length;i<s;++i)if((r=o[i]).name===t)return r.value;return null}return this.each((null==e?Sr:Er)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?zr:Vr)(e,t)):mr(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Lr:Dr)(e,t)):mr(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(Br(e,t)):mr(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;gr(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,o=n.size();return new Promise((function(i,s){var u={value:s},a={value:function(){0==--o&&i()}};n.each((function(){var n=gr(this,r),o=n.on;o!==t&&((e=(t=o).copy())._.cancel.push(u),e._.interrupt.push(u),e._.end.push(a)),n.on=e})),0===o&&i()}))},[Symbol.iterator]:Jr[Symbol.iterator]};var to={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function eo(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}Fe.prototype.interrupt=function(t){return this.each((function(){yr(this,t)}))},Fe.prototype.transition=function(t){var e,n;t instanceof Zr?(e=t._id,t=t._name):(e=Wr(),(n=to).time=nr(),t=null==t?null:t+"");for(var r=this._groups,o=r.length,i=0;i<o;++i)for(var s,u=r[i],a=u.length,l=0;l<a;++l)(s=u[l])&&hr(s,t,e,l,u,n||eo(s,e));return new Zr(r,this._parents,t,e)};const{abs:no,max:ro,min:oo}=Math;function io(t){return[+t[0],+t[1]]}function so(t){return[io(t[0]),io(t[1])]}["w","e"].map(uo),["n","s"].map(uo),["n","w","e","s","nw","ne","sw","se"].map(uo);function uo(t){return{type:t}}var ao=t=>()=>t;function lo(t,{sourceEvent:e,subject:n,target:r,identifier:o,active:i,x:s,y:u,dx:a,dy:l,dispatch:c}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:e,enumerable:!0,configurable:!0},subject:{value:n,enumerable:!0,configurable:!0},target:{value:r,enumerable:!0,configurable:!0},identifier:{value:o,enumerable:!0,configurable:!0},active:{value:i,enumerable:!0,configurable:!0},x:{value:s,enumerable:!0,configurable:!0},y:{value:u,enumerable:!0,configurable:!0},dx:{value:a,enumerable:!0,configurable:!0},dy:{value:l,enumerable:!0,configurable:!0},_:{value:c}})}function co(t){return!t.ctrlKey&&!t.button}function fo(){return this.parentNode}function ho(t,e){return null==e?{x:t.x,y:t.y}:e}function po(){return navigator.maxTouchPoints||"ontouchstart"in this}lo.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var go=function(){var t,e,n,r,o=co,i=fo,s=ho,u=po,a={},l=$t("start","drag","end"),c=0,f=0;function h(t){t.on("mousedown.drag",p).filter(u).on("touchstart.drag",d).on("touchmove.drag",y,Ue).on("touchend.drag touchcancel.drag",w).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(s,u){if(!r&&o.call(this,s,u)){var a=v(this,i.call(this,s,u),s,u,"mouse");a&&(Xe(s.view).on("mousemove.drag",g,Ye).on("mouseup.drag",m,Ye),Ge(s.view),He(s),n=!1,t=s.clientX,e=s.clientY,a("start",s))}}function g(r){if(Qe(r),!n){var o=r.clientX-t,i=r.clientY-e;n=o*o+i*i>f}a.mouse("drag",r)}function m(t){Xe(t.view).on("mousemove.drag mouseup.drag",null),Ke(t.view,n),Qe(t),a.mouse("end",t)}function d(t,e){if(o.call(this,t,e)){var n,r,s=t.changedTouches,u=i.call(this,t,e),a=s.length;for(n=0;n<a;++n)(r=v(this,u,t,e,s[n].identifier,s[n]))&&(He(t),r("start",t,s[n]))}}function y(t){var e,n,r=t.changedTouches,o=r.length;for(e=0;e<o;++e)(n=a[r[e].identifier])&&(Qe(t),n("drag",t,r[e]))}function w(t){var e,n,o=t.changedTouches,i=o.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),e=0;e<i;++e)(n=a[o[e].identifier])&&(He(t),n("end",t,o[e]))}function v(t,e,n,r,o,i){var u,f,p,g=l.copy(),m=Hn(i||n,e);if(null!=(p=s.call(t,new lo("beforestart",{sourceEvent:n,target:h,identifier:o,active:c,x:m[0],y:m[1],dx:0,dy:0,dispatch:g}),r)))return u=p.x-m[0]||0,f=p.y-m[1]||0,function n(i,s,l){var d,y=m;switch(i){case"start":a[o]=n,d=c++;break;case"end":delete a[o],--c;case"drag":m=Hn(l||s,e),d=c}g.call(i,t,new lo(i,{sourceEvent:s,subject:p,target:h,identifier:o,active:d,x:m[0]+u,y:m[1]+f,dx:m[0]-y[0],dy:m[1]-y[1],dispatch:g}),r)}}return h.filter=function(t){return arguments.length?(o="function"==typeof t?t:ao(!!t),h):o},h.container=function(t){return arguments.length?(i="function"==typeof t?t:ao(t),h):i},h.subject=function(t){return arguments.length?(s="function"==typeof t?t:ao(t),h):s},h.touchable=function(t){return arguments.length?(u="function"==typeof t?t:ao(!!t),h):u},h.on=function(){var t=l.on.apply(l,arguments);return t===l?h:t},h.clickDistance=function(t){return arguments.length?(f=(t=+t)*t,h):Math.sqrt(f)},h},mo=function(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}};function yo(t){return+t}var wo=[0,1];function vo(t){return t}function bo(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=isNaN(e)?NaN:.5,function(){return n});var n}function xo(t,e,n){var r=t[0],o=t[1],i=e[0],s=e[1];return o<r?(r=bo(o,r),i=n(s,i)):(r=bo(r,o),i=n(i,s)),function(t){return i(r(t))}}function Mo(t,e,n){var r=Math.min(t.length,e.length)-1,o=new Array(r),i=new Array(r),s=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++s<r;)o[s]=bo(t[s],t[s+1]),i[s]=n(e[s],e[s+1]);return function(e){var n=at(t,e,1,r)-1;return i[n](o[n](e))}}function _o(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function So(){var t,e,n,r,o,i,s=wo,u=wo,a=Yn,l=vo;function c(){var t,e,n,a=Math.min(s.length,u.length);return l!==vo&&(t=s[0],e=s[a-1],t>e&&(n=t,t=e,e=n),l=function(n){return Math.max(t,Math.min(e,n))}),r=a>2?Mo:xo,o=i=null,f}function f(e){return null==e||isNaN(e=+e)?n:(o||(o=r(s.map(t),u,a)))(t(l(e)))}return f.invert=function(n){return l(e((i||(i=r(u,s.map(t),Vn)))(n)))},f.domain=function(t){return arguments.length?(s=Array.from(t,yo),c()):s.slice()},f.range=function(t){return arguments.length?(u=Array.from(t),c()):u.slice()},f.rangeRound=function(t){return u=Array.from(t),a=mo,c()},f.clamp=function(t){return arguments.length?(l=!!t||vo,c()):l!==vo},f.interpolate=function(t){return arguments.length?(a=t,c()):a},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,c()}}function Eo(){return So()(vo,vo)}function ko(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function Ao(t,e){switch(arguments.length){case 0:break;case 1:"function"==typeof t?this.interpolator(t):this.range(t);break;default:this.domain(t),"function"==typeof e?this.interpolator(e):this.range(e)}return this}var $o=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function jo(t){if(!(e=$o.exec(t)))throw new Error("invalid format: "+t);var e;return new Ro({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Ro(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}jo.prototype=Ro.prototype,Ro.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};function No(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}var To,Oo,qo,Po,Co=function(t){return(t=No(Math.abs(t)))?t[1]:NaN},Io=function(t,e){var n=No(t,e);if(!n)return t+"";var r=n[0],o=n[1];return o<0?"0."+new Array(-o).join("0")+r:r.length>o+1?r.slice(0,o+1)+"."+r.slice(o+1):r+new Array(o-r.length+2).join("0")},zo={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>Io(100*t,e),r:Io,s:function(t,e){var n=No(t,e);if(!n)return t+"";var r=n[0],o=n[1],i=o-(To=3*Math.max(-8,Math.min(8,Math.floor(o/3))))+1,s=r.length;return i===s?r:i>s?r+new Array(i-s+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+No(t,Math.max(0,e+i-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)},Vo=function(t){return t},Lo=Array.prototype.map,Do=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Oo=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?Vo:(e=Lo.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var o=t.length,i=[],s=0,u=e[0],a=0;o>0&&u>0&&(a+u+1>r&&(u=Math.max(1,r-a)),i.push(t.substring(o-=u,o+u)),!((a+=u+1)>r));)u=e[s=(s+1)%e.length];return i.reverse().join(n)}),o=void 0===t.currency?"":t.currency[0]+"",i=void 0===t.currency?"":t.currency[1]+"",s=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?Vo:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(Lo.call(t.numerals,String)),a=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"−":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=jo(t)).fill,n=t.align,f=t.sign,h=t.symbol,p=t.zero,g=t.width,m=t.comma,d=t.precision,y=t.trim,w=t.type;"n"===w?(m=!0,w="g"):zo[w]||(void 0===d&&(d=12),y=!0,w="g"),(p||"0"===e&&"="===n)&&(p=!0,e="0",n="=");var v="$"===h?o:"#"===h&&/[boxX]/.test(w)?"0"+w.toLowerCase():"",b="$"===h?i:/[%p]/.test(w)?a:"",x=zo[w],M=/[defgprs%]/.test(w);function _(t){var o,i,a,h=v,_=b;if("c"===w)_=x(t)+_,t="";else{var S=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:x(Math.abs(t),d),y&&(t=function(t){t:for(var e,n=t.length,r=1,o=-1;r<n;++r)switch(t[r]){case".":o=e=r;break;case"0":0===o&&(o=r),e=r;break;default:if(!+t[r])break t;o>0&&(o=0)}return o>0?t.slice(0,o)+t.slice(e+1):t}(t)),S&&0==+t&&"+"!==f&&(S=!1),h=(S?"("===f?f:l:"-"===f||"("===f?"":f)+h,_=("s"===w?Do[8+To/3]:"")+_+(S&&"("===f?")":""),M)for(o=-1,i=t.length;++o<i;)if(48>(a=t.charCodeAt(o))||a>57){_=(46===a?s+t.slice(o+1):t.slice(o))+_,t=t.slice(0,o);break}}m&&!p&&(t=r(t,1/0));var E=h.length+t.length+_.length,k=E<g?new Array(g-E+1).join(e):"";switch(m&&p&&(t=r(k+t,k.length?g-_.length:1/0),k=""),n){case"<":t=h+t+_+k;break;case"=":t=h+k+t+_;break;case"^":t=k.slice(0,E=k.length>>1)+h+t+_+k.slice(E);break;default:t=k+h+t+_}return u(t)}return d=void 0===d?6:/[gprs]/.test(w)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),_.toString=function(){return t+""},_}return{format:f,formatPrefix:function(t,e){var n=f(((t=jo(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Co(e)/3))),o=Math.pow(10,-r),i=Do[8+r/3];return function(t){return n(o*t)+i}}}}({thousands:",",grouping:[3],currency:["$",""]}),qo=Oo.format,Po=Oo.formatPrefix;function Bo(t,e,n,r){var o,i=function(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),o=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/o;return i>=ht?o*=10:i>=pt?o*=5:i>=gt&&(o*=2),e<t?-o:o}(t,e,n);switch((r=jo(null==r?",f":r)).type){case"s":var s=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(o=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Co(e)/3)))-Co(Math.abs(t)))}(i,s))||(r.precision=o),Po(r,s);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(o=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Co(e)-Co(t))+1}(i,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=o-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(o=function(t){return Math.max(0,-Co(Math.abs(t)))}(i))||(r.precision=o-2*("%"===r.type))}return qo(r)}function Fo(t){var e=t.domain;return t.ticks=function(t){var n=e();return mt(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return Bo(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,o,i=e(),s=0,u=i.length-1,a=i[s],l=i[u],c=10;for(l<a&&(o=a,a=l,l=o,o=s,s=u,u=o);c-- >0;){if((o=dt(a,l,n))===r)return i[s]=a,i[u]=l,e(i);if(o>0)a=Math.floor(a/o)*o,l=Math.ceil(l/o)*o;else{if(!(o<0))break;a=Math.ceil(a*o)/o,l=Math.floor(l*o)/o}r=o}return t},t}function Xo(){var t=Eo();return t.copy=function(){return _o(t,Xo())},ko.apply(t,arguments),Fo(t)}function Uo(){var t,e,n,r,o,i=0,s=1,u=vo,a=!1;function l(e){return null==e||isNaN(e=+e)?o:u(0===n?.5:(e=(r(e)-t)*n,a?Math.max(0,Math.min(1,e)):e))}function c(t){return function(e){var n,r;return arguments.length?([n,r]=e,u=t(n,r),l):[u(0),u(1)]}}return l.domain=function(o){return arguments.length?([i,s]=o,t=r(i=+i),e=r(s=+s),n=t===e?0:1/(e-t),l):[i,s]},l.clamp=function(t){return arguments.length?(a=!!t,l):a},l.interpolator=function(t){return arguments.length?(u=t,l):u},l.range=c(Yn),l.rangeRound=c(mo),l.unknown=function(t){return arguments.length?(o=t,l):o},function(o){return r=o,t=o(i),e=o(s),n=t===e?0:1/(e-t),l}}function Yo(t,e){return e.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function Ho(){var t=Fo(Uo()(vo));return t.copy=function(){return Yo(t,Ho())},Ao.apply(t,arguments)}var Qo=function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n},Go=t=>qn(t[t.length-1]),Ko=Go(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Qo));Go(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Qo));const Zo=Math.PI,Wo=2*Zo,Jo=Wo-1e-6;function ti(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function ei(){return new ti}ti.prototype=ei.prototype={constructor:ti,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,o,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+o)+","+(this._y1=+i)},arcTo:function(t,e,n,r,o){t=+t,e=+e,n=+n,r=+r,o=+o;var i=this._x1,s=this._y1,u=n-t,a=r-e,l=i-t,c=s-e,f=l*l+c*c;if(o<0)throw new Error("negative radius: "+o);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>1e-6)if(Math.abs(c*u-a*l)>1e-6&&o){var h=n-i,p=r-s,g=u*u+a*a,m=h*h+p*p,d=Math.sqrt(g),y=Math.sqrt(f),w=o*Math.tan((Zo-Math.acos((g+f-m)/(2*d*y)))/2),v=w/y,b=w/d;Math.abs(v-1)>1e-6&&(this._+="L"+(t+v*l)+","+(e+v*c)),this._+="A"+o+","+o+",0,0,"+ +(c*h>l*p)+","+(this._x1=t+b*u)+","+(this._y1=e+b*a)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,o,i){t=+t,e=+e,i=!!i;var s=(n=+n)*Math.cos(r),u=n*Math.sin(r),a=t+s,l=e+u,c=1^i,f=i?r-o:o-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+a+","+l:(Math.abs(this._x1-a)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+a+","+l),n&&(f<0&&(f=f%Wo+Wo),f>Jo?this._+="A"+n+","+n+",0,1,"+c+","+(t-s)+","+(e-u)+"A"+n+","+n+",0,1,"+c+","+(this._x1=a)+","+(this._y1=l):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=Zo)+","+c+","+(this._x1=t+n*Math.cos(o))+","+(this._y1=e+n*Math.sin(o))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var ni=ei,ri=(Array.prototype.slice,function(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}),oi=function(t){return function(){return t}};function ii(t){this._context=t}ii.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var si=function(t){return new ii(t)};function ui(t){return t[0]}function ai(t){return t[1]}var li=function(t,e){var n=oi(!0),r=null,o=si,i=null;function s(s){var u,a,l,c=(s=ri(s)).length,f=!1;for(null==r&&(i=o(l=ni())),u=0;u<=c;++u)!(u<c&&n(a=s[u],u,s))===f&&((f=!f)?i.lineStart():i.lineEnd()),f&&i.point(+t(a,u,s),+e(a,u,s));if(l)return i=null,l+""||null}return t="function"==typeof t?t:void 0===t?ui:oi(t),e="function"==typeof e?e:void 0===e?ai:oi(e),s.x=function(e){return arguments.length?(t="function"==typeof e?e:oi(+e),s):t},s.y=function(t){return arguments.length?(e="function"==typeof t?t:oi(+t),s):e},s.defined=function(t){return arguments.length?(n="function"==typeof t?t:oi(!!t),s):n},s.curve=function(t){return arguments.length?(o=t,null!=r&&(i=o(r)),s):o},s.context=function(t){return arguments.length?(null==t?r=i=null:i=o(r=t),s):r},s};function ci(t){return((t=Math.exp(t))+1/t)/2}(function t(e,n,r){function o(t,o){var i,s,u=t[0],a=t[1],l=t[2],c=o[0],f=o[1],h=o[2],p=c-u,g=f-a,m=p*p+g*g;if(m<1e-12)s=Math.log(h/l)/e,i=function(t){return[u+t*p,a+t*g,l*Math.exp(e*t*s)]};else{var d=Math.sqrt(m),y=(h*h-l*l+r*m)/(2*l*n*d),w=(h*h-l*l-r*m)/(2*h*n*d),v=Math.log(Math.sqrt(y*y+1)-y),b=Math.log(Math.sqrt(w*w+1)-w);s=(b-v)/e,i=function(t){var r,o=t*s,i=ci(v),c=l/(n*d)*(i*(r=e*o+v,((r=Math.exp(2*r))-1)/(r+1))-function(t){return((t=Math.exp(t))-1/t)/2}(v));return[u+c*p,a+c*g,l*i/ci(e*o+v)]}}return i.duration=1e3*s*e/Math.SQRT2,i}return o.rho=function(e){var n=Math.max(.001,+e),r=n*n;return t(n,r,r*r)},o})(Math.SQRT2,2,4);function fi(t,e,n){this.k=t,this.x=e,this.y=n}fi.prototype={constructor:fi,scale:function(t){return 1===t?this:new fi(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new fi(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new fi(1,0,0);fi.prototype;const hi=Object.prototype.toString;function pi(t){return hi.call(t).endsWith("Array]")}var gi=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!pi(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");var n=e.fromIndex,r=void 0===n?0:n,o=e.toIndex,i=void 0===o?t.length:o;if(r<0||r>=t.length||!Number.isInteger(r))throw new Error("fromIndex must be a positive integer smaller than length");if(i<=r||i>t.length||!Number.isInteger(i))throw new Error("toIndex must be an integer greater than fromIndex and at most equal to length");for(var s=t[r],u=r+1;u<i;u++)t[u]>s&&(s=t[u]);return s};var mi=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!pi(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");var n=e.fromIndex,r=void 0===n?0:n,o=e.toIndex,i=void 0===o?t.length:o;if(r<0||r>=t.length||!Number.isInteger(r))throw new Error("fromIndex must be a positive integer smaller than length");if(i<=r||i>t.length||!Number.isInteger(i))throw new Error("toIndex must be an integer greater than fromIndex and at most equal to length");for(var s=t[r],u=r+1;u<i;u++)t[u]<s&&(s=t[u]);return s};function di(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!pi(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");if(void 0!==n.output){if(!pi(n.output))throw new TypeError("output option must be an array if specified");e=n.output}else e=new Array(t.length);var r=mi(t),o=gi(t);if(r===o)throw new RangeError("minimum and maximum input values are equal. Cannot rescale a constant array");var i=n.min,s=void 0===i?n.autoMinMax?r:0:i,u=n.max,a=void 0===u?n.autoMinMax?o:1:u;if(s>=a)throw new RangeError("min option must be smaller than max option");for(var l=(a-s)/(o-r),c=0;c<t.length;c++)e[c]=(t[c]-r)*l+s;return e}const yi=" ".repeat(2),wi=" ".repeat(4);function vi(t,e={}){const{maxRows:n=15,maxColumns:r=10,maxNumSize:o=8}=e;return`${t.constructor.name} {\n${yi}[\n${wi}${function(t,e,n,r){const{rows:o,columns:i}=t,s=Math.min(o,e),u=Math.min(i,n),a=[];for(let e=0;e<s;e++){let n=[];for(let o=0;o<u;o++)n.push(bi(t.get(e,o),r));a.push(""+n.join(" "))}u!==i&&(a[a.length-1]+=` ... ${i-n} more columns`);s!==o&&a.push(`... ${o-e} more rows`);return a.join("\n"+wi)}(t,n,r,o)}\n${yi}]\n${yi}rows: ${t.rows}\n${yi}columns: ${t.columns}\n}`}function bi(t,e){const n=String(t);if(n.length<=e)return n.padEnd(e," ");const r=t.toPrecision(e-2);if(r.length<=e)return r;const o=t.toExponential(e-2),i=o.indexOf("e"),s=o.slice(i);return o.slice(0,e-s.length)+s}function xi(t,e,n){let r=n?t.rows:t.rows-1;if(e<0||e>r)throw new RangeError("Row index out of range")}function Mi(t,e,n){let r=n?t.columns:t.columns-1;if(e<0||e>r)throw new RangeError("Column index out of range")}function _i(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.columns)throw new RangeError("vector size must be the same as the number of columns");return e}function Si(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.rows)throw new RangeError("vector size must be the same as the number of rows");return e}function Ei(t,e){if("object"!=typeof e)throw new TypeError("unexpected type for row indices");if(e.some(e=>e<0||e>=t.rows))throw new RangeError("row indices are out of range");return Array.isArray(e)||(e=Array.from(e)),e}function ki(t,e){if("object"!=typeof e)throw new TypeError("unexpected type for column indices");if(e.some(e=>e<0||e>=t.columns))throw new RangeError("column indices are out of range");return Array.isArray(e)||(e=Array.from(e)),e}function Ai(t,e,n,r,o){if(5!==arguments.length)throw new RangeError("expected 4 arguments");if(ji("startRow",e),ji("endRow",n),ji("startColumn",r),ji("endColumn",o),e>n||r>o||e<0||e>=t.rows||n<0||n>=t.rows||r<0||r>=t.columns||o<0||o>=t.columns)throw new RangeError("Submatrix indices are out of range")}function $i(t,e=0){let n=[];for(let r=0;r<t;r++)n.push(e);return n}function ji(t,e){if("number"!=typeof e)throw new TypeError(t+" must be a number")}function Ri(t){if(t.isEmpty())throw new Error("Empty matrix has no elements to index")}class Ni{static from1DArray(t,e,n){if(t*e!==n.length)throw new RangeError("data length does not match given dimensions");let r=new Oi(t,e);for(let o=0;o<t;o++)for(let t=0;t<e;t++)r.set(o,t,n[o*e+t]);return r}static rowVector(t){let e=new Oi(1,t.length);for(let n=0;n<t.length;n++)e.set(0,n,t[n]);return e}static columnVector(t){let e=new Oi(t.length,1);for(let n=0;n<t.length;n++)e.set(n,0,t[n]);return e}static zeros(t,e){return new Oi(t,e)}static ones(t,e){return new Oi(t,e).fill(1)}static rand(t,e,n={}){if("object"!=typeof n)throw new TypeError("options must be an object");const{random:r=Math.random}=n;let o=new Oi(t,e);for(let n=0;n<t;n++)for(let t=0;t<e;t++)o.set(n,t,r());return o}static randInt(t,e,n={}){if("object"!=typeof n)throw new TypeError("options must be an object");const{min:r=0,max:o=1e3,random:i=Math.random}=n;if(!Number.isInteger(r))throw new TypeError("min must be an integer");if(!Number.isInteger(o))throw new TypeError("max must be an integer");if(r>=o)throw new RangeError("min must be smaller than max");let s=o-r,u=new Oi(t,e);for(let n=0;n<t;n++)for(let t=0;t<e;t++){let e=r+Math.round(i()*s);u.set(n,t,e)}return u}static eye(t,e,n){void 0===e&&(e=t),void 0===n&&(n=1);let r=Math.min(t,e),o=this.zeros(t,e);for(let t=0;t<r;t++)o.set(t,t,n);return o}static diag(t,e,n){let r=t.length;void 0===e&&(e=r),void 0===n&&(n=e);let o=Math.min(r,e,n),i=this.zeros(e,n);for(let e=0;e<o;e++)i.set(e,e,t[e]);return i}static min(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);let n=t.rows,r=t.columns,o=new Oi(n,r);for(let i=0;i<n;i++)for(let n=0;n<r;n++)o.set(i,n,Math.min(t.get(i,n),e.get(i,n)));return o}static max(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);let n=t.rows,r=t.columns,o=new this(n,r);for(let i=0;i<n;i++)for(let n=0;n<r;n++)o.set(i,n,Math.max(t.get(i,n),e.get(i,n)));return o}static checkMatrix(t){return Ni.isMatrix(t)?t:new Oi(t)}static isMatrix(t){return null!=t&&"Matrix"===t.klass}get size(){return this.rows*this.columns}apply(t){if("function"!=typeof t)throw new TypeError("callback must be a function");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)t.call(this,e,n);return this}to1DArray(){let t=[];for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)t.push(this.get(e,n));return t}to2DArray(){let t=[];for(let e=0;e<this.rows;e++){t.push([]);for(let n=0;n<this.columns;n++)t[e].push(this.get(e,n))}return t}toJSON(){return this.to2DArray()}isRowVector(){return 1===this.rows}isColumnVector(){return 1===this.columns}isVector(){return 1===this.rows||1===this.columns}isSquare(){return this.rows===this.columns}isEmpty(){return 0===this.rows||0===this.columns}isSymmetric(){if(this.isSquare()){for(let t=0;t<this.rows;t++)for(let e=0;e<=t;e++)if(this.get(t,e)!==this.get(e,t))return!1;return!0}return!1}isEchelonForm(){let t=0,e=0,n=-1,r=!0,o=!1;for(;t<this.rows&&r;){for(e=0,o=!1;e<this.columns&&!1===o;)0===this.get(t,e)?e++:1===this.get(t,e)&&e>n?(o=!0,n=e):(r=!1,o=!0);t++}return r}isReducedEchelonForm(){let t=0,e=0,n=-1,r=!0,o=!1;for(;t<this.rows&&r;){for(e=0,o=!1;e<this.columns&&!1===o;)0===this.get(t,e)?e++:1===this.get(t,e)&&e>n?(o=!0,n=e):(r=!1,o=!0);for(let n=e+1;n<this.rows;n++)0!==this.get(t,n)&&(r=!1);t++}return r}echelonForm(){let t=this.clone(),e=0,n=0;for(;e<t.rows&&n<t.columns;){let r=e;for(let o=e;o<t.rows;o++)t.get(o,n)>t.get(r,n)&&(r=o);if(0===t.get(r,n))n++;else{t.swapRows(e,r);let o=t.get(e,n);for(let r=n;r<t.columns;r++)t.set(e,r,t.get(e,r)/o);for(let r=e+1;r<t.rows;r++){let o=t.get(r,n)/t.get(e,n);t.set(r,n,0);for(let i=n+1;i<t.columns;i++)t.set(r,i,t.get(r,i)-t.get(e,i)*o)}e++,n++}}return t}reducedEchelonForm(){let t=this.echelonForm(),e=t.columns,n=t.rows,r=n-1;for(;r>=0;)if(0===t.maxRow(r))r--;else{let o=0,i=!1;for(;o<n&&!1===i;)1===t.get(r,o)?i=!0:o++;for(let n=0;n<r;n++){let i=t.get(n,o);for(let s=o;s<e;s++){let e=t.get(n,s)-i*t.get(r,s);t.set(n,s,e)}}r--}return t}set(){throw new Error("set method is unimplemented")}get(){throw new Error("get method is unimplemented")}repeat(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{rows:e=1,columns:n=1}=t;if(!Number.isInteger(e)||e<=0)throw new TypeError("rows must be a positive integer");if(!Number.isInteger(n)||n<=0)throw new TypeError("columns must be a positive integer");let r=new Oi(this.rows*e,this.columns*n);for(let t=0;t<e;t++)for(let e=0;e<n;e++)r.setSubMatrix(this,this.rows*t,this.columns*e);return r}fill(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,t);return this}neg(){return this.mulS(-1)}getRow(t){xi(this,t);let e=[];for(let n=0;n<this.columns;n++)e.push(this.get(t,n));return e}getRowVector(t){return Oi.rowVector(this.getRow(t))}setRow(t,e){xi(this,t),e=_i(this,e);for(let n=0;n<this.columns;n++)this.set(t,n,e[n]);return this}swapRows(t,e){xi(this,t),xi(this,e);for(let n=0;n<this.columns;n++){let r=this.get(t,n);this.set(t,n,this.get(e,n)),this.set(e,n,r)}return this}getColumn(t){Mi(this,t);let e=[];for(let n=0;n<this.rows;n++)e.push(this.get(n,t));return e}getColumnVector(t){return Oi.columnVector(this.getColumn(t))}setColumn(t,e){Mi(this,t),e=Si(this,e);for(let n=0;n<this.rows;n++)this.set(n,t,e[n]);return this}swapColumns(t,e){Mi(this,t),Mi(this,e);for(let n=0;n<this.rows;n++){let r=this.get(n,t);this.set(n,t,this.get(n,e)),this.set(n,e,r)}return this}addRowVector(t){t=_i(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)+t[n]);return this}subRowVector(t){t=_i(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)-t[n]);return this}mulRowVector(t){t=_i(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)*t[n]);return this}divRowVector(t){t=_i(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)/t[n]);return this}addColumnVector(t){t=Si(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)+t[e]);return this}subColumnVector(t){t=Si(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)-t[e]);return this}mulColumnVector(t){t=Si(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)*t[e]);return this}divColumnVector(t){t=Si(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)/t[e]);return this}mulRow(t,e){xi(this,t);for(let n=0;n<this.columns;n++)this.set(t,n,this.get(t,n)*e);return this}mulColumn(t,e){Mi(this,t);for(let n=0;n<this.rows;n++)this.set(n,t,this.get(n,t)*e);return this}max(){if(this.isEmpty())return NaN;let t=this.get(0,0);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.get(e,n)>t&&(t=this.get(e,n));return t}maxIndex(){Ri(this);let t=this.get(0,0),e=[0,0];for(let n=0;n<this.rows;n++)for(let r=0;r<this.columns;r++)this.get(n,r)>t&&(t=this.get(n,r),e[0]=n,e[1]=r);return e}min(){if(this.isEmpty())return NaN;let t=this.get(0,0);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.get(e,n)<t&&(t=this.get(e,n));return t}minIndex(){Ri(this);let t=this.get(0,0),e=[0,0];for(let n=0;n<this.rows;n++)for(let r=0;r<this.columns;r++)this.get(n,r)<t&&(t=this.get(n,r),e[0]=n,e[1]=r);return e}maxRow(t){if(xi(this,t),this.isEmpty())return NaN;let e=this.get(t,0);for(let n=1;n<this.columns;n++)this.get(t,n)>e&&(e=this.get(t,n));return e}maxRowIndex(t){xi(this,t),Ri(this);let e=this.get(t,0),n=[t,0];for(let r=1;r<this.columns;r++)this.get(t,r)>e&&(e=this.get(t,r),n[1]=r);return n}minRow(t){if(xi(this,t),this.isEmpty())return NaN;let e=this.get(t,0);for(let n=1;n<this.columns;n++)this.get(t,n)<e&&(e=this.get(t,n));return e}minRowIndex(t){xi(this,t),Ri(this);let e=this.get(t,0),n=[t,0];for(let r=1;r<this.columns;r++)this.get(t,r)<e&&(e=this.get(t,r),n[1]=r);return n}maxColumn(t){if(Mi(this,t),this.isEmpty())return NaN;let e=this.get(0,t);for(let n=1;n<this.rows;n++)this.get(n,t)>e&&(e=this.get(n,t));return e}maxColumnIndex(t){Mi(this,t),Ri(this);let e=this.get(0,t),n=[0,t];for(let r=1;r<this.rows;r++)this.get(r,t)>e&&(e=this.get(r,t),n[0]=r);return n}minColumn(t){if(Mi(this,t),this.isEmpty())return NaN;let e=this.get(0,t);for(let n=1;n<this.rows;n++)this.get(n,t)<e&&(e=this.get(n,t));return e}minColumnIndex(t){Mi(this,t),Ri(this);let e=this.get(0,t),n=[0,t];for(let r=1;r<this.rows;r++)this.get(r,t)<e&&(e=this.get(r,t),n[0]=r);return n}diag(){let t=Math.min(this.rows,this.columns),e=[];for(let n=0;n<t;n++)e.push(this.get(n,n));return e}norm(t="frobenius"){let e=0;if("max"===t)return this.max();if("frobenius"===t){for(let t=0;t<this.rows;t++)for(let n=0;n<this.columns;n++)e+=this.get(t,n)*this.get(t,n);return Math.sqrt(e)}throw new RangeError("unknown norm type: "+t)}cumulativeSum(){let t=0;for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)t+=this.get(e,n),this.set(e,n,t);return this}dot(t){Ni.isMatrix(t)&&(t=t.to1DArray());let e=this.to1DArray();if(e.length!==t.length)throw new RangeError("vectors do not have the same size");let n=0;for(let r=0;r<e.length;r++)n+=e[r]*t[r];return n}mmul(t){t=Oi.checkMatrix(t);let e=this.rows,n=this.columns,r=t.columns,o=new Oi(e,r),i=new Float64Array(n);for(let s=0;s<r;s++){for(let e=0;e<n;e++)i[e]=t.get(e,s);for(let t=0;t<e;t++){let e=0;for(let r=0;r<n;r++)e+=this.get(t,r)*i[r];o.set(t,s,e)}}return o}strassen2x2(t){t=Oi.checkMatrix(t);let e=new Oi(2,2);const n=this.get(0,0),r=t.get(0,0),o=this.get(0,1),i=t.get(0,1),s=this.get(1,0),u=t.get(1,0),a=this.get(1,1),l=t.get(1,1),c=(n+a)*(r+l),f=(s+a)*r,h=n*(i-l),p=a*(u-r),g=(n+o)*l,m=c+p-g+(o-a)*(u+l),d=h+g,y=f+p,w=c-f+h+(s-n)*(r+i);return e.set(0,0,m),e.set(0,1,d),e.set(1,0,y),e.set(1,1,w),e}strassen3x3(t){t=Oi.checkMatrix(t);let e=new Oi(3,3);const n=this.get(0,0),r=this.get(0,1),o=this.get(0,2),i=this.get(1,0),s=this.get(1,1),u=this.get(1,2),a=this.get(2,0),l=this.get(2,1),c=this.get(2,2),f=t.get(0,0),h=t.get(0,1),p=t.get(0,2),g=t.get(1,0),m=t.get(1,1),d=t.get(1,2),y=t.get(2,0),w=t.get(2,1),v=t.get(2,2),b=(n-i)*(-h+m),x=(-n+i+s)*(f-h+m),M=(i+s)*(-f+h),_=n*f,S=(-n+a+l)*(f-p+d),E=(-n+a)*(p-d),k=(a+l)*(-f+p),A=(-o+l+c)*(m+y-w),$=(o-c)*(m-w),j=o*y,R=(l+c)*(-y+w),N=(-o+s+u)*(d+y-v),T=(o-u)*(d-v),O=(s+u)*(-y+v),q=_+j+r*g,P=(n+r+o-i-s-l-c)*m+x+M+_+A+j+R,C=_+S+k+(n+r+o-s-u-a-l)*d+j+N+O,I=b+s*(-f+h+g-m-d-y+v)+x+_+j+N+T,z=b+x+M+_+u*w,V=j+N+T+O+i*p,L=_+S+E+l*(-f+p+g-m-d-y+w)+A+$+j,D=A+$+j+R+a*h,B=_+S+E+k+c*v;return e.set(0,0,q),e.set(0,1,P),e.set(0,2,C),e.set(1,0,I),e.set(1,1,z),e.set(1,2,V),e.set(2,0,L),e.set(2,1,D),e.set(2,2,B),e}mmulStrassen(t){t=Oi.checkMatrix(t);let e=this.clone(),n=e.rows,r=e.columns,o=t.rows,i=t.columns;function s(t,e,n){let r=t.rows,o=t.columns;if(r===e&&o===n)return t;{let r=Ni.zeros(e,n);return r=r.setSubMatrix(t,0,0),r}}r!==o&&console.warn(`Multiplying ${n} x ${r} and ${o} x ${i} matrix: dimensions do not match.`);let u=Math.max(n,o),a=Math.max(r,i);return e=s(e,u,a),function t(e,n,r,o){if(r<=512||o<=512)return e.mmul(n);r%2==1&&o%2==1?(e=s(e,r+1,o+1),n=s(n,r+1,o+1)):r%2==1?(e=s(e,r+1,o),n=s(n,r+1,o)):o%2==1&&(e=s(e,r,o+1),n=s(n,r,o+1));let i=parseInt(e.rows/2,10),u=parseInt(e.columns/2,10),a=e.subMatrix(0,i-1,0,u-1),l=n.subMatrix(0,i-1,0,u-1),c=e.subMatrix(0,i-1,u,e.columns-1),f=n.subMatrix(0,i-1,u,n.columns-1),h=e.subMatrix(i,e.rows-1,0,u-1),p=n.subMatrix(i,n.rows-1,0,u-1),g=e.subMatrix(i,e.rows-1,u,e.columns-1),m=n.subMatrix(i,n.rows-1,u,n.columns-1),d=t(Ni.add(a,g),Ni.add(l,m),i,u),y=t(Ni.add(h,g),l,i,u),w=t(a,Ni.sub(f,m),i,u),v=t(g,Ni.sub(p,l),i,u),b=t(Ni.add(a,c),m,i,u),x=t(Ni.sub(h,a),Ni.add(l,f),i,u),M=t(Ni.sub(c,g),Ni.add(p,m),i,u),_=Ni.add(d,v);_.sub(b),_.add(M);let S=Ni.add(w,b),E=Ni.add(y,v),k=Ni.sub(d,y);k.add(w),k.add(x);let A=Ni.zeros(2*_.rows,2*_.columns);return A=A.setSubMatrix(_,0,0),A=A.setSubMatrix(S,_.rows,0),A=A.setSubMatrix(E,0,_.columns),A=A.setSubMatrix(k,_.rows,_.columns),A.subMatrix(0,r-1,0,o-1)}(e,t=s(t,u,a),u,a)}scaleRows(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{min:e=0,max:n=1}=t;if(!Number.isFinite(e))throw new TypeError("min must be a number");if(!Number.isFinite(n))throw new TypeError("max must be a number");if(e>=n)throw new RangeError("min must be smaller than max");let r=new Oi(this.rows,this.columns);for(let t=0;t<this.rows;t++){const o=this.getRow(t);o.length>0&&di(o,{min:e,max:n,output:o}),r.setRow(t,o)}return r}scaleColumns(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{min:e=0,max:n=1}=t;if(!Number.isFinite(e))throw new TypeError("min must be a number");if(!Number.isFinite(n))throw new TypeError("max must be a number");if(e>=n)throw new RangeError("min must be smaller than max");let r=new Oi(this.rows,this.columns);for(let t=0;t<this.columns;t++){const o=this.getColumn(t);o.length&&di(o,{min:e,max:n,output:o}),r.setColumn(t,o)}return r}flipRows(){const t=Math.ceil(this.columns/2);for(let e=0;e<this.rows;e++)for(let n=0;n<t;n++){let t=this.get(e,n),r=this.get(e,this.columns-1-n);this.set(e,n,r),this.set(e,this.columns-1-n,t)}return this}flipColumns(){const t=Math.ceil(this.rows/2);for(let e=0;e<this.columns;e++)for(let n=0;n<t;n++){let t=this.get(n,e),r=this.get(this.rows-1-n,e);this.set(n,e,r),this.set(this.rows-1-n,e,t)}return this}kroneckerProduct(t){t=Oi.checkMatrix(t);let e=this.rows,n=this.columns,r=t.rows,o=t.columns,i=new Oi(e*r,n*o);for(let s=0;s<e;s++)for(let e=0;e<n;e++)for(let n=0;n<r;n++)for(let u=0;u<o;u++)i.set(r*s+n,o*e+u,this.get(s,e)*t.get(n,u));return i}kroneckerSum(t){if(t=Oi.checkMatrix(t),!this.isSquare()||!t.isSquare())throw new Error("Kronecker Sum needs two Square Matrices");let e=this.rows,n=t.rows,r=this.kroneckerProduct(Oi.eye(n,n)),o=Oi.eye(e,e).kroneckerProduct(t);return r.add(o)}transpose(){let t=new Oi(this.columns,this.rows);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)t.set(n,e,this.get(e,n));return t}sortRows(t=Ti){for(let e=0;e<this.rows;e++)this.setRow(e,this.getRow(e).sort(t));return this}sortColumns(t=Ti){for(let e=0;e<this.columns;e++)this.setColumn(e,this.getColumn(e).sort(t));return this}subMatrix(t,e,n,r){Ai(this,t,e,n,r);let o=new Oi(e-t+1,r-n+1);for(let i=t;i<=e;i++)for(let e=n;e<=r;e++)o.set(i-t,e-n,this.get(i,e));return o}subMatrixRow(t,e,n){if(void 0===e&&(e=0),void 0===n&&(n=this.columns-1),e>n||e<0||e>=this.columns||n<0||n>=this.columns)throw new RangeError("Argument out of range");let r=new Oi(t.length,n-e+1);for(let o=0;o<t.length;o++)for(let i=e;i<=n;i++){if(t[o]<0||t[o]>=this.rows)throw new RangeError("Row index out of range: "+t[o]);r.set(o,i-e,this.get(t[o],i))}return r}subMatrixColumn(t,e,n){if(void 0===e&&(e=0),void 0===n&&(n=this.rows-1),e>n||e<0||e>=this.rows||n<0||n>=this.rows)throw new RangeError("Argument out of range");let r=new Oi(n-e+1,t.length);for(let o=0;o<t.length;o++)for(let i=e;i<=n;i++){if(t[o]<0||t[o]>=this.columns)throw new RangeError("Column index out of range: "+t[o]);r.set(i-e,o,this.get(i,t[o]))}return r}setSubMatrix(t,e,n){if((t=Oi.checkMatrix(t)).isEmpty())return this;Ai(this,e,e+t.rows-1,n,n+t.columns-1);for(let r=0;r<t.rows;r++)for(let o=0;o<t.columns;o++)this.set(e+r,n+o,t.get(r,o));return this}selection(t,e){let n=function(t,e,n){return{row:Ei(t,e),column:ki(t,n)}}(this,t,e),r=new Oi(t.length,e.length);for(let t=0;t<n.row.length;t++){let e=n.row[t];for(let o=0;o<n.column.length;o++){let i=n.column[o];r.set(t,o,this.get(e,i))}}return r}trace(){let t=Math.min(this.rows,this.columns),e=0;for(let n=0;n<t;n++)e+=this.get(n,n);return e}clone(){let t=new Oi(this.rows,this.columns);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)t.set(e,n,this.get(e,n));return t}sum(t){switch(t){case"row":return function(t){let e=$i(t.rows);for(let n=0;n<t.rows;++n)for(let r=0;r<t.columns;++r)e[n]+=t.get(n,r);return e}(this);case"column":return function(t){let e=$i(t.columns);for(let n=0;n<t.rows;++n)for(let r=0;r<t.columns;++r)e[r]+=t.get(n,r);return e}(this);case void 0:return function(t){let e=0;for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)e+=t.get(n,r);return e}(this);default:throw new Error("invalid option: "+t)}}product(t){switch(t){case"row":return function(t){let e=$i(t.rows,1);for(let n=0;n<t.rows;++n)for(let r=0;r<t.columns;++r)e[n]*=t.get(n,r);return e}(this);case"column":return function(t){let e=$i(t.columns,1);for(let n=0;n<t.rows;++n)for(let r=0;r<t.columns;++r)e[r]*=t.get(n,r);return e}(this);case void 0:return function(t){let e=1;for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)e*=t.get(n,r);return e}(this);default:throw new Error("invalid option: "+t)}}mean(t){const e=this.sum(t);switch(t){case"row":for(let t=0;t<this.rows;t++)e[t]/=this.columns;return e;case"column":for(let t=0;t<this.columns;t++)e[t]/=this.rows;return e;case void 0:return e/this.size;default:throw new Error("invalid option: "+t)}}variance(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");const{unbiased:n=!0,mean:r=this.mean(t)}=e;if("boolean"!=typeof n)throw new TypeError("unbiased must be a boolean");switch(t){case"row":if(!Array.isArray(r))throw new TypeError("mean must be an array");return function(t,e,n){const r=t.rows,o=t.columns,i=[];for(let s=0;s<r;s++){let r=0,u=0,a=0;for(let e=0;e<o;e++)a=t.get(s,e)-n[s],r+=a,u+=a*a;e?i.push((u-r*r/o)/(o-1)):i.push((u-r*r/o)/o)}return i}(this,n,r);case"column":if(!Array.isArray(r))throw new TypeError("mean must be an array");return function(t,e,n){const r=t.rows,o=t.columns,i=[];for(let s=0;s<o;s++){let o=0,u=0,a=0;for(let e=0;e<r;e++)a=t.get(e,s)-n[s],o+=a,u+=a*a;e?i.push((u-o*o/r)/(r-1)):i.push((u-o*o/r)/r)}return i}(this,n,r);case void 0:if("number"!=typeof r)throw new TypeError("mean must be a number");return function(t,e,n){const r=t.rows,o=t.columns,i=r*o;let s=0,u=0,a=0;for(let e=0;e<r;e++)for(let r=0;r<o;r++)a=t.get(e,r)-n,s+=a,u+=a*a;return e?(u-s*s/i)/(i-1):(u-s*s/i)/i}(this,n,r);default:throw new Error("invalid option: "+t)}}standardDeviation(t,e){"object"==typeof t&&(e=t,t=void 0);const n=this.variance(t,e);if(void 0===t)return Math.sqrt(n);for(let t=0;t<n.length;t++)n[t]=Math.sqrt(n[t]);return n}center(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");const{center:n=this.mean(t)}=e;switch(t){case"row":if(!Array.isArray(n))throw new TypeError("center must be an array");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)-e[n])}(this,n),this;case"column":if(!Array.isArray(n))throw new TypeError("center must be an array");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)-e[r])}(this,n),this;case void 0:if("number"!=typeof n)throw new TypeError("center must be a number");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)-e)}(this,n),this;default:throw new Error("invalid option: "+t)}}scale(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");let n=e.scale;switch(t){case"row":if(void 0===n)n=function(t){const e=[];for(let n=0;n<t.rows;n++){let r=0;for(let e=0;e<t.columns;e++)r+=Math.pow(t.get(n,e),2)/(t.columns-1);e.push(Math.sqrt(r))}return e}(this);else if(!Array.isArray(n))throw new TypeError("scale must be an array");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)/e[n])}(this,n),this;case"column":if(void 0===n)n=function(t){const e=[];for(let n=0;n<t.columns;n++){let r=0;for(let e=0;e<t.rows;e++)r+=Math.pow(t.get(e,n),2)/(t.rows-1);e.push(Math.sqrt(r))}return e}(this);else if(!Array.isArray(n))throw new TypeError("scale must be an array");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)/e[r])}(this,n),this;case void 0:if(void 0===n)n=function(t){const e=t.size-1;let n=0;for(let r=0;r<t.columns;r++)for(let o=0;o<t.rows;o++)n+=Math.pow(t.get(o,r),2)/e;return Math.sqrt(n)}(this);else if("number"!=typeof n)throw new TypeError("scale must be a number");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)/e)}(this,n),this;default:throw new Error("invalid option: "+t)}}toString(t){return vi(this,t)}}function Ti(t,e){return t-e}Ni.prototype.klass="Matrix","undefined"!=typeof Symbol&&(Ni.prototype[Symbol.for("nodejs.util.inspect.custom")]=function(){return vi(this)}),Ni.random=Ni.rand,Ni.randomInt=Ni.randInt,Ni.diagonal=Ni.diag,Ni.prototype.diagonal=Ni.prototype.diag,Ni.identity=Ni.eye,Ni.prototype.negate=Ni.prototype.neg,Ni.prototype.tensorProduct=Ni.prototype.kroneckerProduct;class Oi extends Ni{constructor(t,e){if(super(),Oi.isMatrix(t))return t.clone();if(Number.isInteger(t)&&t>=0){if(this.data=[],!(Number.isInteger(e)&&e>=0))throw new TypeError("nColumns must be a positive integer");for(let n=0;n<t;n++)this.data.push(new Float64Array(e))}else{if(!Array.isArray(t))throw new TypeError("First argument must be a positive number or an array");{const n=t;if("number"!=typeof(e=(t=n.length)?n[0].length:0))throw new TypeError("Data must be a 2D array with at least one element");this.data=[];for(let r=0;r<t;r++){if(n[r].length!==e)throw new RangeError("Inconsistent array dimensions");this.data.push(Float64Array.from(n[r]))}}}this.rows=t,this.columns=e}set(t,e,n){return this.data[t][e]=n,this}get(t,e){return this.data[t][e]}removeRow(t){return xi(this,t),this.data.splice(t,1),this.rows-=1,this}addRow(t,e){return void 0===e&&(e=t,t=this.rows),xi(this,t,!0),e=Float64Array.from(_i(this,e)),this.data.splice(t,0,e),this.rows+=1,this}removeColumn(t){Mi(this,t);for(let e=0;e<this.rows;e++){const n=new Float64Array(this.columns-1);for(let r=0;r<t;r++)n[r]=this.data[e][r];for(let r=t+1;r<this.columns;r++)n[r-1]=this.data[e][r];this.data[e]=n}return this.columns-=1,this}addColumn(t,e){void 0===e&&(e=t,t=this.columns),Mi(this,t,!0),e=Si(this,e);for(let n=0;n<this.rows;n++){const r=new Float64Array(this.columns+1);let o=0;for(;o<t;o++)r[o]=this.data[n][o];for(r[o++]=e[n];o<this.columns+1;o++)r[o]=this.data[n][o-1];this.data[n]=r}return this.columns+=1,this}}var qi,Pi;Pi=Oi,(qi=Ni).prototype.add=function(t){return"number"==typeof t?this.addS(t):this.addM(t)},qi.prototype.addS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)+t);return this},qi.prototype.addM=function(t){if(t=Pi.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)+t.get(e,n));return this},qi.add=function(t,e){return new Pi(t).add(e)},qi.prototype.sub=function(t){return"number"==typeof t?this.subS(t):this.subM(t)},qi.prototype.subS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)-t);return this},qi.prototype.subM=function(t){if(t=Pi.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)-t.get(e,n));return this},qi.sub=function(t,e){return new Pi(t).sub(e)},qi.prototype.subtract=qi.prototype.sub,qi.prototype.subtractS=qi.prototype.subS,qi.prototype.subtractM=qi.prototype.subM,qi.subtract=qi.sub,qi.prototype.mul=function(t){return"number"==typeof t?this.mulS(t):this.mulM(t)},qi.prototype.mulS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)*t);return this},qi.prototype.mulM=function(t){if(t=Pi.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)*t.get(e,n));return this},qi.mul=function(t,e){return new Pi(t).mul(e)},qi.prototype.multiply=qi.prototype.mul,qi.prototype.multiplyS=qi.prototype.mulS,qi.prototype.multiplyM=qi.prototype.mulM,qi.multiply=qi.mul,qi.prototype.div=function(t){return"number"==typeof t?this.divS(t):this.divM(t)},qi.prototype.divS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)/t);return this},qi.prototype.divM=function(t){if(t=Pi.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)/t.get(e,n));return this},qi.div=function(t,e){return new Pi(t).div(e)},qi.prototype.divide=qi.prototype.div,qi.prototype.divideS=qi.prototype.divS,qi.prototype.divideM=qi.prototype.divM,qi.divide=qi.div,qi.prototype.mod=function(t){return"number"==typeof t?this.modS(t):this.modM(t)},qi.prototype.modS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)%t);return this},qi.prototype.modM=function(t){if(t=Pi.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)%t.get(e,n));return this},qi.mod=function(t,e){return new Pi(t).mod(e)},qi.prototype.modulus=qi.prototype.mod,qi.prototype.modulusS=qi.prototype.modS,qi.prototype.modulusM=qi.prototype.modM,qi.modulus=qi.mod,qi.prototype.and=function(t){return"number"==typeof t?this.andS(t):this.andM(t)},qi.prototype.andS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)&t);return this},qi.prototype.andM=function(t){if(t=Pi.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)&t.get(e,n));return this},qi.and=function(t,e){return new Pi(t).and(e)},qi.prototype.or=function(t){return"number"==typeof t?this.orS(t):this.orM(t)},qi.prototype.orS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)|t);return this},qi.prototype.orM=function(t){if(t=Pi.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)|t.get(e,n));return this},qi.or=function(t,e){return new Pi(t).or(e)},qi.prototype.xor=function(t){return"number"==typeof t?this.xorS(t):this.xorM(t)},qi.prototype.xorS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)^t);return this},qi.prototype.xorM=function(t){if(t=Pi.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)^t.get(e,n));return this},qi.xor=function(t,e){return new Pi(t).xor(e)},qi.prototype.leftShift=function(t){return"number"==typeof t?this.leftShiftS(t):this.leftShiftM(t)},qi.prototype.leftShiftS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)<<t);return this},qi.prototype.leftShiftM=function(t){if(t=Pi.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)<<t.get(e,n));return this},qi.leftShift=function(t,e){return new Pi(t).leftShift(e)},qi.prototype.signPropagatingRightShift=function(t){return"number"==typeof t?this.signPropagatingRightShiftS(t):this.signPropagatingRightShiftM(t)},qi.prototype.signPropagatingRightShiftS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)>>t);return this},qi.prototype.signPropagatingRightShiftM=function(t){if(t=Pi.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)>>t.get(e,n));return this},qi.signPropagatingRightShift=function(t,e){return new Pi(t).signPropagatingRightShift(e)},qi.prototype.rightShift=function(t){return"number"==typeof t?this.rightShiftS(t):this.rightShiftM(t)},qi.prototype.rightShiftS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)>>>t);return this},qi.prototype.rightShiftM=function(t){if(t=Pi.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)>>>t.get(e,n));return this},qi.rightShift=function(t,e){return new Pi(t).rightShift(e)},qi.prototype.zeroFillRightShift=qi.prototype.rightShift,qi.prototype.zeroFillRightShiftS=qi.prototype.rightShiftS,qi.prototype.zeroFillRightShiftM=qi.prototype.rightShiftM,qi.zeroFillRightShift=qi.rightShift,qi.prototype.not=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,~this.get(t,e));return this},qi.not=function(t){return new Pi(t).not()},qi.prototype.abs=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.abs(this.get(t,e)));return this},qi.abs=function(t){return new Pi(t).abs()},qi.prototype.acos=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.acos(this.get(t,e)));return this},qi.acos=function(t){return new Pi(t).acos()},qi.prototype.acosh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.acosh(this.get(t,e)));return this},qi.acosh=function(t){return new Pi(t).acosh()},qi.prototype.asin=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.asin(this.get(t,e)));return this},qi.asin=function(t){return new Pi(t).asin()},qi.prototype.asinh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.asinh(this.get(t,e)));return this},qi.asinh=function(t){return new Pi(t).asinh()},qi.prototype.atan=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.atan(this.get(t,e)));return this},qi.atan=function(t){return new Pi(t).atan()},qi.prototype.atanh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.atanh(this.get(t,e)));return this},qi.atanh=function(t){return new Pi(t).atanh()},qi.prototype.cbrt=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cbrt(this.get(t,e)));return this},qi.cbrt=function(t){return new Pi(t).cbrt()},qi.prototype.ceil=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.ceil(this.get(t,e)));return this},qi.ceil=function(t){return new Pi(t).ceil()},qi.prototype.clz32=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.clz32(this.get(t,e)));return this},qi.clz32=function(t){return new Pi(t).clz32()},qi.prototype.cos=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cos(this.get(t,e)));return this},qi.cos=function(t){return new Pi(t).cos()},qi.prototype.cosh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cosh(this.get(t,e)));return this},qi.cosh=function(t){return new Pi(t).cosh()},qi.prototype.exp=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.exp(this.get(t,e)));return this},qi.exp=function(t){return new Pi(t).exp()},qi.prototype.expm1=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.expm1(this.get(t,e)));return this},qi.expm1=function(t){return new Pi(t).expm1()},qi.prototype.floor=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.floor(this.get(t,e)));return this},qi.floor=function(t){return new Pi(t).floor()},qi.prototype.fround=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.fround(this.get(t,e)));return this},qi.fround=function(t){return new Pi(t).fround()},qi.prototype.log=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log(this.get(t,e)));return this},qi.log=function(t){return new Pi(t).log()},qi.prototype.log1p=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log1p(this.get(t,e)));return this},qi.log1p=function(t){return new Pi(t).log1p()},qi.prototype.log10=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log10(this.get(t,e)));return this},qi.log10=function(t){return new Pi(t).log10()},qi.prototype.log2=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log2(this.get(t,e)));return this},qi.log2=function(t){return new Pi(t).log2()},qi.prototype.round=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.round(this.get(t,e)));return this},qi.round=function(t){return new Pi(t).round()},qi.prototype.sign=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sign(this.get(t,e)));return this},qi.sign=function(t){return new Pi(t).sign()},qi.prototype.sin=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sin(this.get(t,e)));return this},qi.sin=function(t){return new Pi(t).sin()},qi.prototype.sinh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sinh(this.get(t,e)));return this},qi.sinh=function(t){return new Pi(t).sinh()},qi.prototype.sqrt=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sqrt(this.get(t,e)));return this},qi.sqrt=function(t){return new Pi(t).sqrt()},qi.prototype.tan=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.tan(this.get(t,e)));return this},qi.tan=function(t){return new Pi(t).tan()},qi.prototype.tanh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.tanh(this.get(t,e)));return this},qi.tanh=function(t){return new Pi(t).tanh()},qi.prototype.trunc=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.trunc(this.get(t,e)));return this},qi.trunc=function(t){return new Pi(t).trunc()},qi.pow=function(t,e){return new Pi(t).pow(e)},qi.prototype.pow=function(t){return"number"==typeof t?this.powS(t):this.powM(t)},qi.prototype.powS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,Math.pow(this.get(e,n),t));return this},qi.prototype.powM=function(t){if(t=Pi.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,Math.pow(this.get(e,n),t.get(e,n)));return this};class Ci extends Ni{constructor(t){super(),this.data=t,this.rows=t.length,this.columns=t[0].length}set(t,e,n){return this.data[t][e]=n,this}get(t,e){return this.data[t][e]}}class Ii{constructor(t){let e,n,r,o,i,s,u,a,l,c=(t=Ci.checkMatrix(t)).clone(),f=c.rows,h=c.columns,p=new Float64Array(f),g=1;for(e=0;e<f;e++)p[e]=e;for(a=new Float64Array(f),n=0;n<h;n++){for(e=0;e<f;e++)a[e]=c.get(e,n);for(e=0;e<f;e++){for(l=Math.min(e,n),i=0,r=0;r<l;r++)i+=c.get(e,r)*a[r];a[e]-=i,c.set(e,n,a[e])}for(o=n,e=n+1;e<f;e++)Math.abs(a[e])>Math.abs(a[o])&&(o=e);if(o!==n){for(r=0;r<h;r++)s=c.get(o,r),c.set(o,r,c.get(n,r)),c.set(n,r,s);u=p[o],p[o]=p[n],p[n]=u,g=-g}if(n<f&&0!==c.get(n,n))for(e=n+1;e<f;e++)c.set(e,n,c.get(e,n)/c.get(n,n))}this.LU=c,this.pivotVector=p,this.pivotSign=g}isSingular(){let t=this.LU,e=t.columns;for(let n=0;n<e;n++)if(0===t.get(n,n))return!0;return!1}solve(t){t=Oi.checkMatrix(t);let e=this.LU;if(e.rows!==t.rows)throw new Error("Invalid matrix dimensions");if(this.isSingular())throw new Error("LU matrix is singular");let n,r,o,i=t.columns,s=t.subMatrixRow(this.pivotVector,0,i-1),u=e.columns;for(o=0;o<u;o++)for(n=o+1;n<u;n++)for(r=0;r<i;r++)s.set(n,r,s.get(n,r)-s.get(o,r)*e.get(n,o));for(o=u-1;o>=0;o--){for(r=0;r<i;r++)s.set(o,r,s.get(o,r)/e.get(o,o));for(n=0;n<o;n++)for(r=0;r<i;r++)s.set(n,r,s.get(n,r)-s.get(o,r)*e.get(n,o))}return s}get determinant(){let t=this.LU;if(!t.isSquare())throw new Error("Matrix must be square");let e=this.pivotSign,n=t.columns;for(let r=0;r<n;r++)e*=t.get(r,r);return e}get lowerTriangularMatrix(){let t=this.LU,e=t.rows,n=t.columns,r=new Oi(e,n);for(let o=0;o<e;o++)for(let e=0;e<n;e++)o>e?r.set(o,e,t.get(o,e)):o===e?r.set(o,e,1):r.set(o,e,0);return r}get upperTriangularMatrix(){let t=this.LU,e=t.rows,n=t.columns,r=new Oi(e,n);for(let o=0;o<e;o++)for(let e=0;e<n;e++)o<=e?r.set(o,e,t.get(o,e)):r.set(o,e,0);return r}get pivotPermutationVector(){return Array.from(this.pivotVector)}}function zi(t,e){let n=0;return Math.abs(t)>Math.abs(e)?(n=e/t,Math.abs(t)*Math.sqrt(1+n*n)):0!==e?(n=t/e,Math.abs(e)*Math.sqrt(1+n*n)):0}class Vi{constructor(t){let e,n,r,o,i=(t=Ci.checkMatrix(t)).clone(),s=t.rows,u=t.columns,a=new Float64Array(u);for(r=0;r<u;r++){let t=0;for(e=r;e<s;e++)t=zi(t,i.get(e,r));if(0!==t){for(i.get(r,r)<0&&(t=-t),e=r;e<s;e++)i.set(e,r,i.get(e,r)/t);for(i.set(r,r,i.get(r,r)+1),n=r+1;n<u;n++){for(o=0,e=r;e<s;e++)o+=i.get(e,r)*i.get(e,n);for(o=-o/i.get(r,r),e=r;e<s;e++)i.set(e,n,i.get(e,n)+o*i.get(e,r))}}a[r]=-t}this.QR=i,this.Rdiag=a}solve(t){t=Oi.checkMatrix(t);let e=this.QR,n=e.rows;if(t.rows!==n)throw new Error("Matrix row dimensions must agree");if(!this.isFullRank())throw new Error("Matrix is rank deficient");let r,o,i,s,u=t.columns,a=t.clone(),l=e.columns;for(i=0;i<l;i++)for(o=0;o<u;o++){for(s=0,r=i;r<n;r++)s+=e.get(r,i)*a.get(r,o);for(s=-s/e.get(i,i),r=i;r<n;r++)a.set(r,o,a.get(r,o)+s*e.get(r,i))}for(i=l-1;i>=0;i--){for(o=0;o<u;o++)a.set(i,o,a.get(i,o)/this.Rdiag[i]);for(r=0;r<i;r++)for(o=0;o<u;o++)a.set(r,o,a.get(r,o)-a.get(i,o)*e.get(r,i))}return a.subMatrix(0,l-1,0,u-1)}isFullRank(){let t=this.QR.columns;for(let e=0;e<t;e++)if(0===this.Rdiag[e])return!1;return!0}get upperTriangularMatrix(){let t,e,n=this.QR,r=n.columns,o=new Oi(r,r);for(t=0;t<r;t++)for(e=0;e<r;e++)t<e?o.set(t,e,n.get(t,e)):t===e?o.set(t,e,this.Rdiag[t]):o.set(t,e,0);return o}get orthogonalMatrix(){let t,e,n,r,o=this.QR,i=o.rows,s=o.columns,u=new Oi(i,s);for(n=s-1;n>=0;n--){for(t=0;t<i;t++)u.set(t,n,0);for(u.set(n,n,1),e=n;e<s;e++)if(0!==o.get(n,n)){for(r=0,t=n;t<i;t++)r+=o.get(t,n)*u.get(t,e);for(r=-r/o.get(n,n),t=n;t<i;t++)u.set(t,e,u.get(t,e)+r*o.get(t,n))}}return u}}class Li{constructor(t,e={}){if((t=Ci.checkMatrix(t)).isEmpty())throw new Error("Matrix must be non-empty");let n=t.rows,r=t.columns;const{computeLeftSingularVectors:o=!0,computeRightSingularVectors:i=!0,autoTranspose:s=!1}=e;let u,a=Boolean(o),l=Boolean(i),c=!1;if(n<r)if(s){u=t.transpose(),n=u.rows,r=u.columns,c=!0;let e=a;a=l,l=e}else u=t.clone(),console.warn("Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose");else u=t.clone();let f=Math.min(n,r),h=Math.min(n+1,r),p=new Float64Array(h),g=new Oi(n,f),m=new Oi(r,r),d=new Float64Array(r),y=new Float64Array(n),w=new Float64Array(h);for(let t=0;t<h;t++)w[t]=t;let v=Math.min(n-1,r),b=Math.max(0,Math.min(r-2,n)),x=Math.max(v,b);for(let t=0;t<x;t++){if(t<v){p[t]=0;for(let e=t;e<n;e++)p[t]=zi(p[t],u.get(e,t));if(0!==p[t]){u.get(t,t)<0&&(p[t]=-p[t]);for(let e=t;e<n;e++)u.set(e,t,u.get(e,t)/p[t]);u.set(t,t,u.get(t,t)+1)}p[t]=-p[t]}for(let e=t+1;e<r;e++){if(t<v&&0!==p[t]){let r=0;for(let o=t;o<n;o++)r+=u.get(o,t)*u.get(o,e);r=-r/u.get(t,t);for(let o=t;o<n;o++)u.set(o,e,u.get(o,e)+r*u.get(o,t))}d[e]=u.get(t,e)}if(a&&t<v)for(let e=t;e<n;e++)g.set(e,t,u.get(e,t));if(t<b){d[t]=0;for(let e=t+1;e<r;e++)d[t]=zi(d[t],d[e]);if(0!==d[t]){d[t+1]<0&&(d[t]=0-d[t]);for(let e=t+1;e<r;e++)d[e]/=d[t];d[t+1]+=1}if(d[t]=-d[t],t+1<n&&0!==d[t]){for(let e=t+1;e<n;e++)y[e]=0;for(let e=t+1;e<n;e++)for(let n=t+1;n<r;n++)y[e]+=d[n]*u.get(e,n);for(let e=t+1;e<r;e++){let r=-d[e]/d[t+1];for(let o=t+1;o<n;o++)u.set(o,e,u.get(o,e)+r*y[o])}}if(l)for(let e=t+1;e<r;e++)m.set(e,t,d[e])}}let M=Math.min(r,n+1);if(v<r&&(p[v]=u.get(v,v)),n<M&&(p[M-1]=0),b+1<M&&(d[b]=u.get(b,M-1)),d[M-1]=0,a){for(let t=v;t<f;t++){for(let e=0;e<n;e++)g.set(e,t,0);g.set(t,t,1)}for(let t=v-1;t>=0;t--)if(0!==p[t]){for(let e=t+1;e<f;e++){let r=0;for(let o=t;o<n;o++)r+=g.get(o,t)*g.get(o,e);r=-r/g.get(t,t);for(let o=t;o<n;o++)g.set(o,e,g.get(o,e)+r*g.get(o,t))}for(let e=t;e<n;e++)g.set(e,t,-g.get(e,t));g.set(t,t,1+g.get(t,t));for(let e=0;e<t-1;e++)g.set(e,t,0)}else{for(let e=0;e<n;e++)g.set(e,t,0);g.set(t,t,1)}}if(l)for(let t=r-1;t>=0;t--){if(t<b&&0!==d[t])for(let e=t+1;e<r;e++){let n=0;for(let o=t+1;o<r;o++)n+=m.get(o,t)*m.get(o,e);n=-n/m.get(t+1,t);for(let o=t+1;o<r;o++)m.set(o,e,m.get(o,e)+n*m.get(o,t))}for(let e=0;e<r;e++)m.set(e,t,0);m.set(t,t,1)}let _=M-1,S=0,E=Number.EPSILON;for(;M>0;){let t,e;for(t=M-2;t>=-1&&-1!==t;t--){const e=Number.MIN_VALUE+E*Math.abs(p[t]+Math.abs(p[t+1]));if(Math.abs(d[t])<=e||Number.isNaN(d[t])){d[t]=0;break}}if(t===M-2)e=4;else{let n;for(n=M-1;n>=t&&n!==t;n--){let e=(n!==M?Math.abs(d[n]):0)+(n!==t+1?Math.abs(d[n-1]):0);if(Math.abs(p[n])<=E*e){p[n]=0;break}}n===t?e=3:n===M-1?e=1:(e=2,t=n)}switch(t++,e){case 1:{let e=d[M-2];d[M-2]=0;for(let n=M-2;n>=t;n--){let o=zi(p[n],e),i=p[n]/o,s=e/o;if(p[n]=o,n!==t&&(e=-s*d[n-1],d[n-1]=i*d[n-1]),l)for(let t=0;t<r;t++)o=i*m.get(t,n)+s*m.get(t,M-1),m.set(t,M-1,-s*m.get(t,n)+i*m.get(t,M-1)),m.set(t,n,o)}break}case 2:{let e=d[t-1];d[t-1]=0;for(let r=t;r<M;r++){let o=zi(p[r],e),i=p[r]/o,s=e/o;if(p[r]=o,e=-s*d[r],d[r]=i*d[r],a)for(let e=0;e<n;e++)o=i*g.get(e,r)+s*g.get(e,t-1),g.set(e,t-1,-s*g.get(e,r)+i*g.get(e,t-1)),g.set(e,r,o)}break}case 3:{const e=Math.max(Math.abs(p[M-1]),Math.abs(p[M-2]),Math.abs(d[M-2]),Math.abs(p[t]),Math.abs(d[t])),o=p[M-1]/e,i=p[M-2]/e,s=d[M-2]/e,u=p[t]/e,c=d[t]/e,f=((i+o)*(i-o)+s*s)/2,h=o*s*(o*s);let y=0;0===f&&0===h||(y=f<0?0-Math.sqrt(f*f+h):Math.sqrt(f*f+h),y=h/(f+y));let w=(u+o)*(u-o)+y,v=u*c;for(let e=t;e<M-1;e++){let o=zi(w,v);0===o&&(o=Number.MIN_VALUE);let i=w/o,s=v/o;if(e!==t&&(d[e-1]=o),w=i*p[e]+s*d[e],d[e]=i*d[e]-s*p[e],v=s*p[e+1],p[e+1]=i*p[e+1],l)for(let t=0;t<r;t++)o=i*m.get(t,e)+s*m.get(t,e+1),m.set(t,e+1,-s*m.get(t,e)+i*m.get(t,e+1)),m.set(t,e,o);if(o=zi(w,v),0===o&&(o=Number.MIN_VALUE),i=w/o,s=v/o,p[e]=o,w=i*d[e]+s*p[e+1],p[e+1]=-s*d[e]+i*p[e+1],v=s*d[e+1],d[e+1]=i*d[e+1],a&&e<n-1)for(let t=0;t<n;t++)o=i*g.get(t,e)+s*g.get(t,e+1),g.set(t,e+1,-s*g.get(t,e)+i*g.get(t,e+1)),g.set(t,e,o)}d[M-2]=w,S+=1;break}case 4:if(p[t]<=0&&(p[t]=p[t]<0?-p[t]:0,l))for(let e=0;e<=_;e++)m.set(e,t,-m.get(e,t));for(;t<_&&!(p[t]>=p[t+1]);){let e=p[t];if(p[t]=p[t+1],p[t+1]=e,l&&t<r-1)for(let n=0;n<r;n++)e=m.get(n,t+1),m.set(n,t+1,m.get(n,t)),m.set(n,t,e);if(a&&t<n-1)for(let r=0;r<n;r++)e=g.get(r,t+1),g.set(r,t+1,g.get(r,t)),g.set(r,t,e);t++}S=0,M--}}if(c){let t=m;m=g,g=t}this.m=n,this.n=r,this.s=p,this.U=g,this.V=m}solve(t){let e=t,n=this.threshold,r=this.s.length,o=Oi.zeros(r,r);for(let t=0;t<r;t++)Math.abs(this.s[t])<=n?o.set(t,t,0):o.set(t,t,1/this.s[t]);let i=this.U,s=this.rightSingularVectors,u=s.mmul(o),a=s.rows,l=i.rows,c=Oi.zeros(a,l);for(let t=0;t<a;t++)for(let e=0;e<l;e++){let n=0;for(let o=0;o<r;o++)n+=u.get(t,o)*i.get(e,o);c.set(t,e,n)}return c.mmul(e)}solveForDiagonal(t){return this.solve(Oi.diag(t))}inverse(){let t=this.V,e=this.threshold,n=t.rows,r=t.columns,o=new Oi(n,this.s.length);for(let i=0;i<n;i++)for(let n=0;n<r;n++)Math.abs(this.s[n])>e&&o.set(i,n,t.get(i,n)/this.s[n]);let i=this.U,s=i.rows,u=i.columns,a=new Oi(n,s);for(let t=0;t<n;t++)for(let e=0;e<s;e++){let n=0;for(let r=0;r<u;r++)n+=o.get(t,r)*i.get(e,r);a.set(t,e,n)}return a}get condition(){return this.s[0]/this.s[Math.min(this.m,this.n)-1]}get norm2(){return this.s[0]}get rank(){let t=Math.max(this.m,this.n)*this.s[0]*Number.EPSILON,e=0,n=this.s;for(let r=0,o=n.length;r<o;r++)n[r]>t&&e++;return e}get diagonal(){return Array.from(this.s)}get threshold(){return Number.EPSILON/2*Math.max(this.m,this.n)*this.s[0]}get leftSingularVectors(){return this.U}get rightSingularVectors(){return this.V}get diagonalMatrix(){return Oi.diag(this.s)}}function Di(t,e=!1){return t=Ci.checkMatrix(t),e?new Li(t).inverse():Bi(t,Oi.eye(t.rows))}function Bi(t,e,n=!1){return t=Ci.checkMatrix(t),e=Ci.checkMatrix(e),n?new Li(t).solve(e):t.isSquare()?new Ii(t).solve(e):new Vi(t).solve(e)}class Fi{constructor(t){if(!(t=Ci.checkMatrix(t)).isSymmetric())throw new Error("Matrix is not symmetric");let e,n,r,o=t,i=o.rows,s=new Oi(i,i),u=!0;for(n=0;n<i;n++){let t=0;for(r=0;r<n;r++){let i=0;for(e=0;e<r;e++)i+=s.get(r,e)*s.get(n,e);i=(o.get(n,r)-i)/s.get(r,r),s.set(n,r,i),t+=i*i}for(t=o.get(n,n)-t,u&=t>0,s.set(n,n,Math.sqrt(Math.max(t,0))),r=n+1;r<i;r++)s.set(n,r,0)}this.L=s,this.positiveDefinite=Boolean(u)}isPositiveDefinite(){return this.positiveDefinite}solve(t){t=Ci.checkMatrix(t);let e=this.L,n=e.rows;if(t.rows!==n)throw new Error("Matrix dimensions do not match");if(!1===this.isPositiveDefinite())throw new Error("Matrix is not positive definite");let r,o,i,s=t.columns,u=t.clone();for(i=0;i<n;i++)for(o=0;o<s;o++){for(r=0;r<i;r++)u.set(i,o,u.get(i,o)-u.get(r,o)*e.get(i,r));u.set(i,o,u.get(i,o)/e.get(i,i))}for(i=n-1;i>=0;i--)for(o=0;o<s;o++){for(r=i+1;r<n;r++)u.set(i,o,u.get(i,o)-u.get(r,o)*e.get(r,i));u.set(i,o,u.get(i,o)/e.get(i,i))}return u}get lowerTriangularMatrix(){return this.L}}class Xi{constructor(t,e={}){const{assumeSymmetric:n=!1}=e;if(!(t=Ci.checkMatrix(t)).isSquare())throw new Error("Matrix is not a square matrix");if(t.isEmpty())throw new Error("Matrix must be non-empty");let r,o,i=t.columns,s=new Oi(i,i),u=new Float64Array(i),a=new Float64Array(i),l=t,c=!1;if(c=!!n||t.isSymmetric(),c){for(r=0;r<i;r++)for(o=0;o<i;o++)s.set(r,o,l.get(r,o));!function(t,e,n,r){let o,i,s,u,a,l,c,f;for(a=0;a<t;a++)n[a]=r.get(t-1,a);for(u=t-1;u>0;u--){for(f=0,s=0,l=0;l<u;l++)f+=Math.abs(n[l]);if(0===f)for(e[u]=n[u-1],a=0;a<u;a++)n[a]=r.get(u-1,a),r.set(u,a,0),r.set(a,u,0);else{for(l=0;l<u;l++)n[l]/=f,s+=n[l]*n[l];for(o=n[u-1],i=Math.sqrt(s),o>0&&(i=-i),e[u]=f*i,s-=o*i,n[u-1]=o-i,a=0;a<u;a++)e[a]=0;for(a=0;a<u;a++){for(o=n[a],r.set(a,u,o),i=e[a]+r.get(a,a)*o,l=a+1;l<=u-1;l++)i+=r.get(l,a)*n[l],e[l]+=r.get(l,a)*o;e[a]=i}for(o=0,a=0;a<u;a++)e[a]/=s,o+=e[a]*n[a];for(c=o/(s+s),a=0;a<u;a++)e[a]-=c*n[a];for(a=0;a<u;a++){for(o=n[a],i=e[a],l=a;l<=u-1;l++)r.set(l,a,r.get(l,a)-(o*e[l]+i*n[l]));n[a]=r.get(u-1,a),r.set(u,a,0)}}n[u]=s}for(u=0;u<t-1;u++){if(r.set(t-1,u,r.get(u,u)),r.set(u,u,1),s=n[u+1],0!==s){for(l=0;l<=u;l++)n[l]=r.get(l,u+1)/s;for(a=0;a<=u;a++){for(i=0,l=0;l<=u;l++)i+=r.get(l,u+1)*r.get(l,a);for(l=0;l<=u;l++)r.set(l,a,r.get(l,a)-i*n[l])}}for(l=0;l<=u;l++)r.set(l,u+1,0)}for(a=0;a<t;a++)n[a]=r.get(t-1,a),r.set(t-1,a,0);r.set(t-1,t-1,1),e[0]=0}(i,a,u,s),function(t,e,n,r){let o,i,s,u,a,l,c,f,h,p,g,m,d,y,w,v,b;for(s=1;s<t;s++)e[s-1]=e[s];e[t-1]=0;let x=0,M=0,_=Number.EPSILON;for(l=0;l<t;l++){for(M=Math.max(M,Math.abs(n[l])+Math.abs(e[l])),c=l;c<t&&!(Math.abs(e[c])<=_*M);)c++;if(c>l){b=0;do{for(b+=1,o=n[l],f=(n[l+1]-o)/(2*e[l]),h=zi(f,1),f<0&&(h=-h),n[l]=e[l]/(f+h),n[l+1]=e[l]*(f+h),p=n[l+1],i=o-n[l],s=l+2;s<t;s++)n[s]-=i;for(x+=i,f=n[c],g=1,m=g,d=g,y=e[l+1],w=0,v=0,s=c-1;s>=l;s--)for(d=m,m=g,v=w,o=g*e[s],i=g*f,h=zi(f,e[s]),e[s+1]=w*h,w=e[s]/h,g=f/h,f=g*n[s]-w*o,n[s+1]=i+w*(g*o+w*n[s]),a=0;a<t;a++)i=r.get(a,s+1),r.set(a,s+1,w*r.get(a,s)+g*i),r.set(a,s,g*r.get(a,s)-w*i);f=-w*v*d*y*e[l]/p,e[l]=w*f,n[l]=g*f}while(Math.abs(e[l])>_*M)}n[l]=n[l]+x,e[l]=0}for(s=0;s<t-1;s++){for(a=s,f=n[s],u=s+1;u<t;u++)n[u]<f&&(a=u,f=n[u]);if(a!==s)for(n[a]=n[s],n[s]=f,u=0;u<t;u++)f=r.get(u,s),r.set(u,s,r.get(u,a)),r.set(u,a,f)}}(i,a,u,s)}else{let t=new Oi(i,i),e=new Float64Array(i);for(o=0;o<i;o++)for(r=0;r<i;r++)t.set(r,o,l.get(r,o));!function(t,e,n,r){let o,i,s,u,a,l,c,f=t-1;for(l=1;l<=f-1;l++){for(c=0,u=l;u<=f;u++)c+=Math.abs(e.get(u,l-1));if(0!==c){for(s=0,u=f;u>=l;u--)n[u]=e.get(u,l-1)/c,s+=n[u]*n[u];for(i=Math.sqrt(s),n[l]>0&&(i=-i),s-=n[l]*i,n[l]=n[l]-i,a=l;a<t;a++){for(o=0,u=f;u>=l;u--)o+=n[u]*e.get(u,a);for(o/=s,u=l;u<=f;u++)e.set(u,a,e.get(u,a)-o*n[u])}for(u=0;u<=f;u++){for(o=0,a=f;a>=l;a--)o+=n[a]*e.get(u,a);for(o/=s,a=l;a<=f;a++)e.set(u,a,e.get(u,a)-o*n[a])}n[l]=c*n[l],e.set(l,l-1,c*i)}}for(u=0;u<t;u++)for(a=0;a<t;a++)r.set(u,a,u===a?1:0);for(l=f-1;l>=1;l--)if(0!==e.get(l,l-1)){for(u=l+1;u<=f;u++)n[u]=e.get(u,l-1);for(a=l;a<=f;a++){for(i=0,u=l;u<=f;u++)i+=n[u]*r.get(u,a);for(i=i/n[l]/e.get(l,l-1),u=l;u<=f;u++)r.set(u,a,r.get(u,a)+i*n[u])}}}(i,t,e,s),function(t,e,n,r,o){let i,s,u,a,l,c,f,h,p,g,m,d,y,w,v,b=t-1,x=t-1,M=Number.EPSILON,_=0,S=0,E=0,k=0,A=0,$=0,j=0,R=0;for(i=0;i<t;i++)for((i<0||i>x)&&(n[i]=o.get(i,i),e[i]=0),s=Math.max(i-1,0);s<t;s++)S+=Math.abs(o.get(i,s));for(;b>=0;){for(a=b;a>0&&($=Math.abs(o.get(a-1,a-1))+Math.abs(o.get(a,a)),0===$&&($=S),!(Math.abs(o.get(a,a-1))<M*$));)a--;if(a===b)o.set(b,b,o.get(b,b)+_),n[b]=o.get(b,b),e[b]=0,b--,R=0;else if(a===b-1){if(f=o.get(b,b-1)*o.get(b-1,b),E=(o.get(b-1,b-1)-o.get(b,b))/2,k=E*E+f,j=Math.sqrt(Math.abs(k)),o.set(b,b,o.get(b,b)+_),o.set(b-1,b-1,o.get(b-1,b-1)+_),h=o.get(b,b),k>=0){for(j=E>=0?E+j:E-j,n[b-1]=h+j,n[b]=n[b-1],0!==j&&(n[b]=h-f/j),e[b-1]=0,e[b]=0,h=o.get(b,b-1),$=Math.abs(h)+Math.abs(j),E=h/$,k=j/$,A=Math.sqrt(E*E+k*k),E/=A,k/=A,s=b-1;s<t;s++)j=o.get(b-1,s),o.set(b-1,s,k*j+E*o.get(b,s)),o.set(b,s,k*o.get(b,s)-E*j);for(i=0;i<=b;i++)j=o.get(i,b-1),o.set(i,b-1,k*j+E*o.get(i,b)),o.set(i,b,k*o.get(i,b)-E*j);for(i=0;i<=x;i++)j=r.get(i,b-1),r.set(i,b-1,k*j+E*r.get(i,b)),r.set(i,b,k*r.get(i,b)-E*j)}else n[b-1]=h+E,n[b]=h+E,e[b-1]=j,e[b]=-j;b-=2,R=0}else{if(h=o.get(b,b),p=0,f=0,a<b&&(p=o.get(b-1,b-1),f=o.get(b,b-1)*o.get(b-1,b)),10===R){for(_+=h,i=0;i<=b;i++)o.set(i,i,o.get(i,i)-h);$=Math.abs(o.get(b,b-1))+Math.abs(o.get(b-1,b-2)),h=p=.75*$,f=-.4375*$*$}if(30===R&&($=(p-h)/2,$=$*$+f,$>0)){for($=Math.sqrt($),p<h&&($=-$),$=h-f/((p-h)/2+$),i=0;i<=b;i++)o.set(i,i,o.get(i,i)-$);_+=$,h=p=f=.964}for(R+=1,l=b-2;l>=a&&(j=o.get(l,l),A=h-j,$=p-j,E=(A*$-f)/o.get(l+1,l)+o.get(l,l+1),k=o.get(l+1,l+1)-j-A-$,A=o.get(l+2,l+1),$=Math.abs(E)+Math.abs(k)+Math.abs(A),E/=$,k/=$,A/=$,l!==a)&&!(Math.abs(o.get(l,l-1))*(Math.abs(k)+Math.abs(A))<M*(Math.abs(E)*(Math.abs(o.get(l-1,l-1))+Math.abs(j)+Math.abs(o.get(l+1,l+1)))));)l--;for(i=l+2;i<=b;i++)o.set(i,i-2,0),i>l+2&&o.set(i,i-3,0);for(u=l;u<=b-1&&(w=u!==b-1,u!==l&&(E=o.get(u,u-1),k=o.get(u+1,u-1),A=w?o.get(u+2,u-1):0,h=Math.abs(E)+Math.abs(k)+Math.abs(A),0!==h&&(E/=h,k/=h,A/=h)),0!==h);u++)if($=Math.sqrt(E*E+k*k+A*A),E<0&&($=-$),0!==$){for(u!==l?o.set(u,u-1,-$*h):a!==l&&o.set(u,u-1,-o.get(u,u-1)),E+=$,h=E/$,p=k/$,j=A/$,k/=E,A/=E,s=u;s<t;s++)E=o.get(u,s)+k*o.get(u+1,s),w&&(E+=A*o.get(u+2,s),o.set(u+2,s,o.get(u+2,s)-E*j)),o.set(u,s,o.get(u,s)-E*h),o.set(u+1,s,o.get(u+1,s)-E*p);for(i=0;i<=Math.min(b,u+3);i++)E=h*o.get(i,u)+p*o.get(i,u+1),w&&(E+=j*o.get(i,u+2),o.set(i,u+2,o.get(i,u+2)-E*A)),o.set(i,u,o.get(i,u)-E),o.set(i,u+1,o.get(i,u+1)-E*k);for(i=0;i<=x;i++)E=h*r.get(i,u)+p*r.get(i,u+1),w&&(E+=j*r.get(i,u+2),r.set(i,u+2,r.get(i,u+2)-E*A)),r.set(i,u,r.get(i,u)-E),r.set(i,u+1,r.get(i,u+1)-E*k)}}}if(0===S)return;for(b=t-1;b>=0;b--)if(E=n[b],k=e[b],0===k)for(a=b,o.set(b,b,1),i=b-1;i>=0;i--){for(f=o.get(i,i)-E,A=0,s=a;s<=b;s++)A+=o.get(i,s)*o.get(s,b);if(e[i]<0)j=f,$=A;else if(a=i,0===e[i]?o.set(i,b,0!==f?-A/f:-A/(M*S)):(h=o.get(i,i+1),p=o.get(i+1,i),k=(n[i]-E)*(n[i]-E)+e[i]*e[i],c=(h*$-j*A)/k,o.set(i,b,c),o.set(i+1,b,Math.abs(h)>Math.abs(j)?(-A-f*c)/h:(-$-p*c)/j)),c=Math.abs(o.get(i,b)),M*c*c>1)for(s=i;s<=b;s++)o.set(s,b,o.get(s,b)/c)}else if(k<0)for(a=b-1,Math.abs(o.get(b,b-1))>Math.abs(o.get(b-1,b))?(o.set(b-1,b-1,k/o.get(b,b-1)),o.set(b-1,b,-(o.get(b,b)-E)/o.get(b,b-1))):(v=Ui(0,-o.get(b-1,b),o.get(b-1,b-1)-E,k),o.set(b-1,b-1,v[0]),o.set(b-1,b,v[1])),o.set(b,b-1,0),o.set(b,b,1),i=b-2;i>=0;i--){for(g=0,m=0,s=a;s<=b;s++)g+=o.get(i,s)*o.get(s,b-1),m+=o.get(i,s)*o.get(s,b);if(f=o.get(i,i)-E,e[i]<0)j=f,A=g,$=m;else if(a=i,0===e[i]?(v=Ui(-g,-m,f,k),o.set(i,b-1,v[0]),o.set(i,b,v[1])):(h=o.get(i,i+1),p=o.get(i+1,i),d=(n[i]-E)*(n[i]-E)+e[i]*e[i]-k*k,y=2*(n[i]-E)*k,0===d&&0===y&&(d=M*S*(Math.abs(f)+Math.abs(k)+Math.abs(h)+Math.abs(p)+Math.abs(j))),v=Ui(h*A-j*g+k*m,h*$-j*m-k*g,d,y),o.set(i,b-1,v[0]),o.set(i,b,v[1]),Math.abs(h)>Math.abs(j)+Math.abs(k)?(o.set(i+1,b-1,(-g-f*o.get(i,b-1)+k*o.get(i,b))/h),o.set(i+1,b,(-m-f*o.get(i,b)-k*o.get(i,b-1))/h)):(v=Ui(-A-p*o.get(i,b-1),-$-p*o.get(i,b),j,k),o.set(i+1,b-1,v[0]),o.set(i+1,b,v[1]))),c=Math.max(Math.abs(o.get(i,b-1)),Math.abs(o.get(i,b))),M*c*c>1)for(s=i;s<=b;s++)o.set(s,b-1,o.get(s,b-1)/c),o.set(s,b,o.get(s,b)/c)}for(i=0;i<t;i++)if(i<0||i>x)for(s=i;s<t;s++)r.set(i,s,o.get(i,s));for(s=t-1;s>=0;s--)for(i=0;i<=x;i++){for(j=0,u=0;u<=Math.min(s,x);u++)j+=r.get(i,u)*o.get(u,s);r.set(i,s,j)}}(i,a,u,s,t)}this.n=i,this.e=a,this.d=u,this.V=s}get realEigenvalues(){return Array.from(this.d)}get imaginaryEigenvalues(){return Array.from(this.e)}get eigenvectorMatrix(){return this.V}get diagonalMatrix(){let t,e,n=this.n,r=this.e,o=this.d,i=new Oi(n,n);for(t=0;t<n;t++){for(e=0;e<n;e++)i.set(t,e,0);i.set(t,t,o[t]),r[t]>0?i.set(t,t+1,r[t]):r[t]<0&&i.set(t,t-1,r[t])}return i}}function Ui(t,e,n,r){let o,i;return Math.abs(n)>Math.abs(r)?(o=r/n,i=n+o*r,[(t+o*e)/i,(e-o*t)/i]):(o=n/r,i=r+o*n,[(o*t+e)/i,(o*e-t)/i])}class Yi{_seed(t,e){if(t===(t||0))return t;{const e=""+t;let n=0;for(let t=0;t<e.length;++t)n^=0|e.charCodeAt(t);return n}}}var Hi=n(52),Qi=n.n(Hi);class Gi extends Yi{constructor(t,e){super(),this.seed(t,e)}get name(){return"function"}next(){return this._rng()}seed(t,e){this._rng=t}clone(t,e){return new Gi(this._rng,e)}}var Ki=(...t)=>{const[e="default",...n]=t;switch(typeof e){case"object":if(e instanceof Yi)return e;break;case"function":return new Gi(e);case"number":case"string":return new Gi(Qi()(...n))}throw new Error(`invalid RNG "${e}"`)},Zi=(t,e=0,n=1)=>()=>t.next()*(n-e)+e;function Wi(t){return new Ji(t)}class Ji{constructor(t){this.isInt=()=>{if(Number.isInteger(this.n))return this;throw new Error("Expected number to be an integer, got "+this.n)},this.isPositive=()=>{if(this.n>0)return this;throw new Error("Expected number to be positive, got "+this.n)},this.lessThan=t=>{if(this.n<t)return this;throw new Error(`Expected number to be less than ${t}, got ${this.n}`)},this.greaterThanOrEqual=t=>{if(this.n>=t)return this;throw new Error(`Expected number to be greater than or equal to ${t}, got ${this.n}`)},this.greaterThan=t=>{if(this.n>t)return this;throw new Error(`Expected number to be greater than ${t}, got ${this.n}`)},this.n=t}}var ts=(t,e=0,n=1)=>(void 0===n&&(n=void 0===e?1:e,e=0),Wi(e).isInt(),Wi(n).isInt(),()=>Math.floor(t.next()*(n-e+1)+e)),es=t=>()=>t.next()>=.5;const ns=[0,0,.6931471805599453,1.791759469228055,3.1780538303479458,4.787491742782046,6.579251212010101,8.525161361065415,10.60460290274525,12.801827480081469],rs=t=>ns[t];class os extends Yi{get name(){return"default"}next(){return Math.random()}seed(t,e){}clone(){return new os}}class is{constructor(t){this._cache={},this.next=()=>this._rng.next(),this.float=(t,e)=>this.uniform(t,e)(),this.int=(t,e)=>this.uniformInt(t,e)(),this.integer=(t,e)=>this.uniformInt(t,e)(),this.bool=()=>this.uniformBoolean()(),this.boolean=()=>this.uniformBoolean()(),this.uniform=(t,e)=>this._memoize("uniform",Zi,t,e),this.uniformInt=(t,e)=>this._memoize("uniformInt",ts,t,e),this.uniformBoolean=()=>this._memoize("uniformBoolean",es),this.normal=(t,e)=>((t,e=0,n=1)=>()=>{let r,o,i;do{r=2*t.next()-1,o=2*t.next()-1,i=r*r+o*o}while(!i||i>1);return e+n*o*Math.sqrt(-2*Math.log(i)/i)})(this,t,e),this.logNormal=(t,e)=>((t,e=0,n=1)=>{const r=t.normal(e,n);return()=>Math.exp(r())})(this,t,e),this.bernoulli=t=>((t,e=.5)=>(Wi(e).greaterThanOrEqual(0).lessThan(1),()=>Math.floor(t.next()+e)))(this,t),this.binomial=(t,e)=>((t,e=1,n=.5)=>(Wi(e).isInt().isPositive(),Wi(n).greaterThanOrEqual(0).lessThan(1),()=>{let r=0,o=0;for(;r++<e;)t.next()<n&&o++;return o}))(this,t,e),this.geometric=t=>((t,e=.5)=>{Wi(e).greaterThan(0).lessThan(1);const n=1/Math.log(1-e);return()=>Math.floor(1+Math.log(t.next())*n)})(this,t),this.poisson=t=>((t,e=1)=>{if(Wi(e).isPositive(),e<10){const n=Math.exp(-e);return()=>{let r=n,o=0,i=t.next();for(;i>r;)i-=r,r=e*r/++o;return o}}{const n=Math.sqrt(e),r=.931+2.53*n,o=.02483*r-.059,i=1.1239+1.1328/(r-3.4),s=.9277-3.6224/(r-2);return()=>{for(var u;;){let a,l=t.next();if(l<=.86*s)return a=l/s-.43,Math.floor((2*o/(.5-Math.abs(a))+r)*a+e+.445);l>=s?a=t.next()-.5:(a=l/s-.93,a=(a<0?-.5:.5)-a,l=t.next()*s);const c=.5-Math.abs(a);if(c<.013&&l>c)continue;const f=Math.floor((2*o/c+r)*a+e+.445);if(l=l*i/(o/(c*c)+r),f>=10){const t=(f+.5)*Math.log(e/f)-e-.9189385332046727+f-(1/12-(1/360-1/(1260*f*f))/(f*f))/f;if(Math.log(l*n)<=t)return f}else if(f>=0){const t=null!==(u=rs(f))&&void 0!==u?u:0;if(Math.log(l)<=f*Math.log(e)-e-t)return f}}}}})(this,t),this.exponential=t=>((t,e=1)=>(Wi(e).isPositive(),()=>-Math.log(1-t.next())/e))(this,t),this.irwinHall=t=>((t,e=1)=>(Wi(e).isInt().greaterThanOrEqual(0),()=>{let n=0;for(let r=0;r<e;++r)n+=t.next();return n}))(this,t),this.bates=t=>((t,e=1)=>{Wi(e).isInt().isPositive();const n=t.irwinHall(e);return()=>n()/e})(this,t),this.pareto=t=>((t,e=1)=>{Wi(e).greaterThanOrEqual(0);const n=1/e;return()=>1/Math.pow(1-t.next(),n)})(this,t),t&&t instanceof Yi?this.use(t):this.use(new os),this._cache={}}get rng(){return this._rng}clone(...t){return t.length?new is(Ki(...t)):new is(this.rng.clone())}use(...t){this._rng=Ki(...t)}patch(){if(this._patch)throw new Error("Math.random already patched");this._patch=Math.random,Math.random=this.uniform()}unpatch(){this._patch&&(Math.random=this._patch,delete this._patch)}_memoize(t,e,...n){const r=""+n.join(";");let o=this._cache[t];return void 0!==o&&o.key===r||(o={key:r,distribution:e(this,...n)},this._cache[t]=o),o.distribution}}var ss=new is;function us(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function as(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ls(t,e,n){return e&&as(t.prototype,e),n&&as(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}var cs=function(){function t(e,n){us(this,t),this.mean=e,this.variance=n,this.normal=ss.normal()}return ls(t,[{key:"at",value:function(t){return Math.exp(-.5*Math.pow(t-this.mean,2)/this.variance)*(1/Math.sqrt(2*this.variance*Math.PI))}},{key:"sample",value:function(){return this.std()*this.normal()+this.mean}},{key:"std",value:function(){return Math.sqrt(this.variance)}}]),t}(),fs=function(){function t(e,n){us(this,t),e instanceof Oi&&n instanceof Oi?(this.mean=e,this.cov=n):(this.mean=new Oi([e]).transpose(),this.cov=new Oi(n)),this.dim=this.mean.rows}return ls(t,[{key:"at",value:function(t){var e=new Oi([t]).transpose().sub(this.mean);return e.transpose().mmul(Di(this.cov)).mmul(e).mul(-.5).exp()*(1/Math.sqrt(Math.pow(2*Math.PI,this.mean.rows)*this.cov.det()))}},{key:"marginalize",value:function(e){var n=hs(this.mean,0,0,e,1),r=hs(this.mean,e,0,this.mean.rows,1),o=hs(this.cov,0,0,e,e),i=hs(this.cov,e,e,this.mean.rows,this.mean.rows);return[new t(n,o),new t(r,i)]}},{key:"condition",value:function(e){var n=e.length,r=new Oi([e]).transpose(),o=hs(this.cov,0,0,n,n),i=hs(this.cov,0,n,n,this.mean.rows),s=i.transpose(),u=hs(this.cov,n,n,this.mean.rows,this.mean.rows),a=new Fi(o).lowerTriangularMatrix,l=Bi(a,r);return new t(Bi(a,i).transpose().mmul(l),u.sub(s.mmul(Di(o)).mmul(i)))}},{key:"transformationMatrix",value:function(){for(var t=new Xi(this.cov),e=t.eigenvectorMatrix,n=Oi.zeros(e.rows,e.columns),r=0;r<n.rows;++r)n.set(r,r,Math.sqrt(t.realEigenvalues[r]));return e.mmul(n)}},{key:"sample",value:function(){for(var t=Oi.zeros(this.mean.rows,1),e=ss.normal(),n=0;n<this.mean.rows;++n)t.set(n,0,e());return Oi.add(this.mean,this.transformationMatrix().mmul(t))}},{key:"getMean",value:function(){return this.mean.getColumn(0)}},{key:"getSd",value:function(){return this.cov.diag().map((function(t){return Math.sqrt(t)}))}}]),t}();function hs(t,e,n,r,o){for(var i=new Oi(r-e,o-n),s=e;s<r;++s)for(var u=n;u<o;++u)i.set(s-e,u-n,t.get(s,u));return i}function ps(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null==n)return;var r,o,i=[],s=!0,u=!1;try{for(n=n.call(t);!(s=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);s=!0);}catch(t){u=!0,o=t}finally{try{s||null==n.return||n.return()}finally{if(u)throw o}}return i}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return gs(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return gs(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function gs(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function ms(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var ds=function(){function t(e,n,r,o){var i=ps(r,2),s=i[0],u=i[1],a=ps(o,2),l=a[0],c=a[1];!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.width=e,this.height=n,this.xmin=s,this.xmax=u,this.xToViewport=Xo().domain([s,u]).range([0,e]),this.yToViewport=Xo().domain([l,c]).range([n,0])}var e,n,r;return e=t,(n=[{key:"x",value:function(t){return this.xToViewport.invert(t)}},{key:"y",value:function(t){return this.yToViewport.invert(t)}},{key:"u",value:function(t){return this.xToViewport(t)}},{key:"v",value:function(t){return this.yToViewport(t)}},{key:"xDomain",value:function(){return this.xToViewport.domain()}},{key:"yDomain",value:function(){return this.yToViewport.domain()}}])&&ms(e.prototype,n),r&&ms(e,r),Object.defineProperty(e,"prototype",{writable:!1}),t}(),ys=function(t){return Ko(.05+.3*t)};function ws(t){return Math.round(100*t)/100}function vs(t,e){return Math.round(t*Math.pow(10,e))/Math.pow(10,e)}function bs(t){return(bs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function xs(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ms(t,e){return(Ms=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function _s(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=ks(t);if(e){var o=ks(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Ss(this,n)}}function Ss(t,e){if(e&&("object"===bs(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Es(t)}function Es(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ks(t){return(ks=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function As(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null==n)return;var r,o,i=[],s=!0,u=!1;try{for(n=n.call(t);!(s=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);s=!0);}catch(t){u=!0,o=t}finally{try{s||null==n.return||n.return()}finally{if(u)throw o}}return i}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return $s(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return $s(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function $s(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function js(t){h(t,"svelte-sk9lqs",".zero.svelte-sk9lqs{stroke:rgba(0,0,0,0.5);stroke-width:1px}.sd.svelte-sk9lqs{stroke:rgba(0,0,0,0.2);stroke-width:1px}input.svelte-sk9lqs{font-size:12px}")}function Rs(t){var e,n,o,i,a,l,c,h,p,g,y,S,A,$,j,R,N,T,O,q,P,C,I,z,V,L,D,B,F,X,U,Y,H,Q,G,K,Z,W,J,tt,et,nt,rt,ot,it,st,ut,at,lt,ct,ft,ht,pt,gt,mt,dt,yt,wt,vt,bt,xt,Mt,_t,St,Et,kt,At,$t,jt,Rt,Nt,Tt=ws(t[0].std())+"";return{c:function(){e=v("svg"),n=v("g"),o=v("text"),i=b("y = 0"),l=v("line"),g=v("text"),y=b("x = 0"),$=v("line"),T=v("text"),O=b("σ = "),q=b(Tt),C=v("line"),L=v("line"),X=v("text"),U=b("The "),Y=v("tspan"),H=b("probability density function"),Q=x(),G=v("tspan"),K=b("(line)"),Z=x(),W=v("tspan"),J=b("of a Gaussian distribution with standard"),tt=x(),et=v("tspan"),nt=b("deviation σ shows how samples from it"),rt=x(),ot=v("tspan"),it=b("will be distributed"),st=x(),ut=v("text"),at=b("The histogram "),lt=v("tspan"),ct=b("(shaded)"),ft=b(" shows the\n    "),ht=v("tspan"),pt=b("actual distribution of "),gt=b(Ns),mt=b(" samples"),wt=x(),vt=w("div"),bt=w("p"),xt=w("input"),Mt=b(" = "),_t=w("input"),kt=x(),At=w("input"),_(o,"x","16"),_(o,"y",a=Ts(t[3],0)+15),_(o,"class","annotation"),_(l,"class","zero svelte-sk9lqs"),_(l,"x1","0"),_(l,"y1",c=Ts(t[3],0)),_(l,"x2",h=t[3].width),_(l,"y2",p=Ts(t[3],0)),_(g,"x",S=Os(t[3],0)+15),_(g,"y",A=t[3].height-15),_(g,"class","annotation"),_($,"class","zero svelte-sk9lqs"),_($,"x1",j=Os(t[3],0)),_($,"y1","0"),_($,"x2",R=Os(t[3],0)),_($,"y2",N=t[3].height),_(T,"x",P=Os(t[3],t[0].std())+15),_(T,"y","15"),_(T,"class","annotation"),_(C,"class","sd svelte-sk9lqs"),_(C,"x1",I=Os(t[3],t[0].std())),_(C,"y1","0"),_(C,"x2",z=Os(t[3],t[0].std())),_(C,"y2",V=t[3].height),_(L,"class","sd svelte-sk9lqs"),_(L,"x1",D=Os(t[3],-t[0].std())),_(L,"y1","0"),_(L,"x2",B=Os(t[3],-t[0].std())),_(L,"y2",F=t[3].height),_(Y,"font-weight","bold"),_(G,"fill","#c51b8a"),_(W,"x","16"),_(W,"dy","1.5em"),_(et,"x","16"),_(et,"dy","1.5em"),_(ot,"x","16"),_(ot,"dy","1.5em"),_(X,"x","16"),_(X,"y","10"),_(X,"class","annotation"),_(lt,"fill","#fa9fb5"),_(ht,"x","470"),_(ht,"dy","1.5em"),_(ut,"x","470"),_(ut,"y","200"),_(ut,"class","annotation"),_(e,"width",dt=t[3].width),_(e,"height",yt=t[3].height),xt.disabled=!0,_(xt,"class","labelSlider svelte-sk9lqs"),_t.disabled=!0,_(_t,"class","entry svelte-sk9lqs"),_(_t,"min",St=t[2].min),_(_t,"max",Et=t[2].max),_(bt,"class","label"),_(At,"type","range"),_(At,"min",$t=t[2].min),_(At,"max",jt=t[2].max),_(At,"step","0.01"),_(At,"class","svelte-sk9lqs"),_(vt,"class","grid-item svelte-sk9lqs")},m:function(r,s){m(r,e,s),f(e,n),f(n,o),f(o,i),f(n,l),f(n,g),f(g,y),f(n,$),f(n,T),f(T,O),f(T,q),f(n,C),f(n,L),t[9](n),f(e,X),f(X,U),f(X,Y),f(Y,H),f(X,Q),f(X,G),f(G,K),f(X,Z),f(X,W),f(W,J),f(X,tt),f(X,et),f(et,nt),f(X,rt),f(X,ot),f(ot,it),f(X,st),f(e,ut),f(ut,at),f(ut,lt),f(lt,ct),f(ut,ft),f(ut,ht),f(ht,pt),f(ht,gt),f(ht,mt),m(r,wt,s),m(r,vt,s),f(vt,bt),f(bt,xt),k(xt,t[2].name),f(bt,Mt),f(bt,_t),k(_t,t[2].value),f(vt,kt),f(vt,At),k(At,t[2].value),Rt||(Nt=[M(xt,"input",t[10]),M(_t,"input",t[11]),M(At,"change",t[12]),M(At,"input",t[12]),M(At,"input",(function(){u(t[4](t[2]))&&t[4](t[2]).apply(this,arguments)}))],Rt=!0)},p:function(n,r){var i=As(r,1)[0];t=n,8&i&&a!==(a=Ts(t[3],0)+15)&&_(o,"y",a),8&i&&c!==(c=Ts(t[3],0))&&_(l,"y1",c),8&i&&h!==(h=t[3].width)&&_(l,"x2",h),8&i&&p!==(p=Ts(t[3],0))&&_(l,"y2",p),8&i&&S!==(S=Os(t[3],0)+15)&&_(g,"x",S),8&i&&A!==(A=t[3].height-15)&&_(g,"y",A),8&i&&j!==(j=Os(t[3],0))&&_($,"x1",j),8&i&&R!==(R=Os(t[3],0))&&_($,"x2",R),8&i&&N!==(N=t[3].height)&&_($,"y2",N),1&i&&Tt!==(Tt=ws(t[0].std())+"")&&E(q,Tt),9&i&&P!==(P=Os(t[3],t[0].std())+15)&&_(T,"x",P),9&i&&I!==(I=Os(t[3],t[0].std()))&&_(C,"x1",I),9&i&&z!==(z=Os(t[3],t[0].std()))&&_(C,"x2",z),8&i&&V!==(V=t[3].height)&&_(C,"y2",V),9&i&&D!==(D=Os(t[3],-t[0].std()))&&_(L,"x1",D),9&i&&B!==(B=Os(t[3],-t[0].std()))&&_(L,"x2",B),8&i&&F!==(F=t[3].height)&&_(L,"y2",F),8&i&&dt!==(dt=t[3].width)&&_(e,"width",dt),8&i&&yt!==(yt=t[3].height)&&_(e,"height",yt),4&i&&xt.value!==t[2].name&&k(xt,t[2].name),4&i&&St!==(St=t[2].min)&&_(_t,"min",St),4&i&&Et!==(Et=t[2].max)&&_(_t,"max",Et),4&i&&_t.value!==t[2].value&&k(_t,t[2].value),4&i&&$t!==($t=t[2].min)&&_(At,"min",$t),4&i&&jt!==(jt=t[2].max)&&_(At,"max",jt),4&i&&k(At,t[2].value)},i:r,o:r,d:function(n){n&&d(e),t[9](null),n&&d(wt),n&&d(vt),Rt=!1,s(Nt)}}}var Ns=1e4;function Ts(t,e){return t.v(e)}function Os(t,e){return t.u(e)}function qs(t,e,n){var r=e.graph,o=e.variance,i=void 0===o?{name:"Variance",value:1,min:.1,max:2}:o,s=e.context,u=void 0===s?new ds(700,400,[-3,3],[-.1,1]):s,a=e.gaussian,l=void 0===a?new cs(0,i.value):a,c=e.mean,f=e.sdArea,h=e.curve,p=As(u.xDomain(),2),g=p[0],m=p[1],d=(m-g)/100;function y(){vt(g,m+d,d);for(var t=wt().domain([g,m]).thresholds(99),e=[],n=0;n<Ns;n++)e.push(l.sample());return t(e)}var w=e.bins,v=void 0===w?y():w;return T((function(){var t=Xe(r);t.selectAll(".bar").data(v).enter().append("g").attr("class","bar").append("rect").attr("x",(function(t){return u.u(t.x0)})).attr("y",(function(t){return u.v(t.length/(Ns*d))})).attr("width",(function(t){return u.u(t.x1)-u.u(t.x0)})).attr("height",(function(t){return u.v(0)-u.v(t.length/(Ns*d))})).attr("stroke","#fa9fb5").attr("fill","rgba(253,224,221,0.6"),t.append("path").data([h]).attr("class","curve").attr("fill","none").attr("stroke","#c51b8a").attr("stroke-width","2px").attr("d",c)})),O((function(){var t=Xe(r);t.transition().select(".curve").duration(750).attr("d",c(h)),t.selectAll("rect").data(v).transition().duration(750).attr("y",(function(t){return u.v(t.length/(Ns*d))})).attr("height",(function(t){return u.v(0)-u.v(t.length/(Ns*d))}))})),t.$$set=function(t){"graph"in t&&n(1,r=t.graph),"variance"in t&&n(2,i=t.variance),"context"in t&&n(3,u=t.context),"gaussian"in t&&n(0,l=t.gaussian),"mean"in t&&n(5,c=t.mean),"sdArea"in t&&n(6,f=t.sdArea),"curve"in t&&n(7,h=t.curve),"bins"in t&&n(8,v=t.bins)},t.$$.update=function(){if(8&t.$$.dirty&&n(5,c=li().x((function(t){return u.u(t[0])})).y((function(t){return u.v(t[1])}))),8&t.$$.dirty&&n(6,f=function(t,e,n){var r=null,o=oi(!0),i=null,s=si,u=null;function a(a){var l,c,f,h,p,g=(a=ri(a)).length,m=!1,d=new Array(g),y=new Array(g);for(null==i&&(u=s(p=ni())),l=0;l<=g;++l){if(!(l<g&&o(h=a[l],l,a))===m)if(m=!m)c=l,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),f=l-1;f>=c;--f)u.point(d[f],y[f]);u.lineEnd(),u.areaEnd()}m&&(d[l]=+t(h,l,a),y[l]=+e(h,l,a),u.point(r?+r(h,l,a):d[l],n?+n(h,l,a):y[l]))}if(p)return u=null,p+""||null}function l(){return li().defined(o).curve(s).context(i)}return t="function"==typeof t?t:void 0===t?ui:oi(+t),e="function"==typeof e?e:oi(void 0===e?0:+e),n="function"==typeof n?n:void 0===n?ai:oi(+n),a.x=function(e){return arguments.length?(t="function"==typeof e?e:oi(+e),r=null,a):t},a.x0=function(e){return arguments.length?(t="function"==typeof e?e:oi(+e),a):t},a.x1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:oi(+t),a):r},a.y=function(t){return arguments.length?(e="function"==typeof t?t:oi(+t),n=null,a):e},a.y0=function(t){return arguments.length?(e="function"==typeof t?t:oi(+t),a):e},a.y1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:oi(+t),a):n},a.lineX0=a.lineY0=function(){return l().x(t).y(e)},a.lineY1=function(){return l().x(t).y(n)},a.lineX1=function(){return l().x(r).y(e)},a.defined=function(t){return arguments.length?(o="function"==typeof t?t:oi(!!t),a):o},a.curve=function(t){return arguments.length?(s=t,null!=i&&(u=s(i)),a):s},a.context=function(t){return arguments.length?(null==t?i=u=null:u=s(i=t),a):i},a}().x((function(t){return u.u(t[0])})).y0((function(t){return u.v(t[1]-2*t[2])})).y1((function(t){return u.v(t[1]+2*t[2])}))),9&t.$$.dirty){var e=As(u.xDomain(),2),r=e[0],o=e[1],i=(o-r)/75,s=vt(r,o+i,i),a=s.map((function(t){return l.at([t])}));n(7,h=function(){return bt(arguments)}(s,a))}},[l,r,i,u,function(t){n(0,l.variance=t.value,l),n(8,v=y())},c,f,h,v,function(t){P[t?"unshift":"push"]((function(){n(1,r=t)}))},function(){i.name=this.value,n(2,i)},function(){i.value=this.value,n(2,i)},function(){i.value=S(this.value),n(2,i)}]}var Ps=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ms(t,e)}(i,t);var e,n,r,o=_s(i);function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),tt(Es(e=o.call(this)),t,qs,Rs,a,{graph:1,variance:2,context:3,gaussian:0,mean:5,sdArea:6,curve:7,bins:8},js),e}return e=i,n&&xs(e.prototype,n),r&&xs(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}(et);function Cs(t,e,n){return Math.min(Math.max(t,e),n)}function Is(t){return(Is="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function zs(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Vs(t,e){return(Vs=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Ls(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Fs(t);if(e){var o=Fs(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Ds(this,n)}}function Ds(t,e){if(e&&("object"===Is(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Bs(t)}function Bs(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Fs(t){return(Fs=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Xs(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null==n)return;var r,o,i=[],s=!0,u=!1;try{for(n=n.call(t);!(s=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);s=!0);}catch(t){u=!0,o=t}finally{try{s||null==n.return||n.return()}finally{if(u)throw o}}return i}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return Us(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Us(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Us(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Ys(t,e,n){var r=t.slice();return r[6]=e[n],r[8]=n,r}function Hs(t){var e,n,r,o;return{c:function(){_(e=v("ellipse"),"rx",n=t[6].x),_(e,"ry",r=t[6].y),_(e,"fill",o=t[2](t[8])),_(e,"transform",t[0]),_(e,"vector-effect","non-scaling-stroke")},m:function(t,n){m(t,e,n)},p:function(t,i){2&i&&n!==(n=t[6].x)&&_(e,"rx",n),2&i&&r!==(r=t[6].y)&&_(e,"ry",r),4&i&&o!==(o=t[2](t[8]))&&_(e,"fill",o),1&i&&_(e,"transform",t[0])},d:function(t){t&&d(e)}}}function Qs(t){for(var e,n=t[1],o=[],i=0;i<n.length;i+=1)o[i]=Hs(Ys(t,n,i));return{c:function(){for(var t=0;t<o.length;t+=1)o[t].c();e=b("")},m:function(t,n){for(var r=0;r<o.length;r+=1)o[r].m(t,n);m(t,e,n)},p:function(t,r){var i=Xs(r,1)[0];if(7&i){var s;for(n=t[1],s=0;s<n.length;s+=1){var u=Ys(t,n,s);o[s]?o[s].p(u,i):(o[s]=Hs(u),o[s].c(),o[s].m(e.parentNode,e))}for(;s<o.length;s+=1)o[s].d(1);o.length=n.length}},i:r,o:r,d:function(t){y(o,t),t&&d(e)}}}function Gs(t,e,n){var r=e.context,o=void 0===r?new ds(300,300,[-4,4],[-4,4]):r,i=e.gaussian,s=void 0===i?new fs([0,0],[[1,.7],[.7,2]]):i,u=e.contours,a=void 0===u?[Math.sqrt(4.61),Math.sqrt(3.22),Math.sqrt(1.83),Math.sqrt(1.02),Math.sqrt(.446)]:u,l=e.transform,c=e.radii,f=e.color;return t.$$set=function(t){"context"in t&&n(3,o=t.context),"gaussian"in t&&n(4,s=t.gaussian),"contours"in t&&n(5,a=t.contours),"transform"in t&&n(0,l=t.transform),"radii"in t&&n(1,c=t.radii),"color"in t&&n(2,f=t.color)},t.$$.update=function(){if(24&t.$$.dirty){var e=Xs(s.getMean(),2),r=e[0],i=e[1],u=Xs(s.transformationMatrix().to2DArray(),2),h=Xs(u[0],2),p=h[0],g=h[1],m=Xs(u[1],2),d=m[0],y=m[1];n(0,l="matrix(".concat(p,",").concat(-d,",").concat(-g,",").concat(y,",").concat(o.u(r),",").concat(o.v(i),")"))}40&t.$$.dirty&&n(1,c=a.map((function(t){return{x:o.u(t)-o.u(0),y:o.v(0)-o.v(t)}}))),32&t.$$.dirty&&n(2,f=Ho(ys).domain([0,a.length-1]))},[l,c,f,o,s,a]}var Ks=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Vs(t,e)}(i,t);var e,n,r,o=Ls(i);function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),tt(Bs(e=o.call(this)),t,Gs,Qs,a,{context:3,gaussian:4,contours:5,transform:0,radii:1,color:2}),e}return e=i,n&&zs(e.prototype,n),r&&zs(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}(et);function Zs(t){return(Zs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ws(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Js(t,e){return(Js=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function tu(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=ru(t);if(e){var o=ru(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return eu(this,n)}}function eu(t,e){if(e&&("object"===Zs(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return nu(t)}function nu(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ru(t){return(ru=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ou(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null==n)return;var r,o,i=[],s=!0,u=!1;try{for(n=n.call(t);!(s=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);s=!0);}catch(t){u=!0,o=t}finally{try{s||null==n.return||n.return()}finally{if(u)throw o}}return i}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return iu(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return iu(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function iu(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function su(t){h(t,"svelte-1ippict",".handleLine.svelte-1ippict{stroke:rgba(0, 110, 168);stroke-width:2}.handleInvisible.svelte-1ippict{fill:rgba(245, 181, 62, 0);cursor:grab}.handle.svelte-1ippict{fill:rgb(0, 110, 168)}.handle.svelte-1ippict:hover{stroke:gray;stroke-width:2px}")}function uu(t){var e,n,r,o,i,s,u,a,l,c,h,p,g,y,w,b,x,M,S,E,k,A,$,j,R,N,T,O;return r=new Ks({props:{width:t[5].width,height:t[5].height,context:t[5],gaussian:t[0]}}),{c:function(){e=v("svg"),n=v("g"),Z(r.$$.fragment),o=v("circle"),u=v("circle"),c=v("line"),w=v("line"),E=v("circle"),$=v("circle"),_(o,"class","handle svelte-1ippict"),_(o,"cx",i=t[5].u(t[1].e1.x)),_(o,"cy",s=t[5].v(t[1].e1.y)),_(o,"r","4"),_(u,"class","handle svelte-1ippict"),_(u,"cx",a=t[5].u(t[1].e2.x)),_(u,"cy",l=t[5].v(t[1].e2.y)),_(u,"r","4"),_(c,"class","handleLine svelte-1ippict"),_(c,"x1",h=t[5].u(t[0].mean.get(0,0))),_(c,"y1",p=t[5].v(t[0].mean.get(1,0))),_(c,"x2",g=t[5].u(t[1].e1.x)),_(c,"y2",y=t[5].v(t[1].e1.y)),_(w,"class","handleLine svelte-1ippict"),_(w,"x1",b=t[5].u(t[0].mean.get(0,0))),_(w,"y1",x=t[5].v(t[0].mean.get(1,0))),_(w,"x2",M=t[5].u(t[1].e2.x)),_(w,"y2",S=t[5].v(t[1].e2.y)),_(E,"class","handleInvisible svelte-1ippict"),_(E,"cx",k=t[5].u(t[1].e1.x)),_(E,"cy",A=t[5].v(t[1].e1.y)),_(E,"r","44"),_($,"class","handleInvisible svelte-1ippict"),_($,"cx",j=t[5].u(t[1].e2.x)),_($,"cy",R=t[5].v(t[1].e2.y)),_($,"r","44"),_(e,"width",N=t[5].width),_(e,"height",T=t[5].height)},m:function(i,s){m(i,e,s),f(e,n),W(r,n,null),f(n,o),f(n,u),f(n,c),f(n,w),f(n,E),t[17](E),f(n,$),t[18]($),t[19](n),O=!0},p:function(t,n){var f=ou(n,1)[0],m={};32&f&&(m.width=t[5].width),32&f&&(m.height=t[5].height),32&f&&(m.context=t[5]),1&f&&(m.gaussian=t[0]),r.$set(m),(!O||34&f&&i!==(i=t[5].u(t[1].e1.x)))&&_(o,"cx",i),(!O||34&f&&s!==(s=t[5].v(t[1].e1.y)))&&_(o,"cy",s),(!O||34&f&&a!==(a=t[5].u(t[1].e2.x)))&&_(u,"cx",a),(!O||34&f&&l!==(l=t[5].v(t[1].e2.y)))&&_(u,"cy",l),(!O||33&f&&h!==(h=t[5].u(t[0].mean.get(0,0))))&&_(c,"x1",h),(!O||33&f&&p!==(p=t[5].v(t[0].mean.get(1,0))))&&_(c,"y1",p),(!O||34&f&&g!==(g=t[5].u(t[1].e1.x)))&&_(c,"x2",g),(!O||34&f&&y!==(y=t[5].v(t[1].e1.y)))&&_(c,"y2",y),(!O||33&f&&b!==(b=t[5].u(t[0].mean.get(0,0))))&&_(w,"x1",b),(!O||33&f&&x!==(x=t[5].v(t[0].mean.get(1,0))))&&_(w,"y1",x),(!O||34&f&&M!==(M=t[5].u(t[1].e2.x)))&&_(w,"x2",M),(!O||34&f&&S!==(S=t[5].v(t[1].e2.y)))&&_(w,"y2",S),(!O||34&f&&k!==(k=t[5].u(t[1].e1.x)))&&_(E,"cx",k),(!O||34&f&&A!==(A=t[5].v(t[1].e1.y)))&&_(E,"cy",A),(!O||34&f&&j!==(j=t[5].u(t[1].e2.x)))&&_($,"cx",j),(!O||34&f&&R!==(R=t[5].v(t[1].e2.y)))&&_($,"cy",R),(!O||32&f&&N!==(N=t[5].width))&&_(e,"width",N),(!O||32&f&&T!==(T=t[5].height))&&_(e,"height",T)},i:function(t){O||(Q(r.$$.fragment,t),O=!0)},o:function(t){G(r.$$.fragment,t),O=!1},d:function(n){n&&d(e),J(r),t[17](null),t[18](null),t[19](null)}}}function au(t,e,n){var r=function(){const t=N();return(e,n)=>{const r=t.$$.callbacks[e];if(r){const o=$(e,n);r.slice().forEach(e=>{e.call(t,o)})}}}(),o=e.graph,i=e.sigma1,s=void 0===i?1:i,u=e.sigma2,a=void 0===u?1:u,l=e.corr,c=void 0===l?0:l,f=function(t){return Math.sqrt(t[0]*t[0]+t[1]*t[1])},h=e.gaussian,p=void 0===h?new fs([0,0],[[s,c],[c,a]]):h,g=new Xi(p.cov),m=Math.sqrt(g.realEigenvalues[0]),d=Math.sqrt(g.realEigenvalues[1]),y=e.eig,w=void 0===y?{e1:{x:g.eigenvectorMatrix.get(0,0)*m,y:g.eigenvectorMatrix.get(1,0)*m},e2:{x:g.eigenvectorMatrix.get(0,1)*d,y:g.eigenvectorMatrix.get(1,1)*d}}:y,v=e.mean,b=void 0===v?p.mean:v,x=e.context,M=void 0===x?new ds(300,300,[-3,3],[-3,3]):x,_=e.e1,S=e.e2,E=e.n_samples,k=void 0===E?1e3:E;function A(t){for(var e=[],n=0;n<t;n++)e.push(p.sample());return e}var j=e.resample,R=void 0===j?1:j,q=e.samples,C=e.estimatedMean,I=e.estimatedCov;function z(){r("update",{gaussian:p,errorMean:V,errorCov:L})}var V=e.errorMean,L=e.errorCov;function D(){n(6,q=A(k)),z()}return T((function(){z(),Xe(o).selectAll(".sample").data(q).enter().append("circle").attr("class","sample").attr("fill","rgb(73, 0, 106, 0.5)").attr("r",1).attr("cx",(function(t){return M.u(t.get(0,0))})).attr("cy",(function(t){return M.v(t.get(1,0))})),Xe(_).call(go().on("drag",(function(t,e){var r=w.e2.x*w.e2.x+w.e2.y*w.e2.y,o=M.x(Cs(t.x,10,M.width-10)),i=M.y(Cs(t.y,10,M.height-10));n(1,w.e1={x:o,y:i},w),n(1,w.e2={x:-i*Math.sqrt(r)/f([o,i]),y:o*Math.sqrt(r)/f([o,i])},w),D()}))),Xe(S).call(go().on("drag",(function(t,e){var r=w.e1.x*w.e1.x+w.e1.y*w.e1.y,o=M.x(Cs(t.x,10,M.width-10)),i=M.y(Cs(t.y,10,M.height-10));n(1,w.e2={x:o,y:i},w),n(1,w.e1={x:i*Math.sqrt(r)/f([o,i]),y:-o*Math.sqrt(r)/f([o,i])},w),D()})))})),O((function(){var t=Xe(o).selectAll(".sample").data(q);t.exit().remove(),t.enter().append("circle").attr("class","sample").attr("fill","rgb(73, 0, 106, 0.5)").attr("r",1).merge(t).transition().duration(500).attr("cx",(function(t){return M.u(t.get(0,0))})).attr("cy",(function(t){return M.v(t.get(1,0))}))})),t.$$set=function(t){"graph"in t&&n(2,o=t.graph),"sigma1"in t&&n(11,s=t.sigma1),"sigma2"in t&&n(12,a=t.sigma2),"corr"in t&&n(13,c=t.corr),"gaussian"in t&&n(0,p=t.gaussian),"eig"in t&&n(1,w=t.eig),"mean"in t&&n(14,b=t.mean),"context"in t&&n(5,M=t.context),"e1"in t&&n(3,_=t.e1),"e2"in t&&n(4,S=t.e2),"n_samples"in t&&n(15,k=t.n_samples),"resample"in t&&n(16,R=t.resample),"samples"in t&&n(6,q=t.samples),"estimatedMean"in t&&n(7,C=t.estimatedMean),"estimatedCov"in t&&n(8,I=t.estimatedCov),"errorMean"in t&&n(9,V=t.errorMean),"errorCov"in t&&n(10,L=t.errorCov)},t.$$.update=function(){if(16386&t.$$.dirty){var e=new Oi([[w.e1.x,w.e2.x],[w.e1.y,w.e2.y]]);n(0,p=new fs(b,e.mmul(e.transpose())))}if(98304&t.$$.dirty&&R&&n(6,q=A(k)),32961&t.$$.dirty){n(7,C=Oi.zeros(p.dim,1));for(var r=0;r<k;r++)C.add(q[r]);C.div(k)}if(33217&t.$$.dirty){n(8,I=Oi.zeros(p.dim,p.dim));for(var o=0;o<k;o++){var i=Oi.sub(q[o],C);I.add(i.mmul(i.transpose()))}I.div(k-1)}129&t.$$.dirty&&n(9,V=Oi.sub(p.mean,C).norm()),257&t.$$.dirty&&(n(10,L=Oi.sub(p.cov,I).norm()),z())},[p,w,o,_,S,M,q,C,I,V,L,s,a,c,b,k,R,function(t){P[t?"unshift":"push"]((function(){n(3,_=t)}))},function(t){P[t?"unshift":"push"]((function(){n(4,S=t)}))},function(t){P[t?"unshift":"push"]((function(){n(2,o=t)}))}]}var lu=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Js(t,e)}(i,t);var e,n,r,o=tu(i);function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),tt(nu(e=o.call(this)),t,au,uu,a,{graph:2,sigma1:11,sigma2:12,corr:13,gaussian:0,eig:1,mean:14,context:5,e1:3,e2:4,n_samples:15,resample:16,samples:6,estimatedMean:7,estimatedCov:8,errorMean:9,errorCov:10},su),e}return e=i,n&&Ws(e.prototype,n),r&&Ws(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}(et);function cu(t){return(cu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function fu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function hu(t,e){return(hu=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function pu(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=du(t);if(e){var o=du(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return gu(this,n)}}function gu(t,e){if(e&&("object"===cu(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return mu(t)}function mu(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function du(t){return(du=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function yu(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null==n)return;var r,o,i=[],s=!0,u=!1;try{for(n=n.call(t);!(s=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);s=!0);}catch(t){u=!0,o=t}finally{try{s||null==n.return||n.return()}finally{if(u)throw o}}return i}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return wu(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return wu(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function wu(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function vu(t){h(t,"svelte-134p43",".entry.svelte-134p43{font-size:14px;fill:rgba(0,0,0,0.8);text-anchor:middle;alignment-baseline:center}.entryBox.svelte-134p43{fill:hsl(200, 20%, 97%);stroke-width:1;stroke:rgba(0,0,0,0.2)}")}function bu(t){var e,n,o,i,s,u,a,l,c,h,p,g,y,w,x,M,S;return{c:function(){e=v("svg"),n=v("g"),o=v("rect"),i=v("text"),s=b(t[0]),u=v("g"),a=v("rect"),l=v("text"),c=b(t[2]),h=v("g"),p=v("rect"),g=v("text"),y=b(t[2]),w=v("g"),x=v("rect"),M=v("text"),S=b(t[1]),_(o,"x","0"),_(o,"y","0"),_(o,"width","50"),_(o,"height","35"),_(o,"rx","5"),_(o,"ry","5"),_(o,"class","entryBox svelte-134p43"),_(i,"x","25"),_(i,"y","23"),_(i,"class","entry svelte-134p43"),_(n,"transform","translate(1,1)"),_(a,"x","0"),_(a,"y","0"),_(a,"width","50"),_(a,"height","35"),_(a,"rx","5"),_(a,"ry","5"),_(a,"class","entryBox svelte-134p43"),_(l,"x","25"),_(l,"y","23"),_(l,"class","entry svelte-134p43"),_(u,"transform","translate(61,1)"),_(p,"x","0"),_(p,"y","0"),_(p,"width","50"),_(p,"height","35"),_(p,"rx","5"),_(p,"ry","5"),_(p,"class","entryBox svelte-134p43"),_(g,"x","25"),_(g,"y","23"),_(g,"class","entry svelte-134p43"),_(h,"transform","translate(1,46)"),_(x,"x","0"),_(x,"y","0"),_(x,"width","50"),_(x,"height","35"),_(x,"rx","5"),_(x,"ry","5"),_(x,"class","entryBox svelte-134p43"),_(M,"x","25"),_(M,"y","23"),_(M,"class","entry svelte-134p43"),_(w,"transform","translate(61,46)"),_(e,"height","82"),_(e,"width","112")},m:function(t,r){m(t,e,r),f(e,n),f(n,o),f(n,i),f(i,s),f(e,u),f(u,a),f(u,l),f(l,c),f(e,h),f(h,p),f(h,g),f(g,y),f(e,w),f(w,x),f(w,M),f(M,S)},p:function(t,e){var n=yu(e,1)[0];1&n&&E(s,t[0]),4&n&&E(c,t[2]),4&n&&E(y,t[2]),2&n&&E(S,t[1])},i:r,o:r,d:function(t){t&&d(e)}}}function xu(t,e,n){var r=e.sigma1,o=void 0===r?1:r,i=e.sigma2,s=void 0===i?1:i,u=e.corr,a=void 0===u?.5:u;return t.$$set=function(t){"sigma1"in t&&n(0,o=t.sigma1),"sigma2"in t&&n(1,s=t.sigma2),"corr"in t&&n(2,a=t.corr)},[o,s,a]}var Mu=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&hu(t,e)}(i,t);var e,n,r,o=pu(i);function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),tt(mu(e=o.call(this)),t,xu,bu,a,{sigma1:0,sigma2:1,corr:2},vu),e}return e=i,n&&fu(e.prototype,n),r&&fu(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}(et);function _u(t){return(_u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Su(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Eu(t,e){return(Eu=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ku(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=ju(t);if(e){var o=ju(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Au(this,n)}}function Au(t,e){if(e&&("object"===_u(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return $u(t)}function $u(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ju(t){return(ju=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Ru(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null==n)return;var r,o,i=[],s=!0,u=!1;try{for(n=n.call(t);!(s=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);s=!0);}catch(t){u=!0,o=t}finally{try{s||null==n.return||n.return()}finally{if(u)throw o}}return i}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return Nu(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Nu(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Nu(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Tu(t){h(t,"svelte-1gc1gg1","svg.svelte-1gc1gg1{width:100%;height:auto}.gauss-grid.svelte-1gc1gg1{display:inline-grid;grid-template-columns:1fr 2fr;grid-auto-rows:min-content;text-align:center}@media only screen and (max-width: 1168px){.gauss-grid.svelte-1gc1gg1{display:inline-grid;grid-template-columns:1fr;grid-auto-rows:min-content;text-align:center}}.grid-item.svelte-1gc1gg1{margin:5px}.plot.svelte-1gc1gg1{float:left}")}function Ou(t){var e,n,r,o,i,s,u,a,l,c,h,p,g,y,M,S,E,k,A,$,j,R,N,T,O,q,P,C,I,z,V,L,D,B,F,X,U,Y,H,K,tt,et,nt,rt,ot,it,st,ut;return(o=new lu({props:{sigma1:t[0].cov.get(0,0),sigma2:t[0].cov.get(1,1),cov:t[0].cov.get(0,1),context:t[2]}})).$on("update",t[3]),M=new Mu({props:{sigma1:ws(t[0].cov.get(0,0)),sigma2:ws(t[0].cov.get(1,1)),corr:ws(t[0].cov.get(0,1))}}),{c:function(){e=w("div"),n=w("div"),r=v("svg"),Z(o.$$.fragment),a=x(),l=w("div"),c=v("svg"),h=v("text"),p=v("tspan"),g=b("Covariance matrix (Σ)"),y=v("g"),Z(M.$$.fragment),S=v("text"),E=b("By dragging the handles you\n        "),k=v("tspan"),A=b("can adjust the variance along"),$=x(),j=v("tspan"),R=b("each dimension, as well as the"),N=x(),T=v("tspan"),O=b("correlation between the two"),q=x(),P=v("tspan"),C=b("random variables. "),I=v("tspan"),z=b("Pink"),L=x(),D=v("tspan"),B=b("regions show a high probability"),F=x(),X=v("tspan"),U=b("inside the distribution. "),Y=v("tspan"),H=b("Violet"),tt=x(),et=v("tspan"),nt=b("points are samples from the"),rt=x(),ot=v("tspan"),it=b("distribution."),st=x(),_(r,"width",i=t[2].width),_(r,"height",s=t[2].height),_(r,"viewBox",u="0 0 "+t[2].width+" "+t[2].height),_(r,"class","plot svelte-1gc1gg1"),_(n,"class","grid-item svelte-1gc1gg1"),_(p,"font-weight","bold"),_(h,"x","70"),_(h,"y","40"),_(h,"class","annotation"),_(y,"transform","translate(82,50)"),_(k,"x","230"),_(k,"dy","1.5em"),_(j,"x","230"),_(j,"dy","1.5em"),_(T,"x","230"),_(T,"dy","1.5em"),_(I,"fill",V=t[1](.35)),_(I,"font-style","italic"),_(P,"x","230"),_(P,"dy","1.5em"),_(D,"x","230"),_(D,"dy","1.5em"),_(Y,"fill",K=t[1](1)),_(Y,"font-style","italic"),_(X,"x","230"),_(X,"dy","1.5em"),_(et,"x","230"),_(et,"dy","1.5em"),_(ot,"x","230"),_(ot,"dy","1.5em"),_(S,"x","230"),_(S,"y","30"),_(S,"class","annotation"),_(c,"width","450"),_(c,"height","200"),_(c,"class","svelte-1gc1gg1"),_(l,"class","grid-item svelte-1gc1gg1"),_(e,"class","gauss-grid svelte-1gc1gg1")},m:function(t,i){m(t,e,i),f(e,n),f(n,r),W(o,r,null),f(e,a),f(e,l),f(l,c),f(c,h),f(h,p),f(p,g),f(c,y),W(M,y,null),f(c,S),f(S,E),f(S,k),f(k,A),f(S,$),f(S,j),f(j,R),f(S,N),f(S,T),f(T,O),f(S,q),f(S,P),f(P,C),f(P,I),f(I,z),f(S,L),f(S,D),f(D,B),f(S,F),f(S,X),f(X,U),f(X,Y),f(Y,H),f(S,tt),f(S,et),f(et,nt),f(S,rt),f(S,ot),f(ot,it),m(t,st,i),ut=!0},p:function(t,e){var n=Ru(e,1)[0],a={};1&n&&(a.sigma1=t[0].cov.get(0,0)),1&n&&(a.sigma2=t[0].cov.get(1,1)),1&n&&(a.cov=t[0].cov.get(0,1)),4&n&&(a.context=t[2]),o.$set(a),(!ut||4&n&&i!==(i=t[2].width))&&_(r,"width",i),(!ut||4&n&&s!==(s=t[2].height))&&_(r,"height",s),(!ut||4&n&&u!==(u="0 0 "+t[2].width+" "+t[2].height))&&_(r,"viewBox",u);var l={};1&n&&(l.sigma1=ws(t[0].cov.get(0,0))),1&n&&(l.sigma2=ws(t[0].cov.get(1,1))),1&n&&(l.corr=ws(t[0].cov.get(0,1))),M.$set(l),(!ut||2&n&&V!==(V=t[1](.35)))&&_(I,"fill",V),(!ut||2&n&&K!==(K=t[1](1)))&&_(Y,"fill",K)},i:function(t){ut||(Q(o.$$.fragment,t),Q(M.$$.fragment,t),ut=!0)},o:function(t){G(o.$$.fragment,t),G(M.$$.fragment,t),ut=!1},d:function(t){t&&d(e),J(o),J(M),t&&d(st)}}}function qu(t,e,n){var r=e.scale,o=void 0===r?Ho(ys).domain([0,.2]):r,i=e.context,s=void 0===i?new ds(200,200,[-2,2],[-2,2]):i,u=e.gaussian,a=void 0===u?new fs([0,0],[[1,0],[0,1]]):u;return t.$$set=function(t){"scale"in t&&n(1,o=t.scale),"context"in t&&n(2,s=t.context),"gaussian"in t&&n(0,a=t.gaussian)},[a,o,s,function(t){n(0,a=t.detail.gaussian)}]}var Pu=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Eu(t,e)}(i,t);var e,n,r,o=ku(i);function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),tt($u(e=o.call(this)),t,qu,Ou,a,{scale:1,context:2,gaussian:0},Tu),e}return e=i,n&&Su(e.prototype,n),r&&Su(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}(et);function Cu(t){return(Cu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Iu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function zu(t,e){return(zu=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Vu(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Bu(t);if(e){var o=Bu(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Lu(this,n)}}function Lu(t,e){if(e&&("object"===Cu(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Du(t)}function Du(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Bu(t){return(Bu=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Fu(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null==n)return;var r,o,i=[],s=!0,u=!1;try{for(n=n.call(t);!(s=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);s=!0);}catch(t){u=!0,o=t}finally{try{s||null==n.return||n.return()}finally{if(u)throw o}}return i}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return Xu(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Xu(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Xu(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Uu(t){h(t,"svelte-1okcz28","svg.svelte-1okcz28{width:100%;height:auto}.gauss-grid.svelte-1okcz28{display:inline-grid;grid-template-columns:1fr 2fr;grid-auto-rows:min-content;text-align:center}@media only screen and (max-width: 1168px){.gauss-grid.svelte-1okcz28{display:inline-grid;grid-template-columns:1fr;grid-auto-rows:min-content;text-align:center}}.grid-item.svelte-1okcz28{margin:5px}.plot.svelte-1okcz28{float:left}input.svelte-1okcz28{font-size:12px}.entry.svelte-1okcz28{font-size:14px;fill:rgba(0,0,0,0.8);text-anchor:middle;alignment-baseline:center}.entryBox.svelte-1okcz28{fill:hsl(200, 20%, 97%);stroke-width:1;stroke:rgba(0,0,0,0.2)}")}function Yu(t){var e,n,r,o,i,u,a,l,c,h,p,g,y,S,$,j,R,N,T,O,q,P,C,I,z,V,L,D,B,F,X,U,Y,H,K,tt,et,nt,rt,ot,it,st,ut,at;return(o=new lu({props:{sigma1:t[6].cov.get(0,0),sigma2:t[6].cov.get(1,1),corr:t[6].cov.get(0,1),context:t[5],n_samples:t[3],resample:t[2]}})).$on("update",t[7]),{c:function(){e=w("div"),n=w("div"),r=v("svg"),Z(o.$$.fragment),l=x(),c=w("div"),h=w("p"),p=w("input"),g=b(" = "),y=w("input"),S=x(),$=w("input"),j=x(),R=w("div"),N=x(),(T=w("button")).textContent="Resample",O=x(),q=w("table"),P=w("tr"),(C=w("td")).innerHTML="<d-math>\\| \\hat\\mu - \\mu \\|_2 =</d-math>",I=x(),z=w("td"),V=v("svg"),L=v("g"),D=v("rect"),B=v("text"),F=b(t[0]),X=x(),U=w("tr"),(Y=w("td")).innerHTML="<d-math>\\| \\hat\\Sigma - \\Sigma \\|_2 =</d-math>",H=x(),K=w("td"),tt=v("svg"),et=v("g"),nt=v("rect"),rt=v("text"),ot=b(t[1]),it=x(),_(r,"width",i=t[5].width),_(r,"height",u=t[5].height),_(r,"viewBox",a="0 0 "+t[5].width+" "+t[5].height),_(r,"class","plot svelte-1okcz28"),_(n,"class","grid-item svelte-1okcz28"),p.disabled=!0,_(p,"class","labelSlider svelte-1okcz28"),p.value="Sample points",y.disabled=!0,_(y,"class","entry svelte-1okcz28"),_(h,"class","label"),_($,"id","input"),_($,"type","range"),_($,"min","0"),_($,"max","2"),_($,"step","1"),_($,"class","svelte-1okcz28"),_(R,"id","output"),_(T,"type","button"),A(C,"border-bottom","none"),_(D,"x","0"),_(D,"y","0"),_(D,"width","50"),_(D,"height","35"),_(D,"rx","5"),_(D,"ry","5"),_(D,"class","entryBox svelte-1okcz28"),_(B,"x","25"),_(B,"y","23"),_(B,"class","entry svelte-1okcz28"),_(L,"transform","translate(0,7)"),_(V,"width","56"),_(V,"height","42"),_(V,"class","svelte-1okcz28"),A(z,"border-bottom","none"),_(nt,"x","0"),_(nt,"y","0"),_(nt,"width","50"),_(nt,"height","35"),_(nt,"rx","5"),_(nt,"ry","5"),_(nt,"class","entryBox svelte-1okcz28"),_(rt,"x","25"),_(rt,"y","23"),_(rt,"class","entry svelte-1okcz28"),_(et,"transform","translate(0,7)"),_(tt,"width","56"),_(tt,"height","42"),_(tt,"class","svelte-1okcz28"),A(q,"border-bottom","none"),_(c,"class","grid-item svelte-1okcz28"),_(e,"class","gauss-grid svelte-1okcz28")},m:function(i,s){m(i,e,s),f(e,n),f(n,r),W(o,r,null),f(e,l),f(e,c),f(c,h),f(h,p),f(h,g),f(h,y),k(y,t[3]),f(c,S),f(c,$),k($,t[4]),f(c,j),f(c,R),f(c,N),f(c,T),f(c,O),f(c,q),f(q,P),f(P,C),f(P,I),f(P,z),f(z,V),f(V,L),f(L,D),f(L,B),f(B,F),f(q,X),f(q,U),f(U,Y),f(U,H),f(U,K),f(K,tt),f(tt,et),f(et,nt),f(et,rt),f(rt,ot),m(i,it,s),st=!0,ut||(at=[M(y,"input",t[10]),M($,"change",t[11]),M($,"input",t[11]),M($,"input",t[8]),M(T,"click",t[9])],ut=!0)},p:function(t,e){var n=Fu(e,1)[0],s={};64&n&&(s.sigma1=t[6].cov.get(0,0)),64&n&&(s.sigma2=t[6].cov.get(1,1)),64&n&&(s.corr=t[6].cov.get(0,1)),32&n&&(s.context=t[5]),8&n&&(s.n_samples=t[3]),4&n&&(s.resample=t[2]),o.$set(s),(!st||32&n&&i!==(i=t[5].width))&&_(r,"width",i),(!st||32&n&&u!==(u=t[5].height))&&_(r,"height",u),(!st||32&n&&a!==(a="0 0 "+t[5].width+" "+t[5].height))&&_(r,"viewBox",a),8&n&&y.value!==t[3]&&k(y,t[3]),16&n&&k($,t[4]),(!st||1&n)&&E(F,t[0]),(!st||2&n)&&E(ot,t[1])},i:function(t){st||(Q(o.$$.fragment,t),st=!0)},o:function(t){G(o.$$.fragment,t),st=!1},d:function(t){t&&d(e),J(o),t&&d(it),ut=!1,s(at)}}}function Hu(t,e,n){var r=e.context,o=void 0===r?new ds(300,300,[-2,2],[-2,2]):r,i=e.gaussian,s=void 0===i?new fs([0,0],[[1,0],[0,1]]):i,u=e.errorMean,a=e.errorCov,l=e.resample,c=void 0===l?1:l,f=e.n_samples,h=void 0===f?1e3:f,p=e.n_samples_slider,g=void 0===p?1:p;return t.$$set=function(t){"context"in t&&n(5,o=t.context),"gaussian"in t&&n(6,s=t.gaussian),"errorMean"in t&&n(0,u=t.errorMean),"errorCov"in t&&n(1,a=t.errorCov),"resample"in t&&n(2,c=t.resample),"n_samples"in t&&n(3,h=t.n_samples),"n_samples_slider"in t&&n(4,g=t.n_samples_slider)},[u,a,c,h,g,o,s,function(t){n(0,u=vs(t.detail.errorMean,4)),n(1,a=vs(t.detail.errorCov,4))},function(){n(3,h=[100,1e3,1e4][g])},function(){n(2,c++,c)},function(){h=this.value,n(3,h)},function(){g=S(this.value),n(4,g)}]}var Qu=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&zu(t,e)}(i,t);var e,n,r,o=Vu(i);function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),tt(Du(e=o.call(this)),t,Hu,Yu,a,{context:5,gaussian:6,errorMean:0,errorCov:1,resample:2,n_samples:3,n_samples_slider:4},Uu),e}return e=i,n&&Iu(e.prototype,n),r&&Iu(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}(et),Gu=(new Ps({target:document.querySelector("#Teaser")}),document.getElementById("multivariate-dfigure"));Gu.addEventListener("ready",(function(){var t=Gu.querySelector("#multivariate-target");new Pu({target:t})}));var Ku=document.getElementById("estimationError-dfigure");Ku.addEventListener("ready",(function(){var t=Ku.querySelector("#estimationError-target");new Qu({target:t})}))},3:function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},4:function(t,e){(function(e){t.exports=e}).call(this,{})},52:function(t,e,n){var r=n(173),o=n(174),i=n(175),s=n(176),u=n(177),a=n(178),l=n(179);l.alea=r,l.xor128=o,l.xorwow=i,l.xorshift7=s,l.xor4096=u,l.tychei=a,t.exports=l}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,