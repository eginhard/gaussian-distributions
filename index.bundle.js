!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=141)}({0:function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},133:function(t,e,n){(function(t){var r;!function(t,o,i){function s(t){var e,n=this,r=(e=4022871197,function(t){t=String(t);for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function u(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function a(t,e){var n=new s(t),r=e&&e.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,r&&("object"==typeof r&&u(r,n),o.state=function(){return u(n,{})}),o}o&&o.exports?o.exports=a:n(0)&&n(4)?void 0===(r=function(){return a}.call(e,n,e,o))||(o.exports=r):this.alea=a}(0,t,n(0))}).call(this,n(3)(t))},134:function(t,e,n){(function(t){var r;!function(t,o,i){function s(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function u(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function a(t,e){var n=new s(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&u(r,n),o.state=function(){return u(n,{})}),o}o&&o.exports?o.exports=a:n(0)&&n(4)?void 0===(r=function(){return a}.call(e,n,e,o))||(o.exports=r):this.xor128=a}(0,t,n(0))}).call(this,n(3)(t))},135:function(t,e,n){(function(t){var r;!function(t,o,i){function s(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function u(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function a(t,e){var n=new s(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&u(r,n),o.state=function(){return u(n,{})}),o}o&&o.exports?o.exports=a:n(0)&&n(4)?void 0===(r=function(){return a}.call(e,n,e,o))||(o.exports=r):this.xorwow=a}(0,t,n(0))}).call(this,n(3)(t))},136:function(t,e,n){(function(t){var r;!function(t,o,i){function s(t){var e=this;e.next=function(){var t,n,r=e.x,o=e.i;return t=r[o],n=(t^=t>>>7)^t<<24,n^=(t=r[o+1&7])^t>>>10,n^=(t=r[o+3&7])^t>>>3,n^=(t=r[o+4&7])^t<<7,t=r[o+7&7],n^=(t^=t<<13)^t<<9,r[o]=n,e.i=o+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function u(t,e){return e.x=t.x.slice(),e.i=t.i,e}function a(t,e){null==t&&(t=+new Date);var n=new s(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&(r.x&&u(r,n),o.state=function(){return u(n,{})}),o}o&&o.exports?o.exports=a:n(0)&&n(4)?void 0===(r=function(){return a}.call(e,n,e,o))||(o.exports=r):this.xorshift7=a}(0,t,n(0))}).call(this,n(3)(t))},137:function(t,e,n){(function(t){var r;!function(t,o,i){function s(t){var e=this;e.next=function(){var t,n,r=e.w,o=e.X,i=e.i;return e.w=r=r+1640531527|0,n=o[i+34&127],t=o[i=i+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=o[i]=n^t,e.i=i,n+(r^r>>>16)|0},function(t,e){var n,r,o,i,s,u=[],a=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,a=Math.max(a,e.length)),o=0,i=-32;i<a;++i)e&&(r^=e.charCodeAt((i+32)%e.length)),0===i&&(s=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,i>=0&&(s=s+1640531527|0,o=0==(n=u[127&i]^=r+s)?o+1:0);for(o>=128&&(u[127&(e&&e.length||0)]=-1),o=127,i=512;i>0;--i)r=u[o+34&127],n=u[o=o+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,u[o]=r^n;t.w=s,t.X=u,t.i=o}(e,t)}function u(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function a(t,e){null==t&&(t=+new Date);var n=new s(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&(r.X&&u(r,n),o.state=function(){return u(n,{})}),o}o&&o.exports?o.exports=a:n(0)&&n(4)?void 0===(r=function(){return a}.call(e,n,e,o))||(o.exports=r):this.xor4096=a}(0,t,n(0))}).call(this,n(3)(t))},138:function(t,e,n){(function(t){var r;!function(t,o,i){function s(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,o=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^o,o=o-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^o,e.a=o-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function u(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function a(t,e){var n=new s(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&u(r,n),o.state=function(){return u(n,{})}),o}o&&o.exports?o.exports=a:n(0)&&n(4)?void 0===(r=function(){return a}.call(e,n,e,o))||(o.exports=r):this.tychei=a}(0,t,n(0))}).call(this,n(3)(t))},139:function(t,e,n){var r;!function(o,i,s){var u,a=s.pow(256,6),l=s.pow(2,52),c=2*l;function f(t,e,n){var r=[],f=p(function t(e,n){var r,o=[],i=typeof e;if(n&&"object"==i)for(r in e)try{o.push(t(e[r],n-1))}catch(t){}return o.length?o:"string"==i?e:e+"\0"}((e=1==e?{entropy:!0}:e||{}).entropy?[t,m(i)]:null==t?function(){try{var t;return u&&(t=u.randomBytes)?t=t(256):(t=new Uint8Array(256),(o.crypto||o.msCrypto).getRandomValues(t)),m(t)}catch(t){var e=o.navigator,n=e&&e.plugins;return[+new Date,o,n,o.screen,m(i)]}}():t,3),r),d=new h(r),y=function(){for(var t=d.g(6),e=a,n=0;t<l;)t=256*(t+n),e*=256,n=d.g(1);for(;t>=c;)t/=2,e/=2,n>>>=1;return(t+n)/e};return y.int32=function(){return 0|d.g(4)},y.quick=function(){return d.g(4)/4294967296},y.double=y,p(m(d.S),i),(e.pass||n||function(t,e,n,r){return r&&(r.S&&g(r,d),t.state=function(){return g(d,{})}),n?(s.random=t,e):t})(y,f,"global"in e?e.global:this==s,e.state)}function h(t){var e,n=t.length,r=this,o=0,i=r.i=r.j=0,s=r.S=[];for(n||(t=[n++]);o<256;)s[o]=o++;for(o=0;o<256;o++)s[o]=s[i=255&i+t[o%n]+(e=s[o])],s[i]=e;(r.g=function(t){for(var e,n=0,o=r.i,i=r.j,s=r.S;t--;)e=s[o=255&o+1],n=256*n+s[255&(s[o]=s[i=255&i+e])+(s[i]=e)];return r.i=o,r.j=i,n})(256)}function g(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function p(t,e){for(var n,r=t+"",o=0;o<r.length;)e[255&o]=255&(n^=19*e[255&o])+r.charCodeAt(o++);return m(e)}function m(t){return String.fromCharCode.apply(0,t)}if(p(s.random(),i),t.exports){t.exports=f;try{u=n(140)}catch(t){}}else void 0===(r=function(){return f}.call(e,n,e,t))||(t.exports=r)}("undefined"!=typeof self?self:this,[],Math)},140:function(t,e){},141:function(t,e,n){"use strict";n.r(e);function r(){}function o(t){return t()}function i(){return Object.create(null)}function s(t){t.forEach(o)}function u(t){return"function"==typeof t}function a(t,e){return t!=t?e==e:t!==e||t&&"object"==typeof t||"function"==typeof t}function l(t){return 0===Object.keys(t).length}new Set;let c=!1;function f(t,e){t.appendChild(e)}function h(t,e,n){const r=g(t);if(!r.getElementById(e)){const t=w("style");t.id=e,t.textContent=n,p(r,t)}}function g(t){if(!t)return document;const e=t.getRootNode?t.getRootNode():t.ownerDocument;return e&&e.host?e:t.ownerDocument}function p(t,e){f(t.head||t,e)}function m(t,e,n){t.insertBefore(e,n||null)}function d(t){t.parentNode.removeChild(t)}function y(t,e){for(let n=0;n<t.length;n+=1)t[n]&&t[n].d(e)}function w(t){return document.createElement(t)}function v(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}function b(t){return document.createTextNode(t)}function x(){return b(" ")}function M(t,e,n,r){return t.addEventListener(e,n,r),()=>t.removeEventListener(e,n,r)}function _(t,e,n){null==n?t.removeAttribute(e):t.getAttribute(e)!==n&&t.setAttribute(e,n)}function S(t,e){e=""+e,t.wholeText!==e&&(t.data=e)}function E(t,e,n,r){t.style.setProperty(e,n,r?"important":"")}new Set;let k;function A(t){k=t}function $(){if(!k)throw new Error("Function called outside component initialization");return k}function j(t){$().$$.on_mount.push(t)}const N=[],R=[],O=[],T=[],q=Promise.resolve();let P=!1;function C(){P||(P=!0,q.then(D))}function I(t){O.push(t)}const z=new Set;let V=0;function D(){const t=k;do{for(;V<N.length;){const t=N[V];V++,A(t),F(t.$$)}for(A(null),N.length=0,V=0;R.length;)R.pop()();for(let t=0;t<O.length;t+=1){const e=O[t];z.has(e)||(z.add(e),e())}O.length=0}while(N.length);for(;T.length;)T.pop()();P=!1,z.clear(),A(t)}function F(t){if(null!==t.fragment){t.update(),s(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(I)}}const B=new Set;let L;function X(t,e){t&&t.i&&(B.delete(t),t.i(e))}function U(t,e,n,r){if(t&&t.o){if(B.has(t))return;B.add(t),L.c.push(()=>{B.delete(t),r&&(n&&t.d(1),r())}),t.o(e)}}"undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:global;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);let H;function Y(t){t&&t.c()}function Q(t,e,n,r){const{fragment:i,on_mount:a,on_destroy:l,after_update:c}=t.$$;i&&i.m(e,n),r||I(()=>{const e=a.map(o).filter(u);l?l.push(...e):s(e),t.$$.on_mount=[]}),c.forEach(I)}function G(t,e){const n=t.$$;null!==n.fragment&&(s(n.on_destroy),n.fragment&&n.fragment.d(e),n.on_destroy=n.fragment=null,n.ctx=[])}function K(t,e,n,o,u,a,l,f=[-1]){const h=k;A(t);const g=t.$$={fragment:null,ctx:null,props:a,update:r,not_equal:u,bound:i(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(h?h.$$.context:[])),callbacks:i(),dirty:f,skip_bound:!1,root:e.target||h.$$.root};l&&l(g.root);let p=!1;if(g.ctx=n?n(t,e.props||{},(e,n,...r)=>{const o=r.length?r[0]:n;return g.ctx&&u(g.ctx[e],g.ctx[e]=o)&&(!g.skip_bound&&g.bound[e]&&g.bound[e](o),p&&function(t,e){-1===t.$$.dirty[0]&&(N.push(t),C(),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}(t,e)),n}):[],g.update(),p=!0,s(g.before_update),g.fragment=!!o&&o(g.ctx),e.target){if(e.hydrate){c=!0;const t=(m=e.target,Array.from(m.childNodes));g.fragment&&g.fragment.l(t),t.forEach(d)}else g.fragment&&g.fragment.c();e.intro&&X(t.$$.fragment),Q(t,e.target,e.anchor,e.customElement),c=!1,D()}var m;A(h)}"function"==typeof HTMLElement&&(H=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){const{on_mount:t}=this.$$;this.$$.on_disconnect=t.map(o).filter(u);for(const t in this.$$.slotted)this.appendChild(this.$$.slotted[t])}attributeChangedCallback(t,e,n){this[t]=n}disconnectedCallback(){s(this.$$.on_disconnect)}$destroy(){G(this,1),this.$destroy=r}$on(t,e){const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(t){this.$$set&&!l(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}});class W{$destroy(){G(this,1),this.$destroy=r}$on(t,e){const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(t){this.$$set&&!l(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}}function J(t){h(t,"svelte-10zy88m","p.svelte-10zy88m{margin:0}")}function Z(t){let e,n,o,i,u,a,l,c,h,g,p,y,v,E,k,A,$,j;return{c(){e=w("p"),n=w("span"),o=b(t[0]),i=b(" * 2 = "),u=b(t[1]),a=b("\n  , and\n  "),l=w("span"),c=b(t[1]),h=b(" * 2 = "),g=b(t[2]),p=x(),y=w("button"),v=b("Increment counter: "),E=b(t[0]),k=x(),A=w("button"),A.textContent="Reset",_(e,"class","svelte-10zy88m")},m(r,s){m(r,e,s),f(e,n),f(n,o),f(n,i),f(n,u),f(e,a),f(e,l),f(l,c),f(l,h),f(l,g),m(r,p,s),m(r,y,s),f(y,v),f(y,E),m(r,k,s),m(r,A,s),$||(j=[M(y,"click",t[3]),M(A,"click",t[4])],$=!0)},p(t,[e]){1&e&&S(o,t[0]),2&e&&S(u,t[1]),2&e&&S(c,t[1]),4&e&&S(g,t[2]),1&e&&S(E,t[0])},i:r,o:r,d(t){t&&d(e),t&&d(p),t&&d(y),t&&d(k),t&&d(A),$=!1,s(j)}}}function tt(t,e,n){let r,o,i=1;return t.$$.update=()=>{1&t.$$.dirty&&n(1,r=2*i),2&t.$$.dirty&&n(2,o=2*r)},[i,r,o,function(){n(0,i+=1),console.log("inc count")},function(){n(0,i=1)}]}var et=class extends W{constructor(t){super(),K(this,t,tt,Z,a,{},J)}};const nt=Object.prototype.toString;function rt(t){return nt.call(t).endsWith("Array]")}var ot=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!rt(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");var n=e.fromIndex,r=void 0===n?0:n,o=e.toIndex,i=void 0===o?t.length:o;if(r<0||r>=t.length||!Number.isInteger(r))throw new Error("fromIndex must be a positive integer smaller than length");if(i<=r||i>t.length||!Number.isInteger(i))throw new Error("toIndex must be an integer greater than fromIndex and at most equal to length");for(var s=t[r],u=r+1;u<i;u++)t[u]>s&&(s=t[u]);return s};var it=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!rt(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");var n=e.fromIndex,r=void 0===n?0:n,o=e.toIndex,i=void 0===o?t.length:o;if(r<0||r>=t.length||!Number.isInteger(r))throw new Error("fromIndex must be a positive integer smaller than length");if(i<=r||i>t.length||!Number.isInteger(i))throw new Error("toIndex must be an integer greater than fromIndex and at most equal to length");for(var s=t[r],u=r+1;u<i;u++)t[u]<s&&(s=t[u]);return s};function st(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!rt(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");if(void 0!==n.output){if(!rt(n.output))throw new TypeError("output option must be an array if specified");e=n.output}else e=new Array(t.length);var r=it(t),o=ot(t);if(r===o)throw new RangeError("minimum and maximum input values are equal. Cannot rescale a constant array");var i=n.min,s=void 0===i?n.autoMinMax?r:0:i,u=n.max,a=void 0===u?n.autoMinMax?o:1:u;if(s>=a)throw new RangeError("min option must be smaller than max option");for(var l=(a-s)/(o-r),c=0;c<t.length;c++)e[c]=(t[c]-r)*l+s;return e}const ut=" ".repeat(2),at=" ".repeat(4);function lt(t,e={}){const{maxRows:n=15,maxColumns:r=10,maxNumSize:o=8}=e;return`${t.constructor.name} {\n${ut}[\n${at}${function(t,e,n,r){const{rows:o,columns:i}=t,s=Math.min(o,e),u=Math.min(i,n),a=[];for(let e=0;e<s;e++){let n=[];for(let o=0;o<u;o++)n.push(ct(t.get(e,o),r));a.push(""+n.join(" "))}u!==i&&(a[a.length-1]+=` ... ${i-n} more columns`);s!==o&&a.push(`... ${o-e} more rows`);return a.join("\n"+at)}(t,n,r,o)}\n${ut}]\n${ut}rows: ${t.rows}\n${ut}columns: ${t.columns}\n}`}function ct(t,e){const n=String(t);if(n.length<=e)return n.padEnd(e," ");const r=t.toPrecision(e-2);if(r.length<=e)return r;const o=t.toExponential(e-2),i=o.indexOf("e"),s=o.slice(i);return o.slice(0,e-s.length)+s}function ft(t,e,n){let r=n?t.rows:t.rows-1;if(e<0||e>r)throw new RangeError("Row index out of range")}function ht(t,e,n){let r=n?t.columns:t.columns-1;if(e<0||e>r)throw new RangeError("Column index out of range")}function gt(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.columns)throw new RangeError("vector size must be the same as the number of columns");return e}function pt(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.rows)throw new RangeError("vector size must be the same as the number of rows");return e}function mt(t,e){if("object"!=typeof e)throw new TypeError("unexpected type for row indices");if(e.some(e=>e<0||e>=t.rows))throw new RangeError("row indices are out of range");return Array.isArray(e)||(e=Array.from(e)),e}function dt(t,e){if("object"!=typeof e)throw new TypeError("unexpected type for column indices");if(e.some(e=>e<0||e>=t.columns))throw new RangeError("column indices are out of range");return Array.isArray(e)||(e=Array.from(e)),e}function yt(t,e,n,r,o){if(5!==arguments.length)throw new RangeError("expected 4 arguments");if(vt("startRow",e),vt("endRow",n),vt("startColumn",r),vt("endColumn",o),e>n||r>o||e<0||e>=t.rows||n<0||n>=t.rows||r<0||r>=t.columns||o<0||o>=t.columns)throw new RangeError("Submatrix indices are out of range")}function wt(t,e=0){let n=[];for(let r=0;r<t;r++)n.push(e);return n}function vt(t,e){if("number"!=typeof e)throw new TypeError(t+" must be a number")}function bt(t){if(t.isEmpty())throw new Error("Empty matrix has no elements to index")}class xt{static from1DArray(t,e,n){if(t*e!==n.length)throw new RangeError("data length does not match given dimensions");let r=new _t(t,e);for(let o=0;o<t;o++)for(let t=0;t<e;t++)r.set(o,t,n[o*e+t]);return r}static rowVector(t){let e=new _t(1,t.length);for(let n=0;n<t.length;n++)e.set(0,n,t[n]);return e}static columnVector(t){let e=new _t(t.length,1);for(let n=0;n<t.length;n++)e.set(n,0,t[n]);return e}static zeros(t,e){return new _t(t,e)}static ones(t,e){return new _t(t,e).fill(1)}static rand(t,e,n={}){if("object"!=typeof n)throw new TypeError("options must be an object");const{random:r=Math.random}=n;let o=new _t(t,e);for(let n=0;n<t;n++)for(let t=0;t<e;t++)o.set(n,t,r());return o}static randInt(t,e,n={}){if("object"!=typeof n)throw new TypeError("options must be an object");const{min:r=0,max:o=1e3,random:i=Math.random}=n;if(!Number.isInteger(r))throw new TypeError("min must be an integer");if(!Number.isInteger(o))throw new TypeError("max must be an integer");if(r>=o)throw new RangeError("min must be smaller than max");let s=o-r,u=new _t(t,e);for(let n=0;n<t;n++)for(let t=0;t<e;t++){let e=r+Math.round(i()*s);u.set(n,t,e)}return u}static eye(t,e,n){void 0===e&&(e=t),void 0===n&&(n=1);let r=Math.min(t,e),o=this.zeros(t,e);for(let t=0;t<r;t++)o.set(t,t,n);return o}static diag(t,e,n){let r=t.length;void 0===e&&(e=r),void 0===n&&(n=e);let o=Math.min(r,e,n),i=this.zeros(e,n);for(let e=0;e<o;e++)i.set(e,e,t[e]);return i}static min(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);let n=t.rows,r=t.columns,o=new _t(n,r);for(let i=0;i<n;i++)for(let n=0;n<r;n++)o.set(i,n,Math.min(t.get(i,n),e.get(i,n)));return o}static max(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);let n=t.rows,r=t.columns,o=new this(n,r);for(let i=0;i<n;i++)for(let n=0;n<r;n++)o.set(i,n,Math.max(t.get(i,n),e.get(i,n)));return o}static checkMatrix(t){return xt.isMatrix(t)?t:new _t(t)}static isMatrix(t){return null!=t&&"Matrix"===t.klass}get size(){return this.rows*this.columns}apply(t){if("function"!=typeof t)throw new TypeError("callback must be a function");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)t.call(this,e,n);return this}to1DArray(){let t=[];for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)t.push(this.get(e,n));return t}to2DArray(){let t=[];for(let e=0;e<this.rows;e++){t.push([]);for(let n=0;n<this.columns;n++)t[e].push(this.get(e,n))}return t}toJSON(){return this.to2DArray()}isRowVector(){return 1===this.rows}isColumnVector(){return 1===this.columns}isVector(){return 1===this.rows||1===this.columns}isSquare(){return this.rows===this.columns}isEmpty(){return 0===this.rows||0===this.columns}isSymmetric(){if(this.isSquare()){for(let t=0;t<this.rows;t++)for(let e=0;e<=t;e++)if(this.get(t,e)!==this.get(e,t))return!1;return!0}return!1}isEchelonForm(){let t=0,e=0,n=-1,r=!0,o=!1;for(;t<this.rows&&r;){for(e=0,o=!1;e<this.columns&&!1===o;)0===this.get(t,e)?e++:1===this.get(t,e)&&e>n?(o=!0,n=e):(r=!1,o=!0);t++}return r}isReducedEchelonForm(){let t=0,e=0,n=-1,r=!0,o=!1;for(;t<this.rows&&r;){for(e=0,o=!1;e<this.columns&&!1===o;)0===this.get(t,e)?e++:1===this.get(t,e)&&e>n?(o=!0,n=e):(r=!1,o=!0);for(let n=e+1;n<this.rows;n++)0!==this.get(t,n)&&(r=!1);t++}return r}echelonForm(){let t=this.clone(),e=0,n=0;for(;e<t.rows&&n<t.columns;){let r=e;for(let o=e;o<t.rows;o++)t.get(o,n)>t.get(r,n)&&(r=o);if(0===t.get(r,n))n++;else{t.swapRows(e,r);let o=t.get(e,n);for(let r=n;r<t.columns;r++)t.set(e,r,t.get(e,r)/o);for(let r=e+1;r<t.rows;r++){let o=t.get(r,n)/t.get(e,n);t.set(r,n,0);for(let i=n+1;i<t.columns;i++)t.set(r,i,t.get(r,i)-t.get(e,i)*o)}e++,n++}}return t}reducedEchelonForm(){let t=this.echelonForm(),e=t.columns,n=t.rows,r=n-1;for(;r>=0;)if(0===t.maxRow(r))r--;else{let o=0,i=!1;for(;o<n&&!1===i;)1===t.get(r,o)?i=!0:o++;for(let n=0;n<r;n++){let i=t.get(n,o);for(let s=o;s<e;s++){let e=t.get(n,s)-i*t.get(r,s);t.set(n,s,e)}}r--}return t}set(){throw new Error("set method is unimplemented")}get(){throw new Error("get method is unimplemented")}repeat(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{rows:e=1,columns:n=1}=t;if(!Number.isInteger(e)||e<=0)throw new TypeError("rows must be a positive integer");if(!Number.isInteger(n)||n<=0)throw new TypeError("columns must be a positive integer");let r=new _t(this.rows*e,this.columns*n);for(let t=0;t<e;t++)for(let e=0;e<n;e++)r.setSubMatrix(this,this.rows*t,this.columns*e);return r}fill(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,t);return this}neg(){return this.mulS(-1)}getRow(t){ft(this,t);let e=[];for(let n=0;n<this.columns;n++)e.push(this.get(t,n));return e}getRowVector(t){return _t.rowVector(this.getRow(t))}setRow(t,e){ft(this,t),e=gt(this,e);for(let n=0;n<this.columns;n++)this.set(t,n,e[n]);return this}swapRows(t,e){ft(this,t),ft(this,e);for(let n=0;n<this.columns;n++){let r=this.get(t,n);this.set(t,n,this.get(e,n)),this.set(e,n,r)}return this}getColumn(t){ht(this,t);let e=[];for(let n=0;n<this.rows;n++)e.push(this.get(n,t));return e}getColumnVector(t){return _t.columnVector(this.getColumn(t))}setColumn(t,e){ht(this,t),e=pt(this,e);for(let n=0;n<this.rows;n++)this.set(n,t,e[n]);return this}swapColumns(t,e){ht(this,t),ht(this,e);for(let n=0;n<this.rows;n++){let r=this.get(n,t);this.set(n,t,this.get(n,e)),this.set(n,e,r)}return this}addRowVector(t){t=gt(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)+t[n]);return this}subRowVector(t){t=gt(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)-t[n]);return this}mulRowVector(t){t=gt(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)*t[n]);return this}divRowVector(t){t=gt(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)/t[n]);return this}addColumnVector(t){t=pt(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)+t[e]);return this}subColumnVector(t){t=pt(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)-t[e]);return this}mulColumnVector(t){t=pt(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)*t[e]);return this}divColumnVector(t){t=pt(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)/t[e]);return this}mulRow(t,e){ft(this,t);for(let n=0;n<this.columns;n++)this.set(t,n,this.get(t,n)*e);return this}mulColumn(t,e){ht(this,t);for(let n=0;n<this.rows;n++)this.set(n,t,this.get(n,t)*e);return this}max(){if(this.isEmpty())return NaN;let t=this.get(0,0);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.get(e,n)>t&&(t=this.get(e,n));return t}maxIndex(){bt(this);let t=this.get(0,0),e=[0,0];for(let n=0;n<this.rows;n++)for(let r=0;r<this.columns;r++)this.get(n,r)>t&&(t=this.get(n,r),e[0]=n,e[1]=r);return e}min(){if(this.isEmpty())return NaN;let t=this.get(0,0);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.get(e,n)<t&&(t=this.get(e,n));return t}minIndex(){bt(this);let t=this.get(0,0),e=[0,0];for(let n=0;n<this.rows;n++)for(let r=0;r<this.columns;r++)this.get(n,r)<t&&(t=this.get(n,r),e[0]=n,e[1]=r);return e}maxRow(t){if(ft(this,t),this.isEmpty())return NaN;let e=this.get(t,0);for(let n=1;n<this.columns;n++)this.get(t,n)>e&&(e=this.get(t,n));return e}maxRowIndex(t){ft(this,t),bt(this);let e=this.get(t,0),n=[t,0];for(let r=1;r<this.columns;r++)this.get(t,r)>e&&(e=this.get(t,r),n[1]=r);return n}minRow(t){if(ft(this,t),this.isEmpty())return NaN;let e=this.get(t,0);for(let n=1;n<this.columns;n++)this.get(t,n)<e&&(e=this.get(t,n));return e}minRowIndex(t){ft(this,t),bt(this);let e=this.get(t,0),n=[t,0];for(let r=1;r<this.columns;r++)this.get(t,r)<e&&(e=this.get(t,r),n[1]=r);return n}maxColumn(t){if(ht(this,t),this.isEmpty())return NaN;let e=this.get(0,t);for(let n=1;n<this.rows;n++)this.get(n,t)>e&&(e=this.get(n,t));return e}maxColumnIndex(t){ht(this,t),bt(this);let e=this.get(0,t),n=[0,t];for(let r=1;r<this.rows;r++)this.get(r,t)>e&&(e=this.get(r,t),n[0]=r);return n}minColumn(t){if(ht(this,t),this.isEmpty())return NaN;let e=this.get(0,t);for(let n=1;n<this.rows;n++)this.get(n,t)<e&&(e=this.get(n,t));return e}minColumnIndex(t){ht(this,t),bt(this);let e=this.get(0,t),n=[0,t];for(let r=1;r<this.rows;r++)this.get(r,t)<e&&(e=this.get(r,t),n[0]=r);return n}diag(){let t=Math.min(this.rows,this.columns),e=[];for(let n=0;n<t;n++)e.push(this.get(n,n));return e}norm(t="frobenius"){let e=0;if("max"===t)return this.max();if("frobenius"===t){for(let t=0;t<this.rows;t++)for(let n=0;n<this.columns;n++)e+=this.get(t,n)*this.get(t,n);return Math.sqrt(e)}throw new RangeError("unknown norm type: "+t)}cumulativeSum(){let t=0;for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)t+=this.get(e,n),this.set(e,n,t);return this}dot(t){xt.isMatrix(t)&&(t=t.to1DArray());let e=this.to1DArray();if(e.length!==t.length)throw new RangeError("vectors do not have the same size");let n=0;for(let r=0;r<e.length;r++)n+=e[r]*t[r];return n}mmul(t){t=_t.checkMatrix(t);let e=this.rows,n=this.columns,r=t.columns,o=new _t(e,r),i=new Float64Array(n);for(let s=0;s<r;s++){for(let e=0;e<n;e++)i[e]=t.get(e,s);for(let t=0;t<e;t++){let e=0;for(let r=0;r<n;r++)e+=this.get(t,r)*i[r];o.set(t,s,e)}}return o}strassen2x2(t){t=_t.checkMatrix(t);let e=new _t(2,2);const n=this.get(0,0),r=t.get(0,0),o=this.get(0,1),i=t.get(0,1),s=this.get(1,0),u=t.get(1,0),a=this.get(1,1),l=t.get(1,1),c=(n+a)*(r+l),f=(s+a)*r,h=n*(i-l),g=a*(u-r),p=(n+o)*l,m=c+g-p+(o-a)*(u+l),d=h+p,y=f+g,w=c-f+h+(s-n)*(r+i);return e.set(0,0,m),e.set(0,1,d),e.set(1,0,y),e.set(1,1,w),e}strassen3x3(t){t=_t.checkMatrix(t);let e=new _t(3,3);const n=this.get(0,0),r=this.get(0,1),o=this.get(0,2),i=this.get(1,0),s=this.get(1,1),u=this.get(1,2),a=this.get(2,0),l=this.get(2,1),c=this.get(2,2),f=t.get(0,0),h=t.get(0,1),g=t.get(0,2),p=t.get(1,0),m=t.get(1,1),d=t.get(1,2),y=t.get(2,0),w=t.get(2,1),v=t.get(2,2),b=(n-i)*(-h+m),x=(-n+i+s)*(f-h+m),M=(i+s)*(-f+h),_=n*f,S=(-n+a+l)*(f-g+d),E=(-n+a)*(g-d),k=(a+l)*(-f+g),A=(-o+l+c)*(m+y-w),$=(o-c)*(m-w),j=o*y,N=(l+c)*(-y+w),R=(-o+s+u)*(d+y-v),O=(o-u)*(d-v),T=(s+u)*(-y+v),q=_+j+r*p,P=(n+r+o-i-s-l-c)*m+x+M+_+A+j+N,C=_+S+k+(n+r+o-s-u-a-l)*d+j+R+T,I=b+s*(-f+h+p-m-d-y+v)+x+_+j+R+O,z=b+x+M+_+u*w,V=j+R+O+T+i*g,D=_+S+E+l*(-f+g+p-m-d-y+w)+A+$+j,F=A+$+j+N+a*h,B=_+S+E+k+c*v;return e.set(0,0,q),e.set(0,1,P),e.set(0,2,C),e.set(1,0,I),e.set(1,1,z),e.set(1,2,V),e.set(2,0,D),e.set(2,1,F),e.set(2,2,B),e}mmulStrassen(t){t=_t.checkMatrix(t);let e=this.clone(),n=e.rows,r=e.columns,o=t.rows,i=t.columns;function s(t,e,n){let r=t.rows,o=t.columns;if(r===e&&o===n)return t;{let r=xt.zeros(e,n);return r=r.setSubMatrix(t,0,0),r}}r!==o&&console.warn(`Multiplying ${n} x ${r} and ${o} x ${i} matrix: dimensions do not match.`);let u=Math.max(n,o),a=Math.max(r,i);return e=s(e,u,a),function t(e,n,r,o){if(r<=512||o<=512)return e.mmul(n);r%2==1&&o%2==1?(e=s(e,r+1,o+1),n=s(n,r+1,o+1)):r%2==1?(e=s(e,r+1,o),n=s(n,r+1,o)):o%2==1&&(e=s(e,r,o+1),n=s(n,r,o+1));let i=parseInt(e.rows/2,10),u=parseInt(e.columns/2,10),a=e.subMatrix(0,i-1,0,u-1),l=n.subMatrix(0,i-1,0,u-1),c=e.subMatrix(0,i-1,u,e.columns-1),f=n.subMatrix(0,i-1,u,n.columns-1),h=e.subMatrix(i,e.rows-1,0,u-1),g=n.subMatrix(i,n.rows-1,0,u-1),p=e.subMatrix(i,e.rows-1,u,e.columns-1),m=n.subMatrix(i,n.rows-1,u,n.columns-1),d=t(xt.add(a,p),xt.add(l,m),i,u),y=t(xt.add(h,p),l,i,u),w=t(a,xt.sub(f,m),i,u),v=t(p,xt.sub(g,l),i,u),b=t(xt.add(a,c),m,i,u),x=t(xt.sub(h,a),xt.add(l,f),i,u),M=t(xt.sub(c,p),xt.add(g,m),i,u),_=xt.add(d,v);_.sub(b),_.add(M);let S=xt.add(w,b),E=xt.add(y,v),k=xt.sub(d,y);k.add(w),k.add(x);let A=xt.zeros(2*_.rows,2*_.columns);return A=A.setSubMatrix(_,0,0),A=A.setSubMatrix(S,_.rows,0),A=A.setSubMatrix(E,0,_.columns),A=A.setSubMatrix(k,_.rows,_.columns),A.subMatrix(0,r-1,0,o-1)}(e,t=s(t,u,a),u,a)}scaleRows(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{min:e=0,max:n=1}=t;if(!Number.isFinite(e))throw new TypeError("min must be a number");if(!Number.isFinite(n))throw new TypeError("max must be a number");if(e>=n)throw new RangeError("min must be smaller than max");let r=new _t(this.rows,this.columns);for(let t=0;t<this.rows;t++){const o=this.getRow(t);o.length>0&&st(o,{min:e,max:n,output:o}),r.setRow(t,o)}return r}scaleColumns(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{min:e=0,max:n=1}=t;if(!Number.isFinite(e))throw new TypeError("min must be a number");if(!Number.isFinite(n))throw new TypeError("max must be a number");if(e>=n)throw new RangeError("min must be smaller than max");let r=new _t(this.rows,this.columns);for(let t=0;t<this.columns;t++){const o=this.getColumn(t);o.length&&st(o,{min:e,max:n,output:o}),r.setColumn(t,o)}return r}flipRows(){const t=Math.ceil(this.columns/2);for(let e=0;e<this.rows;e++)for(let n=0;n<t;n++){let t=this.get(e,n),r=this.get(e,this.columns-1-n);this.set(e,n,r),this.set(e,this.columns-1-n,t)}return this}flipColumns(){const t=Math.ceil(this.rows/2);for(let e=0;e<this.columns;e++)for(let n=0;n<t;n++){let t=this.get(n,e),r=this.get(this.rows-1-n,e);this.set(n,e,r),this.set(this.rows-1-n,e,t)}return this}kroneckerProduct(t){t=_t.checkMatrix(t);let e=this.rows,n=this.columns,r=t.rows,o=t.columns,i=new _t(e*r,n*o);for(let s=0;s<e;s++)for(let e=0;e<n;e++)for(let n=0;n<r;n++)for(let u=0;u<o;u++)i.set(r*s+n,o*e+u,this.get(s,e)*t.get(n,u));return i}kroneckerSum(t){if(t=_t.checkMatrix(t),!this.isSquare()||!t.isSquare())throw new Error("Kronecker Sum needs two Square Matrices");let e=this.rows,n=t.rows,r=this.kroneckerProduct(_t.eye(n,n)),o=_t.eye(e,e).kroneckerProduct(t);return r.add(o)}transpose(){let t=new _t(this.columns,this.rows);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)t.set(n,e,this.get(e,n));return t}sortRows(t=Mt){for(let e=0;e<this.rows;e++)this.setRow(e,this.getRow(e).sort(t));return this}sortColumns(t=Mt){for(let e=0;e<this.columns;e++)this.setColumn(e,this.getColumn(e).sort(t));return this}subMatrix(t,e,n,r){yt(this,t,e,n,r);let o=new _t(e-t+1,r-n+1);for(let i=t;i<=e;i++)for(let e=n;e<=r;e++)o.set(i-t,e-n,this.get(i,e));return o}subMatrixRow(t,e,n){if(void 0===e&&(e=0),void 0===n&&(n=this.columns-1),e>n||e<0||e>=this.columns||n<0||n>=this.columns)throw new RangeError("Argument out of range");let r=new _t(t.length,n-e+1);for(let o=0;o<t.length;o++)for(let i=e;i<=n;i++){if(t[o]<0||t[o]>=this.rows)throw new RangeError("Row index out of range: "+t[o]);r.set(o,i-e,this.get(t[o],i))}return r}subMatrixColumn(t,e,n){if(void 0===e&&(e=0),void 0===n&&(n=this.rows-1),e>n||e<0||e>=this.rows||n<0||n>=this.rows)throw new RangeError("Argument out of range");let r=new _t(n-e+1,t.length);for(let o=0;o<t.length;o++)for(let i=e;i<=n;i++){if(t[o]<0||t[o]>=this.columns)throw new RangeError("Column index out of range: "+t[o]);r.set(i-e,o,this.get(i,t[o]))}return r}setSubMatrix(t,e,n){if((t=_t.checkMatrix(t)).isEmpty())return this;yt(this,e,e+t.rows-1,n,n+t.columns-1);for(let r=0;r<t.rows;r++)for(let o=0;o<t.columns;o++)this.set(e+r,n+o,t.get(r,o));return this}selection(t,e){let n=function(t,e,n){return{row:mt(t,e),column:dt(t,n)}}(this,t,e),r=new _t(t.length,e.length);for(let t=0;t<n.row.length;t++){let e=n.row[t];for(let o=0;o<n.column.length;o++){let i=n.column[o];r.set(t,o,this.get(e,i))}}return r}trace(){let t=Math.min(this.rows,this.columns),e=0;for(let n=0;n<t;n++)e+=this.get(n,n);return e}clone(){let t=new _t(this.rows,this.columns);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)t.set(e,n,this.get(e,n));return t}sum(t){switch(t){case"row":return function(t){let e=wt(t.rows);for(let n=0;n<t.rows;++n)for(let r=0;r<t.columns;++r)e[n]+=t.get(n,r);return e}(this);case"column":return function(t){let e=wt(t.columns);for(let n=0;n<t.rows;++n)for(let r=0;r<t.columns;++r)e[r]+=t.get(n,r);return e}(this);case void 0:return function(t){let e=0;for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)e+=t.get(n,r);return e}(this);default:throw new Error("invalid option: "+t)}}product(t){switch(t){case"row":return function(t){let e=wt(t.rows,1);for(let n=0;n<t.rows;++n)for(let r=0;r<t.columns;++r)e[n]*=t.get(n,r);return e}(this);case"column":return function(t){let e=wt(t.columns,1);for(let n=0;n<t.rows;++n)for(let r=0;r<t.columns;++r)e[r]*=t.get(n,r);return e}(this);case void 0:return function(t){let e=1;for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)e*=t.get(n,r);return e}(this);default:throw new Error("invalid option: "+t)}}mean(t){const e=this.sum(t);switch(t){case"row":for(let t=0;t<this.rows;t++)e[t]/=this.columns;return e;case"column":for(let t=0;t<this.columns;t++)e[t]/=this.rows;return e;case void 0:return e/this.size;default:throw new Error("invalid option: "+t)}}variance(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");const{unbiased:n=!0,mean:r=this.mean(t)}=e;if("boolean"!=typeof n)throw new TypeError("unbiased must be a boolean");switch(t){case"row":if(!Array.isArray(r))throw new TypeError("mean must be an array");return function(t,e,n){const r=t.rows,o=t.columns,i=[];for(let s=0;s<r;s++){let r=0,u=0,a=0;for(let e=0;e<o;e++)a=t.get(s,e)-n[s],r+=a,u+=a*a;e?i.push((u-r*r/o)/(o-1)):i.push((u-r*r/o)/o)}return i}(this,n,r);case"column":if(!Array.isArray(r))throw new TypeError("mean must be an array");return function(t,e,n){const r=t.rows,o=t.columns,i=[];for(let s=0;s<o;s++){let o=0,u=0,a=0;for(let e=0;e<r;e++)a=t.get(e,s)-n[s],o+=a,u+=a*a;e?i.push((u-o*o/r)/(r-1)):i.push((u-o*o/r)/r)}return i}(this,n,r);case void 0:if("number"!=typeof r)throw new TypeError("mean must be a number");return function(t,e,n){const r=t.rows,o=t.columns,i=r*o;let s=0,u=0,a=0;for(let e=0;e<r;e++)for(let r=0;r<o;r++)a=t.get(e,r)-n,s+=a,u+=a*a;return e?(u-s*s/i)/(i-1):(u-s*s/i)/i}(this,n,r);default:throw new Error("invalid option: "+t)}}standardDeviation(t,e){"object"==typeof t&&(e=t,t=void 0);const n=this.variance(t,e);if(void 0===t)return Math.sqrt(n);for(let t=0;t<n.length;t++)n[t]=Math.sqrt(n[t]);return n}center(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");const{center:n=this.mean(t)}=e;switch(t){case"row":if(!Array.isArray(n))throw new TypeError("center must be an array");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)-e[n])}(this,n),this;case"column":if(!Array.isArray(n))throw new TypeError("center must be an array");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)-e[r])}(this,n),this;case void 0:if("number"!=typeof n)throw new TypeError("center must be a number");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)-e)}(this,n),this;default:throw new Error("invalid option: "+t)}}scale(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");let n=e.scale;switch(t){case"row":if(void 0===n)n=function(t){const e=[];for(let n=0;n<t.rows;n++){let r=0;for(let e=0;e<t.columns;e++)r+=Math.pow(t.get(n,e),2)/(t.columns-1);e.push(Math.sqrt(r))}return e}(this);else if(!Array.isArray(n))throw new TypeError("scale must be an array");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)/e[n])}(this,n),this;case"column":if(void 0===n)n=function(t){const e=[];for(let n=0;n<t.columns;n++){let r=0;for(let e=0;e<t.rows;e++)r+=Math.pow(t.get(e,n),2)/(t.rows-1);e.push(Math.sqrt(r))}return e}(this);else if(!Array.isArray(n))throw new TypeError("scale must be an array");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)/e[r])}(this,n),this;case void 0:if(void 0===n)n=function(t){const e=t.size-1;let n=0;for(let r=0;r<t.columns;r++)for(let o=0;o<t.rows;o++)n+=Math.pow(t.get(o,r),2)/e;return Math.sqrt(n)}(this);else if("number"!=typeof n)throw new TypeError("scale must be a number");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)/e)}(this,n),this;default:throw new Error("invalid option: "+t)}}toString(t){return lt(this,t)}}function Mt(t,e){return t-e}xt.prototype.klass="Matrix","undefined"!=typeof Symbol&&(xt.prototype[Symbol.for("nodejs.util.inspect.custom")]=function(){return lt(this)}),xt.random=xt.rand,xt.randomInt=xt.randInt,xt.diagonal=xt.diag,xt.prototype.diagonal=xt.prototype.diag,xt.identity=xt.eye,xt.prototype.negate=xt.prototype.neg,xt.prototype.tensorProduct=xt.prototype.kroneckerProduct;class _t extends xt{constructor(t,e){if(super(),_t.isMatrix(t))return t.clone();if(Number.isInteger(t)&&t>=0){if(this.data=[],!(Number.isInteger(e)&&e>=0))throw new TypeError("nColumns must be a positive integer");for(let n=0;n<t;n++)this.data.push(new Float64Array(e))}else{if(!Array.isArray(t))throw new TypeError("First argument must be a positive number or an array");{const n=t;if("number"!=typeof(e=(t=n.length)?n[0].length:0))throw new TypeError("Data must be a 2D array with at least one element");this.data=[];for(let r=0;r<t;r++){if(n[r].length!==e)throw new RangeError("Inconsistent array dimensions");this.data.push(Float64Array.from(n[r]))}}}this.rows=t,this.columns=e}set(t,e,n){return this.data[t][e]=n,this}get(t,e){return this.data[t][e]}removeRow(t){return ft(this,t),this.data.splice(t,1),this.rows-=1,this}addRow(t,e){return void 0===e&&(e=t,t=this.rows),ft(this,t,!0),e=Float64Array.from(gt(this,e)),this.data.splice(t,0,e),this.rows+=1,this}removeColumn(t){ht(this,t);for(let e=0;e<this.rows;e++){const n=new Float64Array(this.columns-1);for(let r=0;r<t;r++)n[r]=this.data[e][r];for(let r=t+1;r<this.columns;r++)n[r-1]=this.data[e][r];this.data[e]=n}return this.columns-=1,this}addColumn(t,e){void 0===e&&(e=t,t=this.columns),ht(this,t,!0),e=pt(this,e);for(let n=0;n<this.rows;n++){const r=new Float64Array(this.columns+1);let o=0;for(;o<t;o++)r[o]=this.data[n][o];for(r[o++]=e[n];o<this.columns+1;o++)r[o]=this.data[n][o-1];this.data[n]=r}return this.columns+=1,this}}var St,Et;Et=_t,(St=xt).prototype.add=function(t){return"number"==typeof t?this.addS(t):this.addM(t)},St.prototype.addS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)+t);return this},St.prototype.addM=function(t){if(t=Et.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)+t.get(e,n));return this},St.add=function(t,e){return new Et(t).add(e)},St.prototype.sub=function(t){return"number"==typeof t?this.subS(t):this.subM(t)},St.prototype.subS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)-t);return this},St.prototype.subM=function(t){if(t=Et.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)-t.get(e,n));return this},St.sub=function(t,e){return new Et(t).sub(e)},St.prototype.subtract=St.prototype.sub,St.prototype.subtractS=St.prototype.subS,St.prototype.subtractM=St.prototype.subM,St.subtract=St.sub,St.prototype.mul=function(t){return"number"==typeof t?this.mulS(t):this.mulM(t)},St.prototype.mulS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)*t);return this},St.prototype.mulM=function(t){if(t=Et.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)*t.get(e,n));return this},St.mul=function(t,e){return new Et(t).mul(e)},St.prototype.multiply=St.prototype.mul,St.prototype.multiplyS=St.prototype.mulS,St.prototype.multiplyM=St.prototype.mulM,St.multiply=St.mul,St.prototype.div=function(t){return"number"==typeof t?this.divS(t):this.divM(t)},St.prototype.divS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)/t);return this},St.prototype.divM=function(t){if(t=Et.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)/t.get(e,n));return this},St.div=function(t,e){return new Et(t).div(e)},St.prototype.divide=St.prototype.div,St.prototype.divideS=St.prototype.divS,St.prototype.divideM=St.prototype.divM,St.divide=St.div,St.prototype.mod=function(t){return"number"==typeof t?this.modS(t):this.modM(t)},St.prototype.modS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)%t);return this},St.prototype.modM=function(t){if(t=Et.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)%t.get(e,n));return this},St.mod=function(t,e){return new Et(t).mod(e)},St.prototype.modulus=St.prototype.mod,St.prototype.modulusS=St.prototype.modS,St.prototype.modulusM=St.prototype.modM,St.modulus=St.mod,St.prototype.and=function(t){return"number"==typeof t?this.andS(t):this.andM(t)},St.prototype.andS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)&t);return this},St.prototype.andM=function(t){if(t=Et.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)&t.get(e,n));return this},St.and=function(t,e){return new Et(t).and(e)},St.prototype.or=function(t){return"number"==typeof t?this.orS(t):this.orM(t)},St.prototype.orS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)|t);return this},St.prototype.orM=function(t){if(t=Et.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)|t.get(e,n));return this},St.or=function(t,e){return new Et(t).or(e)},St.prototype.xor=function(t){return"number"==typeof t?this.xorS(t):this.xorM(t)},St.prototype.xorS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)^t);return this},St.prototype.xorM=function(t){if(t=Et.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)^t.get(e,n));return this},St.xor=function(t,e){return new Et(t).xor(e)},St.prototype.leftShift=function(t){return"number"==typeof t?this.leftShiftS(t):this.leftShiftM(t)},St.prototype.leftShiftS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)<<t);return this},St.prototype.leftShiftM=function(t){if(t=Et.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)<<t.get(e,n));return this},St.leftShift=function(t,e){return new Et(t).leftShift(e)},St.prototype.signPropagatingRightShift=function(t){return"number"==typeof t?this.signPropagatingRightShiftS(t):this.signPropagatingRightShiftM(t)},St.prototype.signPropagatingRightShiftS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)>>t);return this},St.prototype.signPropagatingRightShiftM=function(t){if(t=Et.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)>>t.get(e,n));return this},St.signPropagatingRightShift=function(t,e){return new Et(t).signPropagatingRightShift(e)},St.prototype.rightShift=function(t){return"number"==typeof t?this.rightShiftS(t):this.rightShiftM(t)},St.prototype.rightShiftS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)>>>t);return this},St.prototype.rightShiftM=function(t){if(t=Et.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)>>>t.get(e,n));return this},St.rightShift=function(t,e){return new Et(t).rightShift(e)},St.prototype.zeroFillRightShift=St.prototype.rightShift,St.prototype.zeroFillRightShiftS=St.prototype.rightShiftS,St.prototype.zeroFillRightShiftM=St.prototype.rightShiftM,St.zeroFillRightShift=St.rightShift,St.prototype.not=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,~this.get(t,e));return this},St.not=function(t){return new Et(t).not()},St.prototype.abs=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.abs(this.get(t,e)));return this},St.abs=function(t){return new Et(t).abs()},St.prototype.acos=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.acos(this.get(t,e)));return this},St.acos=function(t){return new Et(t).acos()},St.prototype.acosh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.acosh(this.get(t,e)));return this},St.acosh=function(t){return new Et(t).acosh()},St.prototype.asin=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.asin(this.get(t,e)));return this},St.asin=function(t){return new Et(t).asin()},St.prototype.asinh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.asinh(this.get(t,e)));return this},St.asinh=function(t){return new Et(t).asinh()},St.prototype.atan=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.atan(this.get(t,e)));return this},St.atan=function(t){return new Et(t).atan()},St.prototype.atanh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.atanh(this.get(t,e)));return this},St.atanh=function(t){return new Et(t).atanh()},St.prototype.cbrt=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cbrt(this.get(t,e)));return this},St.cbrt=function(t){return new Et(t).cbrt()},St.prototype.ceil=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.ceil(this.get(t,e)));return this},St.ceil=function(t){return new Et(t).ceil()},St.prototype.clz32=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.clz32(this.get(t,e)));return this},St.clz32=function(t){return new Et(t).clz32()},St.prototype.cos=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cos(this.get(t,e)));return this},St.cos=function(t){return new Et(t).cos()},St.prototype.cosh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cosh(this.get(t,e)));return this},St.cosh=function(t){return new Et(t).cosh()},St.prototype.exp=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.exp(this.get(t,e)));return this},St.exp=function(t){return new Et(t).exp()},St.prototype.expm1=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.expm1(this.get(t,e)));return this},St.expm1=function(t){return new Et(t).expm1()},St.prototype.floor=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.floor(this.get(t,e)));return this},St.floor=function(t){return new Et(t).floor()},St.prototype.fround=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.fround(this.get(t,e)));return this},St.fround=function(t){return new Et(t).fround()},St.prototype.log=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log(this.get(t,e)));return this},St.log=function(t){return new Et(t).log()},St.prototype.log1p=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log1p(this.get(t,e)));return this},St.log1p=function(t){return new Et(t).log1p()},St.prototype.log10=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log10(this.get(t,e)));return this},St.log10=function(t){return new Et(t).log10()},St.prototype.log2=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log2(this.get(t,e)));return this},St.log2=function(t){return new Et(t).log2()},St.prototype.round=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.round(this.get(t,e)));return this},St.round=function(t){return new Et(t).round()},St.prototype.sign=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sign(this.get(t,e)));return this},St.sign=function(t){return new Et(t).sign()},St.prototype.sin=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sin(this.get(t,e)));return this},St.sin=function(t){return new Et(t).sin()},St.prototype.sinh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sinh(this.get(t,e)));return this},St.sinh=function(t){return new Et(t).sinh()},St.prototype.sqrt=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sqrt(this.get(t,e)));return this},St.sqrt=function(t){return new Et(t).sqrt()},St.prototype.tan=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.tan(this.get(t,e)));return this},St.tan=function(t){return new Et(t).tan()},St.prototype.tanh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.tanh(this.get(t,e)));return this},St.tanh=function(t){return new Et(t).tanh()},St.prototype.trunc=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.trunc(this.get(t,e)));return this},St.trunc=function(t){return new Et(t).trunc()},St.pow=function(t,e){return new Et(t).pow(e)},St.prototype.pow=function(t){return"number"==typeof t?this.powS(t):this.powM(t)},St.prototype.powS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,Math.pow(this.get(e,n),t));return this},St.prototype.powM=function(t){if(t=Et.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,Math.pow(this.get(e,n),t.get(e,n)));return this};class kt extends xt{constructor(t){super(),this.data=t,this.rows=t.length,this.columns=t[0].length}set(t,e,n){return this.data[t][e]=n,this}get(t,e){return this.data[t][e]}}class At{constructor(t){let e,n,r,o,i,s,u,a,l,c=(t=kt.checkMatrix(t)).clone(),f=c.rows,h=c.columns,g=new Float64Array(f),p=1;for(e=0;e<f;e++)g[e]=e;for(a=new Float64Array(f),n=0;n<h;n++){for(e=0;e<f;e++)a[e]=c.get(e,n);for(e=0;e<f;e++){for(l=Math.min(e,n),i=0,r=0;r<l;r++)i+=c.get(e,r)*a[r];a[e]-=i,c.set(e,n,a[e])}for(o=n,e=n+1;e<f;e++)Math.abs(a[e])>Math.abs(a[o])&&(o=e);if(o!==n){for(r=0;r<h;r++)s=c.get(o,r),c.set(o,r,c.get(n,r)),c.set(n,r,s);u=g[o],g[o]=g[n],g[n]=u,p=-p}if(n<f&&0!==c.get(n,n))for(e=n+1;e<f;e++)c.set(e,n,c.get(e,n)/c.get(n,n))}this.LU=c,this.pivotVector=g,this.pivotSign=p}isSingular(){let t=this.LU,e=t.columns;for(let n=0;n<e;n++)if(0===t.get(n,n))return!0;return!1}solve(t){t=_t.checkMatrix(t);let e=this.LU;if(e.rows!==t.rows)throw new Error("Invalid matrix dimensions");if(this.isSingular())throw new Error("LU matrix is singular");let n,r,o,i=t.columns,s=t.subMatrixRow(this.pivotVector,0,i-1),u=e.columns;for(o=0;o<u;o++)for(n=o+1;n<u;n++)for(r=0;r<i;r++)s.set(n,r,s.get(n,r)-s.get(o,r)*e.get(n,o));for(o=u-1;o>=0;o--){for(r=0;r<i;r++)s.set(o,r,s.get(o,r)/e.get(o,o));for(n=0;n<o;n++)for(r=0;r<i;r++)s.set(n,r,s.get(n,r)-s.get(o,r)*e.get(n,o))}return s}get determinant(){let t=this.LU;if(!t.isSquare())throw new Error("Matrix must be square");let e=this.pivotSign,n=t.columns;for(let r=0;r<n;r++)e*=t.get(r,r);return e}get lowerTriangularMatrix(){let t=this.LU,e=t.rows,n=t.columns,r=new _t(e,n);for(let o=0;o<e;o++)for(let e=0;e<n;e++)o>e?r.set(o,e,t.get(o,e)):o===e?r.set(o,e,1):r.set(o,e,0);return r}get upperTriangularMatrix(){let t=this.LU,e=t.rows,n=t.columns,r=new _t(e,n);for(let o=0;o<e;o++)for(let e=0;e<n;e++)o<=e?r.set(o,e,t.get(o,e)):r.set(o,e,0);return r}get pivotPermutationVector(){return Array.from(this.pivotVector)}}function $t(t,e){let n=0;return Math.abs(t)>Math.abs(e)?(n=e/t,Math.abs(t)*Math.sqrt(1+n*n)):0!==e?(n=t/e,Math.abs(e)*Math.sqrt(1+n*n)):0}class jt{constructor(t){let e,n,r,o,i=(t=kt.checkMatrix(t)).clone(),s=t.rows,u=t.columns,a=new Float64Array(u);for(r=0;r<u;r++){let t=0;for(e=r;e<s;e++)t=$t(t,i.get(e,r));if(0!==t){for(i.get(r,r)<0&&(t=-t),e=r;e<s;e++)i.set(e,r,i.get(e,r)/t);for(i.set(r,r,i.get(r,r)+1),n=r+1;n<u;n++){for(o=0,e=r;e<s;e++)o+=i.get(e,r)*i.get(e,n);for(o=-o/i.get(r,r),e=r;e<s;e++)i.set(e,n,i.get(e,n)+o*i.get(e,r))}}a[r]=-t}this.QR=i,this.Rdiag=a}solve(t){t=_t.checkMatrix(t);let e=this.QR,n=e.rows;if(t.rows!==n)throw new Error("Matrix row dimensions must agree");if(!this.isFullRank())throw new Error("Matrix is rank deficient");let r,o,i,s,u=t.columns,a=t.clone(),l=e.columns;for(i=0;i<l;i++)for(o=0;o<u;o++){for(s=0,r=i;r<n;r++)s+=e.get(r,i)*a.get(r,o);for(s=-s/e.get(i,i),r=i;r<n;r++)a.set(r,o,a.get(r,o)+s*e.get(r,i))}for(i=l-1;i>=0;i--){for(o=0;o<u;o++)a.set(i,o,a.get(i,o)/this.Rdiag[i]);for(r=0;r<i;r++)for(o=0;o<u;o++)a.set(r,o,a.get(r,o)-a.get(i,o)*e.get(r,i))}return a.subMatrix(0,l-1,0,u-1)}isFullRank(){let t=this.QR.columns;for(let e=0;e<t;e++)if(0===this.Rdiag[e])return!1;return!0}get upperTriangularMatrix(){let t,e,n=this.QR,r=n.columns,o=new _t(r,r);for(t=0;t<r;t++)for(e=0;e<r;e++)t<e?o.set(t,e,n.get(t,e)):t===e?o.set(t,e,this.Rdiag[t]):o.set(t,e,0);return o}get orthogonalMatrix(){let t,e,n,r,o=this.QR,i=o.rows,s=o.columns,u=new _t(i,s);for(n=s-1;n>=0;n--){for(t=0;t<i;t++)u.set(t,n,0);for(u.set(n,n,1),e=n;e<s;e++)if(0!==o.get(n,n)){for(r=0,t=n;t<i;t++)r+=o.get(t,n)*u.get(t,e);for(r=-r/o.get(n,n),t=n;t<i;t++)u.set(t,e,u.get(t,e)+r*o.get(t,n))}}return u}}class Nt{constructor(t,e={}){if((t=kt.checkMatrix(t)).isEmpty())throw new Error("Matrix must be non-empty");let n=t.rows,r=t.columns;const{computeLeftSingularVectors:o=!0,computeRightSingularVectors:i=!0,autoTranspose:s=!1}=e;let u,a=Boolean(o),l=Boolean(i),c=!1;if(n<r)if(s){u=t.transpose(),n=u.rows,r=u.columns,c=!0;let e=a;a=l,l=e}else u=t.clone(),console.warn("Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose");else u=t.clone();let f=Math.min(n,r),h=Math.min(n+1,r),g=new Float64Array(h),p=new _t(n,f),m=new _t(r,r),d=new Float64Array(r),y=new Float64Array(n),w=new Float64Array(h);for(let t=0;t<h;t++)w[t]=t;let v=Math.min(n-1,r),b=Math.max(0,Math.min(r-2,n)),x=Math.max(v,b);for(let t=0;t<x;t++){if(t<v){g[t]=0;for(let e=t;e<n;e++)g[t]=$t(g[t],u.get(e,t));if(0!==g[t]){u.get(t,t)<0&&(g[t]=-g[t]);for(let e=t;e<n;e++)u.set(e,t,u.get(e,t)/g[t]);u.set(t,t,u.get(t,t)+1)}g[t]=-g[t]}for(let e=t+1;e<r;e++){if(t<v&&0!==g[t]){let r=0;for(let o=t;o<n;o++)r+=u.get(o,t)*u.get(o,e);r=-r/u.get(t,t);for(let o=t;o<n;o++)u.set(o,e,u.get(o,e)+r*u.get(o,t))}d[e]=u.get(t,e)}if(a&&t<v)for(let e=t;e<n;e++)p.set(e,t,u.get(e,t));if(t<b){d[t]=0;for(let e=t+1;e<r;e++)d[t]=$t(d[t],d[e]);if(0!==d[t]){d[t+1]<0&&(d[t]=0-d[t]);for(let e=t+1;e<r;e++)d[e]/=d[t];d[t+1]+=1}if(d[t]=-d[t],t+1<n&&0!==d[t]){for(let e=t+1;e<n;e++)y[e]=0;for(let e=t+1;e<n;e++)for(let n=t+1;n<r;n++)y[e]+=d[n]*u.get(e,n);for(let e=t+1;e<r;e++){let r=-d[e]/d[t+1];for(let o=t+1;o<n;o++)u.set(o,e,u.get(o,e)+r*y[o])}}if(l)for(let e=t+1;e<r;e++)m.set(e,t,d[e])}}let M=Math.min(r,n+1);if(v<r&&(g[v]=u.get(v,v)),n<M&&(g[M-1]=0),b+1<M&&(d[b]=u.get(b,M-1)),d[M-1]=0,a){for(let t=v;t<f;t++){for(let e=0;e<n;e++)p.set(e,t,0);p.set(t,t,1)}for(let t=v-1;t>=0;t--)if(0!==g[t]){for(let e=t+1;e<f;e++){let r=0;for(let o=t;o<n;o++)r+=p.get(o,t)*p.get(o,e);r=-r/p.get(t,t);for(let o=t;o<n;o++)p.set(o,e,p.get(o,e)+r*p.get(o,t))}for(let e=t;e<n;e++)p.set(e,t,-p.get(e,t));p.set(t,t,1+p.get(t,t));for(let e=0;e<t-1;e++)p.set(e,t,0)}else{for(let e=0;e<n;e++)p.set(e,t,0);p.set(t,t,1)}}if(l)for(let t=r-1;t>=0;t--){if(t<b&&0!==d[t])for(let e=t+1;e<r;e++){let n=0;for(let o=t+1;o<r;o++)n+=m.get(o,t)*m.get(o,e);n=-n/m.get(t+1,t);for(let o=t+1;o<r;o++)m.set(o,e,m.get(o,e)+n*m.get(o,t))}for(let e=0;e<r;e++)m.set(e,t,0);m.set(t,t,1)}let _=M-1,S=0,E=Number.EPSILON;for(;M>0;){let t,e;for(t=M-2;t>=-1&&-1!==t;t--){const e=Number.MIN_VALUE+E*Math.abs(g[t]+Math.abs(g[t+1]));if(Math.abs(d[t])<=e||Number.isNaN(d[t])){d[t]=0;break}}if(t===M-2)e=4;else{let n;for(n=M-1;n>=t&&n!==t;n--){let e=(n!==M?Math.abs(d[n]):0)+(n!==t+1?Math.abs(d[n-1]):0);if(Math.abs(g[n])<=E*e){g[n]=0;break}}n===t?e=3:n===M-1?e=1:(e=2,t=n)}switch(t++,e){case 1:{let e=d[M-2];d[M-2]=0;for(let n=M-2;n>=t;n--){let o=$t(g[n],e),i=g[n]/o,s=e/o;if(g[n]=o,n!==t&&(e=-s*d[n-1],d[n-1]=i*d[n-1]),l)for(let t=0;t<r;t++)o=i*m.get(t,n)+s*m.get(t,M-1),m.set(t,M-1,-s*m.get(t,n)+i*m.get(t,M-1)),m.set(t,n,o)}break}case 2:{let e=d[t-1];d[t-1]=0;for(let r=t;r<M;r++){let o=$t(g[r],e),i=g[r]/o,s=e/o;if(g[r]=o,e=-s*d[r],d[r]=i*d[r],a)for(let e=0;e<n;e++)o=i*p.get(e,r)+s*p.get(e,t-1),p.set(e,t-1,-s*p.get(e,r)+i*p.get(e,t-1)),p.set(e,r,o)}break}case 3:{const e=Math.max(Math.abs(g[M-1]),Math.abs(g[M-2]),Math.abs(d[M-2]),Math.abs(g[t]),Math.abs(d[t])),o=g[M-1]/e,i=g[M-2]/e,s=d[M-2]/e,u=g[t]/e,c=d[t]/e,f=((i+o)*(i-o)+s*s)/2,h=o*s*(o*s);let y=0;0===f&&0===h||(y=f<0?0-Math.sqrt(f*f+h):Math.sqrt(f*f+h),y=h/(f+y));let w=(u+o)*(u-o)+y,v=u*c;for(let e=t;e<M-1;e++){let o=$t(w,v);0===o&&(o=Number.MIN_VALUE);let i=w/o,s=v/o;if(e!==t&&(d[e-1]=o),w=i*g[e]+s*d[e],d[e]=i*d[e]-s*g[e],v=s*g[e+1],g[e+1]=i*g[e+1],l)for(let t=0;t<r;t++)o=i*m.get(t,e)+s*m.get(t,e+1),m.set(t,e+1,-s*m.get(t,e)+i*m.get(t,e+1)),m.set(t,e,o);if(o=$t(w,v),0===o&&(o=Number.MIN_VALUE),i=w/o,s=v/o,g[e]=o,w=i*d[e]+s*g[e+1],g[e+1]=-s*d[e]+i*g[e+1],v=s*d[e+1],d[e+1]=i*d[e+1],a&&e<n-1)for(let t=0;t<n;t++)o=i*p.get(t,e)+s*p.get(t,e+1),p.set(t,e+1,-s*p.get(t,e)+i*p.get(t,e+1)),p.set(t,e,o)}d[M-2]=w,S+=1;break}case 4:if(g[t]<=0&&(g[t]=g[t]<0?-g[t]:0,l))for(let e=0;e<=_;e++)m.set(e,t,-m.get(e,t));for(;t<_&&!(g[t]>=g[t+1]);){let e=g[t];if(g[t]=g[t+1],g[t+1]=e,l&&t<r-1)for(let n=0;n<r;n++)e=m.get(n,t+1),m.set(n,t+1,m.get(n,t)),m.set(n,t,e);if(a&&t<n-1)for(let r=0;r<n;r++)e=p.get(r,t+1),p.set(r,t+1,p.get(r,t)),p.set(r,t,e);t++}S=0,M--}}if(c){let t=m;m=p,p=t}this.m=n,this.n=r,this.s=g,this.U=p,this.V=m}solve(t){let e=t,n=this.threshold,r=this.s.length,o=_t.zeros(r,r);for(let t=0;t<r;t++)Math.abs(this.s[t])<=n?o.set(t,t,0):o.set(t,t,1/this.s[t]);let i=this.U,s=this.rightSingularVectors,u=s.mmul(o),a=s.rows,l=i.rows,c=_t.zeros(a,l);for(let t=0;t<a;t++)for(let e=0;e<l;e++){let n=0;for(let o=0;o<r;o++)n+=u.get(t,o)*i.get(e,o);c.set(t,e,n)}return c.mmul(e)}solveForDiagonal(t){return this.solve(_t.diag(t))}inverse(){let t=this.V,e=this.threshold,n=t.rows,r=t.columns,o=new _t(n,this.s.length);for(let i=0;i<n;i++)for(let n=0;n<r;n++)Math.abs(this.s[n])>e&&o.set(i,n,t.get(i,n)/this.s[n]);let i=this.U,s=i.rows,u=i.columns,a=new _t(n,s);for(let t=0;t<n;t++)for(let e=0;e<s;e++){let n=0;for(let r=0;r<u;r++)n+=o.get(t,r)*i.get(e,r);a.set(t,e,n)}return a}get condition(){return this.s[0]/this.s[Math.min(this.m,this.n)-1]}get norm2(){return this.s[0]}get rank(){let t=Math.max(this.m,this.n)*this.s[0]*Number.EPSILON,e=0,n=this.s;for(let r=0,o=n.length;r<o;r++)n[r]>t&&e++;return e}get diagonal(){return Array.from(this.s)}get threshold(){return Number.EPSILON/2*Math.max(this.m,this.n)*this.s[0]}get leftSingularVectors(){return this.U}get rightSingularVectors(){return this.V}get diagonalMatrix(){return _t.diag(this.s)}}function Rt(t,e=!1){return t=kt.checkMatrix(t),e?new Nt(t).inverse():Ot(t,_t.eye(t.rows))}function Ot(t,e,n=!1){return t=kt.checkMatrix(t),e=kt.checkMatrix(e),n?new Nt(t).solve(e):t.isSquare()?new At(t).solve(e):new jt(t).solve(e)}class Tt{constructor(t){if(!(t=kt.checkMatrix(t)).isSymmetric())throw new Error("Matrix is not symmetric");let e,n,r,o=t,i=o.rows,s=new _t(i,i),u=!0;for(n=0;n<i;n++){let t=0;for(r=0;r<n;r++){let i=0;for(e=0;e<r;e++)i+=s.get(r,e)*s.get(n,e);i=(o.get(n,r)-i)/s.get(r,r),s.set(n,r,i),t+=i*i}for(t=o.get(n,n)-t,u&=t>0,s.set(n,n,Math.sqrt(Math.max(t,0))),r=n+1;r<i;r++)s.set(n,r,0)}this.L=s,this.positiveDefinite=Boolean(u)}isPositiveDefinite(){return this.positiveDefinite}solve(t){t=kt.checkMatrix(t);let e=this.L,n=e.rows;if(t.rows!==n)throw new Error("Matrix dimensions do not match");if(!1===this.isPositiveDefinite())throw new Error("Matrix is not positive definite");let r,o,i,s=t.columns,u=t.clone();for(i=0;i<n;i++)for(o=0;o<s;o++){for(r=0;r<i;r++)u.set(i,o,u.get(i,o)-u.get(r,o)*e.get(i,r));u.set(i,o,u.get(i,o)/e.get(i,i))}for(i=n-1;i>=0;i--)for(o=0;o<s;o++){for(r=i+1;r<n;r++)u.set(i,o,u.get(i,o)-u.get(r,o)*e.get(r,i));u.set(i,o,u.get(i,o)/e.get(i,i))}return u}get lowerTriangularMatrix(){return this.L}}class qt{constructor(t,e={}){const{assumeSymmetric:n=!1}=e;if(!(t=kt.checkMatrix(t)).isSquare())throw new Error("Matrix is not a square matrix");if(t.isEmpty())throw new Error("Matrix must be non-empty");let r,o,i=t.columns,s=new _t(i,i),u=new Float64Array(i),a=new Float64Array(i),l=t,c=!1;if(c=!!n||t.isSymmetric(),c){for(r=0;r<i;r++)for(o=0;o<i;o++)s.set(r,o,l.get(r,o));!function(t,e,n,r){let o,i,s,u,a,l,c,f;for(a=0;a<t;a++)n[a]=r.get(t-1,a);for(u=t-1;u>0;u--){for(f=0,s=0,l=0;l<u;l++)f+=Math.abs(n[l]);if(0===f)for(e[u]=n[u-1],a=0;a<u;a++)n[a]=r.get(u-1,a),r.set(u,a,0),r.set(a,u,0);else{for(l=0;l<u;l++)n[l]/=f,s+=n[l]*n[l];for(o=n[u-1],i=Math.sqrt(s),o>0&&(i=-i),e[u]=f*i,s-=o*i,n[u-1]=o-i,a=0;a<u;a++)e[a]=0;for(a=0;a<u;a++){for(o=n[a],r.set(a,u,o),i=e[a]+r.get(a,a)*o,l=a+1;l<=u-1;l++)i+=r.get(l,a)*n[l],e[l]+=r.get(l,a)*o;e[a]=i}for(o=0,a=0;a<u;a++)e[a]/=s,o+=e[a]*n[a];for(c=o/(s+s),a=0;a<u;a++)e[a]-=c*n[a];for(a=0;a<u;a++){for(o=n[a],i=e[a],l=a;l<=u-1;l++)r.set(l,a,r.get(l,a)-(o*e[l]+i*n[l]));n[a]=r.get(u-1,a),r.set(u,a,0)}}n[u]=s}for(u=0;u<t-1;u++){if(r.set(t-1,u,r.get(u,u)),r.set(u,u,1),s=n[u+1],0!==s){for(l=0;l<=u;l++)n[l]=r.get(l,u+1)/s;for(a=0;a<=u;a++){for(i=0,l=0;l<=u;l++)i+=r.get(l,u+1)*r.get(l,a);for(l=0;l<=u;l++)r.set(l,a,r.get(l,a)-i*n[l])}}for(l=0;l<=u;l++)r.set(l,u+1,0)}for(a=0;a<t;a++)n[a]=r.get(t-1,a),r.set(t-1,a,0);r.set(t-1,t-1,1),e[0]=0}(i,a,u,s),function(t,e,n,r){let o,i,s,u,a,l,c,f,h,g,p,m,d,y,w,v,b;for(s=1;s<t;s++)e[s-1]=e[s];e[t-1]=0;let x=0,M=0,_=Number.EPSILON;for(l=0;l<t;l++){for(M=Math.max(M,Math.abs(n[l])+Math.abs(e[l])),c=l;c<t&&!(Math.abs(e[c])<=_*M);)c++;if(c>l){b=0;do{for(b+=1,o=n[l],f=(n[l+1]-o)/(2*e[l]),h=$t(f,1),f<0&&(h=-h),n[l]=e[l]/(f+h),n[l+1]=e[l]*(f+h),g=n[l+1],i=o-n[l],s=l+2;s<t;s++)n[s]-=i;for(x+=i,f=n[c],p=1,m=p,d=p,y=e[l+1],w=0,v=0,s=c-1;s>=l;s--)for(d=m,m=p,v=w,o=p*e[s],i=p*f,h=$t(f,e[s]),e[s+1]=w*h,w=e[s]/h,p=f/h,f=p*n[s]-w*o,n[s+1]=i+w*(p*o+w*n[s]),a=0;a<t;a++)i=r.get(a,s+1),r.set(a,s+1,w*r.get(a,s)+p*i),r.set(a,s,p*r.get(a,s)-w*i);f=-w*v*d*y*e[l]/g,e[l]=w*f,n[l]=p*f}while(Math.abs(e[l])>_*M)}n[l]=n[l]+x,e[l]=0}for(s=0;s<t-1;s++){for(a=s,f=n[s],u=s+1;u<t;u++)n[u]<f&&(a=u,f=n[u]);if(a!==s)for(n[a]=n[s],n[s]=f,u=0;u<t;u++)f=r.get(u,s),r.set(u,s,r.get(u,a)),r.set(u,a,f)}}(i,a,u,s)}else{let t=new _t(i,i),e=new Float64Array(i);for(o=0;o<i;o++)for(r=0;r<i;r++)t.set(r,o,l.get(r,o));!function(t,e,n,r){let o,i,s,u,a,l,c,f=t-1;for(l=1;l<=f-1;l++){for(c=0,u=l;u<=f;u++)c+=Math.abs(e.get(u,l-1));if(0!==c){for(s=0,u=f;u>=l;u--)n[u]=e.get(u,l-1)/c,s+=n[u]*n[u];for(i=Math.sqrt(s),n[l]>0&&(i=-i),s-=n[l]*i,n[l]=n[l]-i,a=l;a<t;a++){for(o=0,u=f;u>=l;u--)o+=n[u]*e.get(u,a);for(o/=s,u=l;u<=f;u++)e.set(u,a,e.get(u,a)-o*n[u])}for(u=0;u<=f;u++){for(o=0,a=f;a>=l;a--)o+=n[a]*e.get(u,a);for(o/=s,a=l;a<=f;a++)e.set(u,a,e.get(u,a)-o*n[a])}n[l]=c*n[l],e.set(l,l-1,c*i)}}for(u=0;u<t;u++)for(a=0;a<t;a++)r.set(u,a,u===a?1:0);for(l=f-1;l>=1;l--)if(0!==e.get(l,l-1)){for(u=l+1;u<=f;u++)n[u]=e.get(u,l-1);for(a=l;a<=f;a++){for(i=0,u=l;u<=f;u++)i+=n[u]*r.get(u,a);for(i=i/n[l]/e.get(l,l-1),u=l;u<=f;u++)r.set(u,a,r.get(u,a)+i*n[u])}}}(i,t,e,s),function(t,e,n,r,o){let i,s,u,a,l,c,f,h,g,p,m,d,y,w,v,b=t-1,x=t-1,M=Number.EPSILON,_=0,S=0,E=0,k=0,A=0,$=0,j=0,N=0;for(i=0;i<t;i++)for((i<0||i>x)&&(n[i]=o.get(i,i),e[i]=0),s=Math.max(i-1,0);s<t;s++)S+=Math.abs(o.get(i,s));for(;b>=0;){for(a=b;a>0&&($=Math.abs(o.get(a-1,a-1))+Math.abs(o.get(a,a)),0===$&&($=S),!(Math.abs(o.get(a,a-1))<M*$));)a--;if(a===b)o.set(b,b,o.get(b,b)+_),n[b]=o.get(b,b),e[b]=0,b--,N=0;else if(a===b-1){if(f=o.get(b,b-1)*o.get(b-1,b),E=(o.get(b-1,b-1)-o.get(b,b))/2,k=E*E+f,j=Math.sqrt(Math.abs(k)),o.set(b,b,o.get(b,b)+_),o.set(b-1,b-1,o.get(b-1,b-1)+_),h=o.get(b,b),k>=0){for(j=E>=0?E+j:E-j,n[b-1]=h+j,n[b]=n[b-1],0!==j&&(n[b]=h-f/j),e[b-1]=0,e[b]=0,h=o.get(b,b-1),$=Math.abs(h)+Math.abs(j),E=h/$,k=j/$,A=Math.sqrt(E*E+k*k),E/=A,k/=A,s=b-1;s<t;s++)j=o.get(b-1,s),o.set(b-1,s,k*j+E*o.get(b,s)),o.set(b,s,k*o.get(b,s)-E*j);for(i=0;i<=b;i++)j=o.get(i,b-1),o.set(i,b-1,k*j+E*o.get(i,b)),o.set(i,b,k*o.get(i,b)-E*j);for(i=0;i<=x;i++)j=r.get(i,b-1),r.set(i,b-1,k*j+E*r.get(i,b)),r.set(i,b,k*r.get(i,b)-E*j)}else n[b-1]=h+E,n[b]=h+E,e[b-1]=j,e[b]=-j;b-=2,N=0}else{if(h=o.get(b,b),g=0,f=0,a<b&&(g=o.get(b-1,b-1),f=o.get(b,b-1)*o.get(b-1,b)),10===N){for(_+=h,i=0;i<=b;i++)o.set(i,i,o.get(i,i)-h);$=Math.abs(o.get(b,b-1))+Math.abs(o.get(b-1,b-2)),h=g=.75*$,f=-.4375*$*$}if(30===N&&($=(g-h)/2,$=$*$+f,$>0)){for($=Math.sqrt($),g<h&&($=-$),$=h-f/((g-h)/2+$),i=0;i<=b;i++)o.set(i,i,o.get(i,i)-$);_+=$,h=g=f=.964}for(N+=1,l=b-2;l>=a&&(j=o.get(l,l),A=h-j,$=g-j,E=(A*$-f)/o.get(l+1,l)+o.get(l,l+1),k=o.get(l+1,l+1)-j-A-$,A=o.get(l+2,l+1),$=Math.abs(E)+Math.abs(k)+Math.abs(A),E/=$,k/=$,A/=$,l!==a)&&!(Math.abs(o.get(l,l-1))*(Math.abs(k)+Math.abs(A))<M*(Math.abs(E)*(Math.abs(o.get(l-1,l-1))+Math.abs(j)+Math.abs(o.get(l+1,l+1)))));)l--;for(i=l+2;i<=b;i++)o.set(i,i-2,0),i>l+2&&o.set(i,i-3,0);for(u=l;u<=b-1&&(w=u!==b-1,u!==l&&(E=o.get(u,u-1),k=o.get(u+1,u-1),A=w?o.get(u+2,u-1):0,h=Math.abs(E)+Math.abs(k)+Math.abs(A),0!==h&&(E/=h,k/=h,A/=h)),0!==h);u++)if($=Math.sqrt(E*E+k*k+A*A),E<0&&($=-$),0!==$){for(u!==l?o.set(u,u-1,-$*h):a!==l&&o.set(u,u-1,-o.get(u,u-1)),E+=$,h=E/$,g=k/$,j=A/$,k/=E,A/=E,s=u;s<t;s++)E=o.get(u,s)+k*o.get(u+1,s),w&&(E+=A*o.get(u+2,s),o.set(u+2,s,o.get(u+2,s)-E*j)),o.set(u,s,o.get(u,s)-E*h),o.set(u+1,s,o.get(u+1,s)-E*g);for(i=0;i<=Math.min(b,u+3);i++)E=h*o.get(i,u)+g*o.get(i,u+1),w&&(E+=j*o.get(i,u+2),o.set(i,u+2,o.get(i,u+2)-E*A)),o.set(i,u,o.get(i,u)-E),o.set(i,u+1,o.get(i,u+1)-E*k);for(i=0;i<=x;i++)E=h*r.get(i,u)+g*r.get(i,u+1),w&&(E+=j*r.get(i,u+2),r.set(i,u+2,r.get(i,u+2)-E*A)),r.set(i,u,r.get(i,u)-E),r.set(i,u+1,r.get(i,u+1)-E*k)}}}if(0===S)return;for(b=t-1;b>=0;b--)if(E=n[b],k=e[b],0===k)for(a=b,o.set(b,b,1),i=b-1;i>=0;i--){for(f=o.get(i,i)-E,A=0,s=a;s<=b;s++)A+=o.get(i,s)*o.get(s,b);if(e[i]<0)j=f,$=A;else if(a=i,0===e[i]?o.set(i,b,0!==f?-A/f:-A/(M*S)):(h=o.get(i,i+1),g=o.get(i+1,i),k=(n[i]-E)*(n[i]-E)+e[i]*e[i],c=(h*$-j*A)/k,o.set(i,b,c),o.set(i+1,b,Math.abs(h)>Math.abs(j)?(-A-f*c)/h:(-$-g*c)/j)),c=Math.abs(o.get(i,b)),M*c*c>1)for(s=i;s<=b;s++)o.set(s,b,o.get(s,b)/c)}else if(k<0)for(a=b-1,Math.abs(o.get(b,b-1))>Math.abs(o.get(b-1,b))?(o.set(b-1,b-1,k/o.get(b,b-1)),o.set(b-1,b,-(o.get(b,b)-E)/o.get(b,b-1))):(v=Pt(0,-o.get(b-1,b),o.get(b-1,b-1)-E,k),o.set(b-1,b-1,v[0]),o.set(b-1,b,v[1])),o.set(b,b-1,0),o.set(b,b,1),i=b-2;i>=0;i--){for(p=0,m=0,s=a;s<=b;s++)p+=o.get(i,s)*o.get(s,b-1),m+=o.get(i,s)*o.get(s,b);if(f=o.get(i,i)-E,e[i]<0)j=f,A=p,$=m;else if(a=i,0===e[i]?(v=Pt(-p,-m,f,k),o.set(i,b-1,v[0]),o.set(i,b,v[1])):(h=o.get(i,i+1),g=o.get(i+1,i),d=(n[i]-E)*(n[i]-E)+e[i]*e[i]-k*k,y=2*(n[i]-E)*k,0===d&&0===y&&(d=M*S*(Math.abs(f)+Math.abs(k)+Math.abs(h)+Math.abs(g)+Math.abs(j))),v=Pt(h*A-j*p+k*m,h*$-j*m-k*p,d,y),o.set(i,b-1,v[0]),o.set(i,b,v[1]),Math.abs(h)>Math.abs(j)+Math.abs(k)?(o.set(i+1,b-1,(-p-f*o.get(i,b-1)+k*o.get(i,b))/h),o.set(i+1,b,(-m-f*o.get(i,b)-k*o.get(i,b-1))/h)):(v=Pt(-A-g*o.get(i,b-1),-$-g*o.get(i,b),j,k),o.set(i+1,b-1,v[0]),o.set(i+1,b,v[1]))),c=Math.max(Math.abs(o.get(i,b-1)),Math.abs(o.get(i,b))),M*c*c>1)for(s=i;s<=b;s++)o.set(s,b-1,o.get(s,b-1)/c),o.set(s,b,o.get(s,b)/c)}for(i=0;i<t;i++)if(i<0||i>x)for(s=i;s<t;s++)r.set(i,s,o.get(i,s));for(s=t-1;s>=0;s--)for(i=0;i<=x;i++){for(j=0,u=0;u<=Math.min(s,x);u++)j+=r.get(i,u)*o.get(u,s);r.set(i,s,j)}}(i,a,u,s,t)}this.n=i,this.e=a,this.d=u,this.V=s}get realEigenvalues(){return Array.from(this.d)}get imaginaryEigenvalues(){return Array.from(this.e)}get eigenvectorMatrix(){return this.V}get diagonalMatrix(){let t,e,n=this.n,r=this.e,o=this.d,i=new _t(n,n);for(t=0;t<n;t++){for(e=0;e<n;e++)i.set(t,e,0);i.set(t,t,o[t]),r[t]>0?i.set(t,t+1,r[t]):r[t]<0&&i.set(t,t-1,r[t])}return i}}function Pt(t,e,n,r){let o,i;return Math.abs(n)>Math.abs(r)?(o=r/n,i=n+o*r,[(t+o*e)/i,(e-o*t)/i]):(o=n/r,i=r+o*n,[(o*t+e)/i,(o*e-t)/i])}class Ct{_seed(t,e){if(t===(t||0))return t;{const e=""+t;let n=0;for(let t=0;t<e.length;++t)n^=0|e.charCodeAt(t);return n}}}var It=n(44),zt=n.n(It);class Vt extends Ct{constructor(t,e){super(),this.seed(t,e)}get name(){return"function"}next(){return this._rng()}seed(t,e){this._rng=t}clone(t,e){return new Vt(this._rng,e)}}var Dt=(...t)=>{const[e="default",...n]=t;switch(typeof e){case"object":if(e instanceof Ct)return e;break;case"function":return new Vt(e);case"number":case"string":return new Vt(zt()(...n))}throw new Error(`invalid RNG "${e}"`)},Ft=(t,e=0,n=1)=>()=>t.next()*(n-e)+e;function Bt(t){return new Lt(t)}class Lt{constructor(t){this.isInt=()=>{if(Number.isInteger(this.n))return this;throw new Error("Expected number to be an integer, got "+this.n)},this.isPositive=()=>{if(this.n>0)return this;throw new Error("Expected number to be positive, got "+this.n)},this.lessThan=t=>{if(this.n<t)return this;throw new Error(`Expected number to be less than ${t}, got ${this.n}`)},this.greaterThanOrEqual=t=>{if(this.n>=t)return this;throw new Error(`Expected number to be greater than or equal to ${t}, got ${this.n}`)},this.greaterThan=t=>{if(this.n>t)return this;throw new Error(`Expected number to be greater than ${t}, got ${this.n}`)},this.n=t}}var Xt=(t,e=0,n=1)=>(void 0===n&&(n=void 0===e?1:e,e=0),Bt(e).isInt(),Bt(n).isInt(),()=>Math.floor(t.next()*(n-e+1)+e)),Ut=t=>()=>t.next()>=.5;const Ht=[0,0,.6931471805599453,1.791759469228055,3.1780538303479458,4.787491742782046,6.579251212010101,8.525161361065415,10.60460290274525,12.801827480081469],Yt=t=>Ht[t];class Qt extends Ct{get name(){return"default"}next(){return Math.random()}seed(t,e){}clone(){return new Qt}}class Gt{constructor(t){this._cache={},this.next=()=>this._rng.next(),this.float=(t,e)=>this.uniform(t,e)(),this.int=(t,e)=>this.uniformInt(t,e)(),this.integer=(t,e)=>this.uniformInt(t,e)(),this.bool=()=>this.uniformBoolean()(),this.boolean=()=>this.uniformBoolean()(),this.uniform=(t,e)=>this._memoize("uniform",Ft,t,e),this.uniformInt=(t,e)=>this._memoize("uniformInt",Xt,t,e),this.uniformBoolean=()=>this._memoize("uniformBoolean",Ut),this.normal=(t,e)=>((t,e=0,n=1)=>()=>{let r,o,i;do{r=2*t.next()-1,o=2*t.next()-1,i=r*r+o*o}while(!i||i>1);return e+n*o*Math.sqrt(-2*Math.log(i)/i)})(this,t,e),this.logNormal=(t,e)=>((t,e=0,n=1)=>{const r=t.normal(e,n);return()=>Math.exp(r())})(this,t,e),this.bernoulli=t=>((t,e=.5)=>(Bt(e).greaterThanOrEqual(0).lessThan(1),()=>Math.floor(t.next()+e)))(this,t),this.binomial=(t,e)=>((t,e=1,n=.5)=>(Bt(e).isInt().isPositive(),Bt(n).greaterThanOrEqual(0).lessThan(1),()=>{let r=0,o=0;for(;r++<e;)t.next()<n&&o++;return o}))(this,t,e),this.geometric=t=>((t,e=.5)=>{Bt(e).greaterThan(0).lessThan(1);const n=1/Math.log(1-e);return()=>Math.floor(1+Math.log(t.next())*n)})(this,t),this.poisson=t=>((t,e=1)=>{if(Bt(e).isPositive(),e<10){const n=Math.exp(-e);return()=>{let r=n,o=0,i=t.next();for(;i>r;)i-=r,r=e*r/++o;return o}}{const n=Math.sqrt(e),r=.931+2.53*n,o=.02483*r-.059,i=1.1239+1.1328/(r-3.4),s=.9277-3.6224/(r-2);return()=>{for(var u;;){let a,l=t.next();if(l<=.86*s)return a=l/s-.43,Math.floor((2*o/(.5-Math.abs(a))+r)*a+e+.445);l>=s?a=t.next()-.5:(a=l/s-.93,a=(a<0?-.5:.5)-a,l=t.next()*s);const c=.5-Math.abs(a);if(c<.013&&l>c)continue;const f=Math.floor((2*o/c+r)*a+e+.445);if(l=l*i/(o/(c*c)+r),f>=10){const t=(f+.5)*Math.log(e/f)-e-.9189385332046727+f-(1/12-(1/360-1/(1260*f*f))/(f*f))/f;if(Math.log(l*n)<=t)return f}else if(f>=0){const t=null!==(u=Yt(f))&&void 0!==u?u:0;if(Math.log(l)<=f*Math.log(e)-e-t)return f}}}}})(this,t),this.exponential=t=>((t,e=1)=>(Bt(e).isPositive(),()=>-Math.log(1-t.next())/e))(this,t),this.irwinHall=t=>((t,e=1)=>(Bt(e).isInt().greaterThanOrEqual(0),()=>{let n=0;for(let r=0;r<e;++r)n+=t.next();return n}))(this,t),this.bates=t=>((t,e=1)=>{Bt(e).isInt().isPositive();const n=t.irwinHall(e);return()=>n()/e})(this,t),this.pareto=t=>((t,e=1)=>{Bt(e).greaterThanOrEqual(0);const n=1/e;return()=>1/Math.pow(1-t.next(),n)})(this,t),t&&t instanceof Ct?this.use(t):this.use(new Qt),this._cache={}}get rng(){return this._rng}clone(...t){return t.length?new Gt(Dt(...t)):new Gt(this.rng.clone())}use(...t){this._rng=Dt(...t)}patch(){if(this._patch)throw new Error("Math.random already patched");this._patch=Math.random,Math.random=this.uniform()}unpatch(){this._patch&&(Math.random=this._patch,delete this._patch)}_memoize(t,e,...n){const r=""+n.join(";");let o=this._cache[t];return void 0!==o&&o.key===r||(o={key:r,distribution:e(this,...n)},this._cache[t]=o),o.distribution}}var Kt=new Gt;function Wt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Jt=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),e instanceof _t&&n instanceof _t?(this.mean=e,this.cov=n):(this.mean=new _t([e]).transpose(),this.cov=new _t(n))}var e,n,r;return e=t,(n=[{key:"at",value:function(t){var e=new _t([t]).transpose().sub(this.mean);return e.transpose().mmul(Rt(this.cov)).mmul(e).mul(-.5).exp()*(1/Math.sqrt(Math.pow(2*Math.PI,this.mean.rows)*this.cov.det()))}},{key:"marginalize",value:function(e){var n=Zt(this.mean,0,0,e,1),r=Zt(this.mean,e,0,this.mean.rows,1),o=Zt(this.cov,0,0,e,e),i=Zt(this.cov,e,e,this.mean.rows,this.mean.rows);return[new t(n,o),new t(r,i)]}},{key:"condition",value:function(e){var n=e.length,r=new _t([e]).transpose(),o=Zt(this.cov,0,0,n,n),i=Zt(this.cov,0,n,n,this.mean.rows),s=i.transpose(),u=Zt(this.cov,n,n,this.mean.rows,this.mean.rows),a=new Tt(o).lowerTriangularMatrix,l=Ot(a,r);return new t(Ot(a,i).transpose().mmul(l),u.sub(s.mmul(Rt(o)).mmul(i)))}},{key:"transformationMatrix",value:function(){for(var t=new qt(this.cov),e=t.eigenvectorMatrix,n=_t.zeros(e.rows,e.columns),r=0;r<n.rows;++r)n.set(r,r,Math.sqrt(t.realEigenvalues[r]));return e.mmul(n)}},{key:"sample",value:function(){for(var t=_t.zeros(this.mean.rows,1),e=Kt.normal(),n=0;n<this.mean.rows;++n)t.set(n,0,e());return _t.add(this.mean,this.transformationMatrix().mmul(t))}},{key:"getMean",value:function(){return this.mean.transpose()[0]}},{key:"getSd",value:function(){return this.cov.diag().map((function(t){return Math.sqrt(t)}))}}])&&Wt(e.prototype,n),r&&Wt(e,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Zt(t,e,n,r,o){for(var i=new _t(r-e,o-n),s=e;s<r;++s)for(var u=n;u<o;++u)i.set(s-e,u-n,t.get(s,u));return i}var te=function(t){return t};function ee(t){return"translate("+t+",0)"}function ne(t){return"translate(0,"+t+")"}function re(t){return e=>+t(e)}function oe(t,e){return e=Math.max(0,t.bandwidth()-2*e)/2,t.round()&&(e=Math.round(e)),n=>+t(n)+e}function ie(){return!this.__axis}function se(t,e){var n=[],r=null,o=null,i=6,s=6,u=3,a="undefined"!=typeof window&&window.devicePixelRatio>1?0:.5,l=1===t||4===t?-1:1,c=4===t||2===t?"x":"y",f=1===t||3===t?ee:ne;function h(h){var g=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,p=null==o?e.tickFormat?e.tickFormat.apply(e,n):te:o,m=Math.max(i,0)+u,d=e.range(),y=+d[0]+a,w=+d[d.length-1]+a,v=(e.bandwidth?oe:re)(e.copy(),a),b=h.selection?h.selection():h,x=b.selectAll(".domain").data([null]),M=b.selectAll(".tick").data(g,e).order(),_=M.exit(),S=M.enter().append("g").attr("class","tick"),E=M.select("line"),k=M.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),M=M.merge(S),E=E.merge(S.append("line").attr("stroke","currentColor").attr(c+"2",l*i)),k=k.merge(S.append("text").attr("fill","currentColor").attr(c,l*m).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),h!==b&&(x=x.transition(h),M=M.transition(h),E=E.transition(h),k=k.transition(h),_=_.transition(h).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=v(t))?f(t+a):this.getAttribute("transform")})),S.attr("opacity",1e-6).attr("transform",(function(t){var e=this.parentNode.__axis;return f((e&&isFinite(e=e(t))?e:v(t))+a)}))),_.remove(),x.attr("d",4===t||2===t?s?"M"+l*s+","+y+"H"+a+"V"+w+"H"+l*s:"M"+a+","+y+"V"+w:s?"M"+y+","+l*s+"V"+a+"H"+w+"V"+l*s:"M"+y+","+a+"H"+w),M.attr("opacity",1).attr("transform",(function(t){return f(v(t)+a)})),E.attr(c+"2",l*i),k.attr(c,l*m).text(p),b.filter(ie).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),b.each((function(){this.__axis=v}))}return h.scale=function(t){return arguments.length?(e=t,h):e},h.ticks=function(){return n=Array.from(arguments),h},h.tickArguments=function(t){return arguments.length?(n=null==t?[]:Array.from(t),h):n.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:Array.from(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(o=t,h):o},h.tickSize=function(t){return arguments.length?(i=s=+t,h):i},h.tickSizeInner=function(t){return arguments.length?(i=+t,h):i},h.tickSizeOuter=function(t){return arguments.length?(s=+t,h):s},h.tickPadding=function(t){return arguments.length?(u=+t,h):u},h.offset=function(t){return arguments.length?(a=+t,h):a},h}var ue={value:()=>{}};function ae(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new le(r)}function le(t){this._=t}function ce(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function fe(t,e){for(var n,r=0,o=t.length;r<o;++r)if((n=t[r]).name===e)return n.value}function he(t,e,n){for(var r=0,o=t.length;r<o;++r)if(t[r].name===e){t[r]=ue,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}le.prototype=ae.prototype={constructor:le,on:function(t,e){var n,r=this._,o=ce(t+"",r),i=-1,s=o.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++i<s;)if(n=(t=o[i]).type)r[n]=he(r[n],t.name,e);else if(null==e)for(n in r)r[n]=he(r[n],t.name,null);return this}for(;++i<s;)if((n=(t=o[i]).type)&&(n=fe(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new le(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,o=new Array(n),i=0;i<n;++i)o[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,o)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],o=0,i=r.length;o<i;++o)r[o].value.apply(e,n)}};var ge=ae;function pe(){}var me=function(t){return null==t?pe:function(){return this.querySelector(t)}};function de(t){return null==t?[]:Array.isArray(t)?t:Array.from(t)}function ye(){return[]}var we=function(t){return null==t?ye:function(){return this.querySelectorAll(t)}};var ve=function(t){return function(){return this.matches(t)}};function be(t){return function(e){return e.matches(t)}}var xe=Array.prototype.find;function Me(){return this.firstElementChild}var _e=Array.prototype.filter;function Se(){return Array.from(this.children)}var Ee=function(t){return new Array(t.length)};function ke(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}ke.prototype={constructor:ke,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var Ae=function(t){return function(){return t}};function $e(t,e,n,r,o,i){for(var s,u=0,a=e.length,l=i.length;u<l;++u)(s=e[u])?(s.__data__=i[u],r[u]=s):n[u]=new ke(t,i[u]);for(;u<a;++u)(s=e[u])&&(o[u]=s)}function je(t,e,n,r,o,i,s){var u,a,l,c=new Map,f=e.length,h=i.length,g=new Array(f);for(u=0;u<f;++u)(a=e[u])&&(g[u]=l=s.call(a,a.__data__,u,e)+"",c.has(l)?o[u]=a:c.set(l,a));for(u=0;u<h;++u)l=s.call(t,i[u],u,i)+"",(a=c.get(l))?(r[u]=a,a.__data__=i[u],c.delete(l)):n[u]=new ke(t,i[u]);for(u=0;u<f;++u)(a=e[u])&&c.get(g[u])===a&&(o[u]=a)}function Ne(t){return t.__data__}function Re(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function Oe(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var Te="http://www.w3.org/1999/xhtml",qe={svg:"http://www.w3.org/2000/svg",xhtml:Te,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Pe=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),qe.hasOwnProperty(e)?{space:qe[e],local:t}:t};function Ce(t){return function(){this.removeAttribute(t)}}function Ie(t){return function(){this.removeAttributeNS(t.space,t.local)}}function ze(t,e){return function(){this.setAttribute(t,e)}}function Ve(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function De(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function Fe(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}var Be=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Le(t){return function(){this.style.removeProperty(t)}}function Xe(t,e,n){return function(){this.style.setProperty(t,e,n)}}function Ue(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function He(t,e){return t.style.getPropertyValue(e)||Be(t).getComputedStyle(t,null).getPropertyValue(e)}function Ye(t){return function(){delete this[t]}}function Qe(t,e){return function(){this[t]=e}}function Ge(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function Ke(t){return t.trim().split(/^|\s+/)}function We(t){return t.classList||new Je(t)}function Je(t){this._node=t,this._names=Ke(t.getAttribute("class")||"")}function Ze(t,e){for(var n=We(t),r=-1,o=e.length;++r<o;)n.add(e[r])}function tn(t,e){for(var n=We(t),r=-1,o=e.length;++r<o;)n.remove(e[r])}function en(t){return function(){Ze(this,t)}}function nn(t){return function(){tn(this,t)}}function rn(t,e){return function(){(e.apply(this,arguments)?Ze:tn)(this,t)}}Je.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function on(){this.textContent=""}function sn(t){return function(){this.textContent=t}}function un(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function an(){this.innerHTML=""}function ln(t){return function(){this.innerHTML=t}}function cn(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function fn(){this.nextSibling&&this.parentNode.appendChild(this)}function hn(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function gn(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===Te&&e.documentElement.namespaceURI===Te?e.createElement(t):e.createElementNS(n,t)}}function pn(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var mn=function(t){var e=Pe(t);return(e.local?pn:gn)(e)};function dn(){return null}function yn(){var t=this.parentNode;t&&t.removeChild(this)}function wn(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function vn(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function bn(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function xn(t){return function(){var e=this.__on;if(e){for(var n,r=0,o=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++o]=n:this.removeEventListener(n.type,n.listener,n.options);++o?e.length=o:delete this.__on}}}function Mn(t,e,n){return function(){var r,o=this.__on,i=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(o)for(var s=0,u=o.length;s<u;++s)if((r=o[s]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=i,r.options=n),void(r.value=e);this.addEventListener(t.type,i,n),r={type:t.type,name:t.name,value:e,listener:i,options:n},o?o.push(r):this.__on=[r]}}function _n(t,e,n){var r=Be(t),o=r.CustomEvent;"function"==typeof o?o=new o(e,n):(o=r.document.createEvent("Event"),n?(o.initEvent(e,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(e,!1,!1)),t.dispatchEvent(o)}function Sn(t,e){return function(){return _n(this,t,e)}}function En(t,e){return function(){return _n(this,t,e.apply(this,arguments))}}var kn=[null];function An(t,e){this._groups=t,this._parents=e}function $n(){return new An([[document.documentElement]],kn)}An.prototype=$n.prototype={constructor:An,select:function(t){"function"!=typeof t&&(t=me(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,s,u=e[o],a=u.length,l=r[o]=new Array(a),c=0;c<a;++c)(i=u[c])&&(s=t.call(i,i.__data__,c,u))&&("__data__"in i&&(s.__data__=i.__data__),l[c]=s);return new An(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return de(t.apply(this,arguments))}}(t):we(t);for(var e=this._groups,n=e.length,r=[],o=[],i=0;i<n;++i)for(var s,u=e[i],a=u.length,l=0;l<a;++l)(s=u[l])&&(r.push(t.call(s,s.__data__,l,u)),o.push(s));return new An(r,o)},selectChild:function(t){return this.select(null==t?Me:function(t){return function(){return xe.call(this.children,t)}}("function"==typeof t?t:be(t)))},selectChildren:function(t){return this.selectAll(null==t?Se:function(t){return function(){return _e.call(this.children,t)}}("function"==typeof t?t:be(t)))},filter:function(t){"function"!=typeof t&&(t=ve(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,s=e[o],u=s.length,a=r[o]=[],l=0;l<u;++l)(i=s[l])&&t.call(i,i.__data__,l,s)&&a.push(i);return new An(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,Ne);var n=e?je:$e,r=this._parents,o=this._groups;"function"!=typeof t&&(t=Ae(t));for(var i=o.length,s=new Array(i),u=new Array(i),a=new Array(i),l=0;l<i;++l){var c=r[l],f=o[l],h=f.length,g=Re(t.call(c,c&&c.__data__,l,r)),p=g.length,m=u[l]=new Array(p),d=s[l]=new Array(p),y=a[l]=new Array(h);n(c,f,m,d,y,g,e);for(var w,v,b=0,x=0;b<p;++b)if(w=m[b]){for(b>=x&&(x=b+1);!(v=d[x])&&++x<p;);w._next=v||null}}return(s=new An(s,r))._enter=u,s._exit=a,s},enter:function(){return new An(this._enter||this._groups.map(Ee),this._parents)},exit:function(){return new An(this._exit||this._groups.map(Ee),this._parents)},join:function(t,e,n){var r=this.enter(),o=this,i=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=e&&(o=e(o))&&(o=o.selection()),null==n?i.remove():n(i),r&&o?r.merge(o).order():o},merge:function(t){for(var e=t.selection?t.selection():t,n=this._groups,r=e._groups,o=n.length,i=r.length,s=Math.min(o,i),u=new Array(o),a=0;a<s;++a)for(var l,c=n[a],f=r[a],h=c.length,g=u[a]=new Array(h),p=0;p<h;++p)(l=c[p]||f[p])&&(g[p]=l);for(;a<o;++a)u[a]=n[a];return new An(u,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,o=t[e],i=o.length-1,s=o[i];--i>=0;)(r=o[i])&&(s&&4^r.compareDocumentPosition(s)&&s.parentNode.insertBefore(r,s),s=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=Oe);for(var n=this._groups,r=n.length,o=new Array(r),i=0;i<r;++i){for(var s,u=n[i],a=u.length,l=o[i]=new Array(a),c=0;c<a;++c)(s=u[c])&&(l[c]=s);l.sort(e)}return new An(o,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],o=0,i=r.length;o<i;++o){var s=r[o];if(s)return s}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var o,i=e[n],s=0,u=i.length;s<u;++s)(o=i[s])&&t.call(o,o.__data__,s,i);return this},attr:function(t,e){var n=Pe(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?Ie:Ce:"function"==typeof e?n.local?Fe:De:n.local?Ve:ze)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?Le:"function"==typeof e?Ue:Xe)(t,e,null==n?"":n)):He(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?Ye:"function"==typeof e?Ge:Qe)(t,e)):this.node()[t]},classed:function(t,e){var n=Ke(t+"");if(arguments.length<2){for(var r=We(this.node()),o=-1,i=n.length;++o<i;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof e?rn:e?en:nn)(n,e))},text:function(t){return arguments.length?this.each(null==t?on:("function"==typeof t?un:sn)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?an:("function"==typeof t?cn:ln)(t)):this.node().innerHTML},raise:function(){return this.each(fn)},lower:function(){return this.each(hn)},append:function(t){var e="function"==typeof t?t:mn(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:mn(t),r=null==e?dn:"function"==typeof e?e:me(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(yn)},clone:function(t){return this.select(t?vn:wn)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,o,i=bn(t+""),s=i.length;if(!(arguments.length<2)){for(u=e?Mn:xn,r=0;r<s;++r)this.each(u(i[r],e,n));return this}var u=this.node().__on;if(u)for(var a,l=0,c=u.length;l<c;++l)for(r=0,a=u[l];r<s;++r)if((o=i[r]).type===a.type&&o.name===a.name)return a.value},dispatch:function(t,e){return this.each(("function"==typeof e?En:Sn)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,o=t[e],i=0,s=o.length;i<s;++i)(r=o[i])&&(yield r)}};var jn=$n,Nn=function(t){return"string"==typeof t?new An([[document.querySelector(t)]],[document.documentElement]):new An([[t]],kn)};const Rn={passive:!1},On={capture:!0,passive:!1};function Tn(t){t.stopImmediatePropagation()}var qn=function(t){t.preventDefault(),t.stopImmediatePropagation()},Pn=function(t){var e=t.document.documentElement,n=Nn(t).on("dragstart.drag",qn,On);"onselectstart"in e?n.on("selectstart.drag",qn,On):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")};function Cn(t,e){var n=t.document.documentElement,r=Nn(t).on("dragstart.drag",null);e&&(r.on("click.drag",qn,On),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}var In=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function zn(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Vn(){}var Dn="\\s*([+-]?\\d+)\\s*",Fn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Bn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Ln=/^#([0-9a-f]{3,8})$/,Xn=new RegExp("^rgb\\("+[Dn,Dn,Dn]+"\\)$"),Un=new RegExp("^rgb\\("+[Bn,Bn,Bn]+"\\)$"),Hn=new RegExp("^rgba\\("+[Dn,Dn,Dn,Fn]+"\\)$"),Yn=new RegExp("^rgba\\("+[Bn,Bn,Bn,Fn]+"\\)$"),Qn=new RegExp("^hsl\\("+[Fn,Bn,Bn]+"\\)$"),Gn=new RegExp("^hsla\\("+[Fn,Bn,Bn,Fn]+"\\)$"),Kn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Wn(){return this.rgb().formatHex()}function Jn(){return this.rgb().formatRgb()}function Zn(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=Ln.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?tr(e):3===n?new or(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?er(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?er(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=Xn.exec(t))?new or(e[1],e[2],e[3],1):(e=Un.exec(t))?new or(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Hn.exec(t))?er(e[1],e[2],e[3],e[4]):(e=Yn.exec(t))?er(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Qn.exec(t))?ar(e[1],e[2]/100,e[3]/100,1):(e=Gn.exec(t))?ar(e[1],e[2]/100,e[3]/100,e[4]):Kn.hasOwnProperty(t)?tr(Kn[t]):"transparent"===t?new or(NaN,NaN,NaN,0):null}function tr(t){return new or(t>>16&255,t>>8&255,255&t,1)}function er(t,e,n,r){return r<=0&&(t=e=n=NaN),new or(t,e,n,r)}function nr(t){return t instanceof Vn||(t=Zn(t)),t?new or((t=t.rgb()).r,t.g,t.b,t.opacity):new or}function rr(t,e,n,r){return 1===arguments.length?nr(t):new or(t,e,n,null==r?1:r)}function or(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function ir(){return"#"+ur(this.r)+ur(this.g)+ur(this.b)}function sr(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function ur(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function ar(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new cr(t,e,n,r)}function lr(t){if(t instanceof cr)return new cr(t.h,t.s,t.l,t.opacity);if(t instanceof Vn||(t=Zn(t)),!t)return new cr;if(t instanceof cr)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,o=Math.min(e,n,r),i=Math.max(e,n,r),s=NaN,u=i-o,a=(i+o)/2;return u?(s=e===i?(n-r)/u+6*(n<r):n===i?(r-e)/u+2:(e-n)/u+4,u/=a<.5?i+o:2-i-o,s*=60):u=a>0&&a<1?0:s,new cr(s,u,a,t.opacity)}function cr(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function fr(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function hr(t,e,n,r,o){var i=t*t,s=i*t;return((1-3*t+3*i-s)*e+(4-6*i+3*s)*n+(1+3*t+3*i-3*s)*r+s*o)/6}In(Vn,Zn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Wn,formatHex:Wn,formatHsl:function(){return lr(this).formatHsl()},formatRgb:Jn,toString:Jn}),In(or,rr,zn(Vn,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new or(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new or(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:ir,formatHex:ir,formatRgb:sr,toString:sr})),In(cr,(function(t,e,n,r){return 1===arguments.length?lr(t):new cr(t,e,n,null==r?1:r)}),zn(Vn,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new cr(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new cr(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,o=2*n-r;return new or(fr(t>=240?t-240:t+120,o,r),fr(t,o,r),fr(t<120?t+240:t-120,o,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var gr=t=>()=>t;function pr(t,e){return function(n){return t+n*e}}function mr(t){return 1==(t=+t)?dr:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):gr(isNaN(e)?n:e)}}function dr(t,e){var n=e-t;return n?pr(t,n):gr(isNaN(t)?e:t)}var yr=function t(e){var n=mr(e);function r(t,e){var r=n((t=rr(t)).r,(e=rr(e)).r),o=n(t.g,e.g),i=n(t.b,e.b),s=dr(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=o(e),t.b=i(e),t.opacity=s(e),t+""}}return r.gamma=t,r}(1);function wr(t){return function(e){var n,r,o=e.length,i=new Array(o),s=new Array(o),u=new Array(o);for(n=0;n<o;++n)r=rr(e[n]),i[n]=r.r||0,s[n]=r.g||0,u[n]=r.b||0;return i=t(i),s=t(s),u=t(u),r.opacity=1,function(t){return r.r=i(t),r.g=s(t),r.b=u(t),r+""}}}var vr=wr((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),o=t[r],i=t[r+1],s=r>0?t[r-1]:2*o-i,u=r<e-1?t[r+2]:2*i-o;return hr((n-r/e)*e,s,o,i,u)}})),br=(wr((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),o=t[(r+e-1)%e],i=t[r%e],s=t[(r+1)%e],u=t[(r+2)%e];return hr((n-r/e)*e,o,i,s,u)}})),function(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,o=e.slice();return function(i){for(n=0;n<r;++n)o[n]=t[n]*(1-i)+e[n]*i;return o}});function xr(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function Mr(t,e){var n,r=e?e.length:0,o=t?Math.min(r,t.length):0,i=new Array(o),s=new Array(r);for(n=0;n<o;++n)i[n]=Rr(t[n],e[n]);for(;n<r;++n)s[n]=e[n];return function(t){for(n=0;n<o;++n)s[n]=i[n](t);return s}}var _r=function(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}},Sr=function(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}},Er=function(t,e){var n,r={},o={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Rr(t[n],e[n]):o[n]=e[n];return function(t){for(n in r)o[n]=r[n](t);return o}},kr=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ar=new RegExp(kr.source,"g");var $r,jr,Nr=function(t,e){var n,r,o,i=kr.lastIndex=Ar.lastIndex=0,s=-1,u=[],a=[];for(t+="",e+="";(n=kr.exec(t))&&(r=Ar.exec(e));)(o=r.index)>i&&(o=e.slice(i,o),u[s]?u[s]+=o:u[++s]=o),(n=n[0])===(r=r[0])?u[s]?u[s]+=r:u[++s]=r:(u[++s]=null,a.push({i:s,x:Sr(n,r)})),i=Ar.lastIndex;return i<e.length&&(o=e.slice(i),u[s]?u[s]+=o:u[++s]=o),u.length<2?a[0]?function(t){return function(e){return t(e)+""}}(a[0].x):function(t){return function(){return t}}(e):(e=a.length,function(t){for(var n,r=0;r<e;++r)u[(n=a[r]).i]=n.x(t);return u.join("")})},Rr=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?gr(e):("number"===r?Sr:"string"===r?(n=Zn(e))?(e=n,yr):Nr:e instanceof Zn?yr:e instanceof Date?_r:xr(e)?br:Array.isArray(e)?Mr:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Er:Sr)(t,e)},Or=function(t,e){if(t=function(t){let e;for(;e=t.sourceEvent;)t=e;return t}(t),void 0===e&&(e=t.currentTarget),e){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}if(e.getBoundingClientRect){var o=e.getBoundingClientRect();return[t.clientX-o.left-e.clientLeft,t.clientY-o.top-e.clientTop]}}return[t.pageX,t.pageY]},Tr=0,qr=0,Pr=0,Cr=0,Ir=0,zr=0,Vr="object"==typeof performance&&performance.now?performance:Date,Dr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Fr(){return Ir||(Dr(Br),Ir=Vr.now()+zr)}function Br(){Ir=0}function Lr(){this._call=this._time=this._next=null}function Xr(t,e,n){var r=new Lr;return r.restart(t,e,n),r}function Ur(){Ir=(Cr=Vr.now())+zr,Tr=qr=0;try{!function(){Fr(),++Tr;for(var t,e=$r;e;)(t=Ir-e._time)>=0&&e._call.call(void 0,t),e=e._next;--Tr}()}finally{Tr=0,function(){var t,e,n=$r,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:$r=e);jr=t,Yr(r)}(),Ir=0}}function Hr(){var t=Vr.now(),e=t-Cr;e>1e3&&(zr-=e,Cr=t)}function Yr(t){Tr||(qr&&(qr=clearTimeout(qr)),t-Ir>24?(t<1/0&&(qr=setTimeout(Ur,t-Vr.now()-zr)),Pr&&(Pr=clearInterval(Pr))):(Pr||(Cr=Vr.now(),Pr=setInterval(Hr,1e3)),Tr=1,Dr(Ur)))}Lr.prototype=Xr.prototype={constructor:Lr,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Fr():+n)+(null==e?0:+e),this._next||jr===this||(jr?jr._next=this:$r=this,jr=this),this._call=t,this._time=n,Yr()},stop:function(){this._call&&(this._call=null,this._time=1/0,Yr())}};var Qr=function(t,e,n){var r=new Lr;return e=null==e?0:+e,r.restart(n=>{r.stop(),t(n+e)},e,n),r},Gr=ge("start","end","cancel","interrupt"),Kr=[],Wr=function(t,e,n,r,o,i){var s=t.__transition;if(s){if(n in s)return}else t.__transition={};!function(t,e,n){var r,o=t.__transition;function i(a){var l,c,f,h;if(1!==n.state)return u();for(l in o)if((h=o[l]).name===n.name){if(3===h.state)return Qr(i);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete o[l]):+l<e&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete o[l])}if(Qr((function(){3===n.state&&(n.state=4,n.timer.restart(s,n.delay,n.time),s(a))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(f=n.tween.length),l=0,c=-1;l<f;++l)(h=n.tween[l].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=h);r.length=c+1}}function s(e){for(var o=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(u),n.state=5,1),i=-1,s=r.length;++i<s;)r[i].call(t,o);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),u())}function u(){for(var r in n.state=6,n.timer.stop(),delete o[e],o)return;delete t.__transition}o[e]=n,n.timer=Xr((function(t){n.state=1,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:o,on:Gr,tween:Kr,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:0})};function Jr(t,e){var n=to(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function Zr(t,e){var n=to(t,e);if(n.state>3)throw new Error("too late; already running");return n}function to(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var eo,no=function(t,e){var n,r,o,i=t.__transition,s=!0;if(i){for(o in e=null==e?null:e+"",i)(n=i[o]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete i[o]):s=!1;s&&delete t.__transition}},ro=180/Math.PI,oo={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},io=function(t,e,n,r,o,i){var s,u,a;return(s=Math.sqrt(t*t+e*e))&&(t/=s,e/=s),(a=t*n+e*r)&&(n-=t*a,r-=e*a),(u=Math.sqrt(n*n+r*r))&&(n/=u,r/=u,a/=u),t*r<e*n&&(t=-t,e=-e,a=-a,s=-s),{translateX:o,translateY:i,rotate:Math.atan2(e,t)*ro,skewX:Math.atan(a)*ro,scaleX:s,scaleY:u}};function so(t,e,n,r){function o(t){return t.length?t.pop()+" ":""}return function(i,s){var u=[],a=[];return i=t(i),s=t(s),function(t,r,o,i,s,u){if(t!==o||r!==i){var a=s.push("translate(",null,e,null,n);u.push({i:a-4,x:Sr(t,o)},{i:a-2,x:Sr(r,i)})}else(o||i)&&s.push("translate("+o+e+i+n)}(i.translateX,i.translateY,s.translateX,s.translateY,u,a),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(o(n)+"rotate(",null,r)-2,x:Sr(t,e)})):e&&n.push(o(n)+"rotate("+e+r)}(i.rotate,s.rotate,u,a),function(t,e,n,i){t!==e?i.push({i:n.push(o(n)+"skewX(",null,r)-2,x:Sr(t,e)}):e&&n.push(o(n)+"skewX("+e+r)}(i.skewX,s.skewX,u,a),function(t,e,n,r,i,s){if(t!==n||e!==r){var u=i.push(o(i)+"scale(",null,",",null,")");s.push({i:u-4,x:Sr(t,n)},{i:u-2,x:Sr(e,r)})}else 1===n&&1===r||i.push(o(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,s.scaleX,s.scaleY,u,a),i=s=null,function(t){for(var e,n=-1,r=a.length;++n<r;)u[(e=a[n]).i]=e.x(t);return u.join("")}}}var uo=so((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?oo:io(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),ao=so((function(t){return null==t?oo:(eo||(eo=document.createElementNS("http://www.w3.org/2000/svg","g")),eo.setAttribute("transform",t),(t=eo.transform.baseVal.consolidate())?(t=t.matrix,io(t.a,t.b,t.c,t.d,t.e,t.f)):oo)}),", ",")",")");function lo(t,e){var n,r;return function(){var o=Zr(this,t),i=o.tween;if(i!==n)for(var s=0,u=(r=n=i).length;s<u;++s)if(r[s].name===e){(r=r.slice()).splice(s,1);break}o.tween=r}}function co(t,e,n){var r,o;if("function"!=typeof n)throw new Error;return function(){var i=Zr(this,t),s=i.tween;if(s!==r){o=(r=s).slice();for(var u={name:e,value:n},a=0,l=o.length;a<l;++a)if(o[a].name===e){o[a]=u;break}a===l&&o.push(u)}i.tween=o}}function fo(t,e,n){var r=t._id;return t.each((function(){var t=Zr(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return to(t,r).value[e]}}var ho=function(t,e){var n;return("number"==typeof e?Sr:e instanceof Zn?yr:(n=Zn(e))?(e=n,yr):Nr)(t,e)};function go(t){return function(){this.removeAttribute(t)}}function po(t){return function(){this.removeAttributeNS(t.space,t.local)}}function mo(t,e,n){var r,o,i=n+"";return function(){var s=this.getAttribute(t);return s===i?null:s===r?o:o=e(r=s,n)}}function yo(t,e,n){var r,o,i=n+"";return function(){var s=this.getAttributeNS(t.space,t.local);return s===i?null:s===r?o:o=e(r=s,n)}}function wo(t,e,n){var r,o,i;return function(){var s,u,a=n(this);if(null!=a)return(s=this.getAttribute(t))===(u=a+"")?null:s===r&&u===o?i:(o=u,i=e(r=s,a));this.removeAttribute(t)}}function vo(t,e,n){var r,o,i;return function(){var s,u,a=n(this);if(null!=a)return(s=this.getAttributeNS(t.space,t.local))===(u=a+"")?null:s===r&&u===o?i:(o=u,i=e(r=s,a));this.removeAttributeNS(t.space,t.local)}}function bo(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function xo(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function Mo(t,e){var n,r;function o(){var o=e.apply(this,arguments);return o!==r&&(n=(r=o)&&xo(t,o)),n}return o._value=e,o}function _o(t,e){var n,r;function o(){var o=e.apply(this,arguments);return o!==r&&(n=(r=o)&&bo(t,o)),n}return o._value=e,o}function So(t,e){return function(){Jr(this,t).delay=+e.apply(this,arguments)}}function Eo(t,e){return e=+e,function(){Jr(this,t).delay=e}}function ko(t,e){return function(){Zr(this,t).duration=+e.apply(this,arguments)}}function Ao(t,e){return e=+e,function(){Zr(this,t).duration=e}}function $o(t,e){if("function"!=typeof e)throw new Error;return function(){Zr(this,t).ease=e}}function jo(t,e,n){var r,o,i=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?Jr:Zr;return function(){var s=i(this,t),u=s.on;u!==r&&(o=(r=u).copy()).on(e,n),s.on=o}}var No=jn.prototype.constructor;function Ro(t){return function(){this.style.removeProperty(t)}}function Oo(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}function To(t,e,n){var r,o;function i(){var i=e.apply(this,arguments);return i!==o&&(r=(o=i)&&Oo(t,i,n)),r}return i._value=e,i}function qo(t){return function(e){this.textContent=t.call(this,e)}}function Po(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&qo(r)),e}return r._value=t,r}var Co=0;function Io(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function zo(){return++Co}var Vo=jn.prototype;Io.prototype=function(t){return jn().transition(t)}.prototype={constructor:Io,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=me(t));for(var r=this._groups,o=r.length,i=new Array(o),s=0;s<o;++s)for(var u,a,l=r[s],c=l.length,f=i[s]=new Array(c),h=0;h<c;++h)(u=l[h])&&(a=t.call(u,u.__data__,h,l))&&("__data__"in u&&(a.__data__=u.__data__),f[h]=a,Wr(f[h],e,n,h,f,to(u,n)));return new Io(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=we(t));for(var r=this._groups,o=r.length,i=[],s=[],u=0;u<o;++u)for(var a,l=r[u],c=l.length,f=0;f<c;++f)if(a=l[f]){for(var h,g=t.call(a,a.__data__,f,l),p=to(a,n),m=0,d=g.length;m<d;++m)(h=g[m])&&Wr(h,e,n,m,g,p);i.push(g),s.push(a)}return new Io(i,s,e,n)},selectChild:Vo.selectChild,selectChildren:Vo.selectChildren,filter:function(t){"function"!=typeof t&&(t=ve(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,s=e[o],u=s.length,a=r[o]=[],l=0;l<u;++l)(i=s[l])&&t.call(i,i.__data__,l,s)&&a.push(i);return new Io(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,o=n.length,i=Math.min(r,o),s=new Array(r),u=0;u<i;++u)for(var a,l=e[u],c=n[u],f=l.length,h=s[u]=new Array(f),g=0;g<f;++g)(a=l[g]||c[g])&&(h[g]=a);for(;u<r;++u)s[u]=e[u];return new Io(s,this._parents,this._name,this._id)},selection:function(){return new No(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=zo(),r=this._groups,o=r.length,i=0;i<o;++i)for(var s,u=r[i],a=u.length,l=0;l<a;++l)if(s=u[l]){var c=to(s,e);Wr(s,t,n,l,u,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Io(r,this._parents,t,n)},call:Vo.call,nodes:Vo.nodes,node:Vo.node,size:Vo.size,empty:Vo.empty,each:Vo.each,on:function(t,e){var n=this._id;return arguments.length<2?to(this.node(),n).on.on(t):this.each(jo(n,t,e))},attr:function(t,e){var n=Pe(t),r="transform"===n?ao:ho;return this.attrTween(t,"function"==typeof e?(n.local?vo:wo)(n,r,fo(this,"attr."+t,e)):null==e?(n.local?po:go)(n):(n.local?yo:mo)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=Pe(t);return this.tween(n,(r.local?Mo:_o)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?uo:ho;return null==e?this.styleTween(t,function(t,e){var n,r,o;return function(){var i=He(this,t),s=(this.style.removeProperty(t),He(this,t));return i===s?null:i===n&&s===r?o:o=e(n=i,r=s)}}(t,r)).on("end.style."+t,Ro(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,o,i;return function(){var s=He(this,t),u=n(this),a=u+"";return null==u&&(this.style.removeProperty(t),a=u=He(this,t)),s===a?null:s===r&&a===o?i:(o=a,i=e(r=s,u))}}(t,r,fo(this,"style."+t,e))).each(function(t,e){var n,r,o,i,s="style."+e,u="end."+s;return function(){var a=Zr(this,t),l=a.on,c=null==a.value[s]?i||(i=Ro(e)):void 0;l===n&&o===c||(r=(n=l).copy()).on(u,o=c),a.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,o,i=n+"";return function(){var s=He(this,t);return s===i?null:s===r?o:o=e(r=s,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,To(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(fo(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,Po(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,o=to(this.node(),n).tween,i=0,s=o.length;i<s;++i)if((r=o[i]).name===t)return r.value;return null}return this.each((null==e?lo:co)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?So:Eo)(e,t)):to(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?ko:Ao)(e,t)):to(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each($o(e,t)):to(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;Zr(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,o=n.size();return new Promise((function(i,s){var u={value:s},a={value:function(){0==--o&&i()}};n.each((function(){var n=Zr(this,r),o=n.on;o!==t&&((e=(t=o).copy())._.cancel.push(u),e._.interrupt.push(u),e._.end.push(a)),n.on=e})),0===o&&i()}))},[Symbol.iterator]:Vo[Symbol.iterator]};var Do={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Fo(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}jn.prototype.interrupt=function(t){return this.each((function(){no(this,t)}))},jn.prototype.transition=function(t){var e,n;t instanceof Io?(e=t._id,t=t._name):(e=zo(),(n=Do).time=Fr(),t=null==t?null:t+"");for(var r=this._groups,o=r.length,i=0;i<o;++i)for(var s,u=r[i],a=u.length,l=0;l<a;++l)(s=u[l])&&Wr(s,t,e,l,u,n||Fo(s,e));return new Io(r,this._parents,t,e)};const{abs:Bo,max:Lo,min:Xo}=Math;function Uo(t){return[+t[0],+t[1]]}function Ho(t){return[Uo(t[0]),Uo(t[1])]}["w","e"].map(Yo),["n","s"].map(Yo),["n","w","e","s","nw","ne","sw","se"].map(Yo);function Yo(t){return{type:t}}var Qo=t=>()=>t;function Go(t,{sourceEvent:e,subject:n,target:r,identifier:o,active:i,x:s,y:u,dx:a,dy:l,dispatch:c}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:e,enumerable:!0,configurable:!0},subject:{value:n,enumerable:!0,configurable:!0},target:{value:r,enumerable:!0,configurable:!0},identifier:{value:o,enumerable:!0,configurable:!0},active:{value:i,enumerable:!0,configurable:!0},x:{value:s,enumerable:!0,configurable:!0},y:{value:u,enumerable:!0,configurable:!0},dx:{value:a,enumerable:!0,configurable:!0},dy:{value:l,enumerable:!0,configurable:!0},_:{value:c}})}function Ko(t){return!t.ctrlKey&&!t.button}function Wo(){return this.parentNode}function Jo(t,e){return null==e?{x:t.x,y:t.y}:e}function Zo(){return navigator.maxTouchPoints||"ontouchstart"in this}Go.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var ti=function(){var t,e,n,r,o=Ko,i=Wo,s=Jo,u=Zo,a={},l=ge("start","drag","end"),c=0,f=0;function h(t){t.on("mousedown.drag",g).filter(u).on("touchstart.drag",d).on("touchmove.drag",y,Rn).on("touchend.drag touchcancel.drag",w).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function g(s,u){if(!r&&o.call(this,s,u)){var a=v(this,i.call(this,s,u),s,u,"mouse");a&&(Nn(s.view).on("mousemove.drag",p,On).on("mouseup.drag",m,On),Pn(s.view),Tn(s),n=!1,t=s.clientX,e=s.clientY,a("start",s))}}function p(r){if(qn(r),!n){var o=r.clientX-t,i=r.clientY-e;n=o*o+i*i>f}a.mouse("drag",r)}function m(t){Nn(t.view).on("mousemove.drag mouseup.drag",null),Cn(t.view,n),qn(t),a.mouse("end",t)}function d(t,e){if(o.call(this,t,e)){var n,r,s=t.changedTouches,u=i.call(this,t,e),a=s.length;for(n=0;n<a;++n)(r=v(this,u,t,e,s[n].identifier,s[n]))&&(Tn(t),r("start",t,s[n]))}}function y(t){var e,n,r=t.changedTouches,o=r.length;for(e=0;e<o;++e)(n=a[r[e].identifier])&&(qn(t),n("drag",t,r[e]))}function w(t){var e,n,o=t.changedTouches,i=o.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),e=0;e<i;++e)(n=a[o[e].identifier])&&(Tn(t),n("end",t,o[e]))}function v(t,e,n,r,o,i){var u,f,g,p=l.copy(),m=Or(i||n,e);if(null!=(g=s.call(t,new Go("beforestart",{sourceEvent:n,target:h,identifier:o,active:c,x:m[0],y:m[1],dx:0,dy:0,dispatch:p}),r)))return u=g.x-m[0]||0,f=g.y-m[1]||0,function n(i,s,l){var d,y=m;switch(i){case"start":a[o]=n,d=c++;break;case"end":delete a[o],--c;case"drag":m=Or(l||s,e),d=c}p.call(i,t,new Go(i,{sourceEvent:s,subject:g,target:h,identifier:o,active:d,x:m[0]+u,y:m[1]+f,dx:m[0]-y[0],dy:m[1]-y[1],dispatch:p}),r)}}return h.filter=function(t){return arguments.length?(o="function"==typeof t?t:Qo(!!t),h):o},h.container=function(t){return arguments.length?(i="function"==typeof t?t:Qo(t),h):i},h.subject=function(t){return arguments.length?(s="function"==typeof t?t:Qo(t),h):s},h.touchable=function(t){return arguments.length?(u="function"==typeof t?t:Qo(!!t),h):u},h.on=function(){var t=l.on.apply(l,arguments);return t===l?h:t},h.clickDistance=function(t){return arguments.length?(f=(t=+t)*t,h):Math.sqrt(f)},h};function ei(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}var ni=function(t){return(t=ei(Math.abs(t)))?t[1]:NaN},ri=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function oi(t){if(!(e=ri.exec(t)))throw new Error("invalid format: "+t);var e;return new ii({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function ii(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}oi.prototype=ii.prototype,ii.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var si,ui,ai,li,ci=function(t,e){var n=ei(t,e);if(!n)return t+"";var r=n[0],o=n[1];return o<0?"0."+new Array(-o).join("0")+r:r.length>o+1?r.slice(0,o+1)+"."+r.slice(o+1):r+new Array(o-r.length+2).join("0")},fi={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>ci(100*t,e),r:ci,s:function(t,e){var n=ei(t,e);if(!n)return t+"";var r=n[0],o=n[1],i=o-(si=3*Math.max(-8,Math.min(8,Math.floor(o/3))))+1,s=r.length;return i===s?r:i>s?r+new Array(i-s+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+ei(t,Math.max(0,e+i-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)},hi=function(t){return t},gi=Array.prototype.map,pi=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];ui=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?hi:(e=gi.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var o=t.length,i=[],s=0,u=e[0],a=0;o>0&&u>0&&(a+u+1>r&&(u=Math.max(1,r-a)),i.push(t.substring(o-=u,o+u)),!((a+=u+1)>r));)u=e[s=(s+1)%e.length];return i.reverse().join(n)}),o=void 0===t.currency?"":t.currency[0]+"",i=void 0===t.currency?"":t.currency[1]+"",s=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?hi:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(gi.call(t.numerals,String)),a=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"−":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=oi(t)).fill,n=t.align,f=t.sign,h=t.symbol,g=t.zero,p=t.width,m=t.comma,d=t.precision,y=t.trim,w=t.type;"n"===w?(m=!0,w="g"):fi[w]||(void 0===d&&(d=12),y=!0,w="g"),(g||"0"===e&&"="===n)&&(g=!0,e="0",n="=");var v="$"===h?o:"#"===h&&/[boxX]/.test(w)?"0"+w.toLowerCase():"",b="$"===h?i:/[%p]/.test(w)?a:"",x=fi[w],M=/[defgprs%]/.test(w);function _(t){var o,i,a,h=v,_=b;if("c"===w)_=x(t)+_,t="";else{var S=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:x(Math.abs(t),d),y&&(t=function(t){t:for(var e,n=t.length,r=1,o=-1;r<n;++r)switch(t[r]){case".":o=e=r;break;case"0":0===o&&(o=r),e=r;break;default:if(!+t[r])break t;o>0&&(o=0)}return o>0?t.slice(0,o)+t.slice(e+1):t}(t)),S&&0==+t&&"+"!==f&&(S=!1),h=(S?"("===f?f:l:"-"===f||"("===f?"":f)+h,_=("s"===w?pi[8+si/3]:"")+_+(S&&"("===f?")":""),M)for(o=-1,i=t.length;++o<i;)if(48>(a=t.charCodeAt(o))||a>57){_=(46===a?s+t.slice(o+1):t.slice(o))+_,t=t.slice(0,o);break}}m&&!g&&(t=r(t,1/0));var E=h.length+t.length+_.length,k=E<p?new Array(p-E+1).join(e):"";switch(m&&g&&(t=r(k+t,k.length?p-_.length:1/0),k=""),n){case"<":t=h+t+_+k;break;case"=":t=h+k+t+_;break;case"^":t=k.slice(0,E=k.length>>1)+h+t+_+k.slice(E);break;default:t=k+h+t+_}return u(t)}return d=void 0===d?6:/[gprs]/.test(w)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),_.toString=function(){return t+""},_}return{format:f,formatPrefix:function(t,e){var n=f(((t=oi(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(ni(e)/3))),o=Math.pow(10,-r),i=pi[8+r/3];return function(t){return n(o*t)+i}}}}({thousands:",",grouping:[3],currency:["$",""]}),ai=ui.format,li=ui.formatPrefix;var mi=Math.sqrt(50),di=Math.sqrt(10),yi=Math.sqrt(2);function wi(t,e,n){var r,o,i,s,u=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(o=t,t=e,e=o),0===(s=vi(t,e,n))||!isFinite(s))return[];if(s>0){let n=Math.round(t/s),r=Math.round(e/s);for(n*s<t&&++n,r*s>e&&--r,i=new Array(o=r-n+1);++u<o;)i[u]=(n+u)*s}else{s=-s;let n=Math.round(t*s),r=Math.round(e*s);for(n/s<t&&++n,r/s>e&&--r,i=new Array(o=r-n+1);++u<o;)i[u]=(n+u)/s}return r&&i.reverse(),i}function vi(t,e,n){var r=(e-t)/Math.max(0,n),o=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,o);return o>=0?(i>=mi?10:i>=di?5:i>=yi?2:1)*Math.pow(10,o):-Math.pow(10,-o)/(i>=mi?10:i>=di?5:i>=yi?2:1)}function bi(t,e){return null==t||null==e?NaN:t<e?-1:t>e?1:t>=e?0:NaN}function xi(t){let e=t,n=t,r=t;function o(t,e,o=0,i=t.length){if(o<i){if(0!==n(e,e))return i;do{const n=o+i>>>1;r(t[n],e)<0?o=n+1:i=n}while(o<i)}return o}return 2!==t.length&&(e=(e,n)=>t(e)-n,n=bi,r=(e,n)=>bi(t(e),n)),{left:o,center:function(t,n,r=0,i=t.length){const s=o(t,n,r,i-1);return s>r&&e(t[s-1],n)>-e(t[s],n)?s-1:s},right:function(t,e,o=0,i=t.length){if(o<i){if(0!==n(e,e))return i;do{const n=o+i>>>1;r(t[n],e)<=0?o=n+1:i=n}while(o<i)}return o}}}const Mi=xi(bi),_i=Mi.right;Mi.left,xi((function(t){return null===t?NaN:+t})).center;var Si=_i,Ei=function(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}};function ki(t){return+t}var Ai=[0,1];function $i(t){return t}function ji(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=isNaN(e)?NaN:.5,function(){return n});var n}function Ni(t,e,n){var r=t[0],o=t[1],i=e[0],s=e[1];return o<r?(r=ji(o,r),i=n(s,i)):(r=ji(r,o),i=n(i,s)),function(t){return i(r(t))}}function Ri(t,e,n){var r=Math.min(t.length,e.length)-1,o=new Array(r),i=new Array(r),s=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++s<r;)o[s]=ji(t[s],t[s+1]),i[s]=n(e[s],e[s+1]);return function(e){var n=Si(t,e,1,r)-1;return i[n](o[n](e))}}function Oi(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Ti(){var t,e,n,r,o,i,s=Ai,u=Ai,a=Rr,l=$i;function c(){var t,e,n,a=Math.min(s.length,u.length);return l!==$i&&(t=s[0],e=s[a-1],t>e&&(n=t,t=e,e=n),l=function(n){return Math.max(t,Math.min(e,n))}),r=a>2?Ri:Ni,o=i=null,f}function f(e){return null==e||isNaN(e=+e)?n:(o||(o=r(s.map(t),u,a)))(t(l(e)))}return f.invert=function(n){return l(e((i||(i=r(u,s.map(t),Sr)))(n)))},f.domain=function(t){return arguments.length?(s=Array.from(t,ki),c()):s.slice()},f.range=function(t){return arguments.length?(u=Array.from(t),c()):u.slice()},f.rangeRound=function(t){return u=Array.from(t),a=Ei,c()},f.clamp=function(t){return arguments.length?(l=!!t||$i,c()):l!==$i},f.interpolate=function(t){return arguments.length?(a=t,c()):a},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,c()}}function qi(){return Ti()($i,$i)}function Pi(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function Ci(t,e){switch(arguments.length){case 0:break;case 1:"function"==typeof t?this.interpolator(t):this.range(t);break;default:this.domain(t),"function"==typeof e?this.interpolator(e):this.range(e)}return this}function Ii(t,e,n,r){var o,i=function(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),o=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/o;return i>=mi?o*=10:i>=di?o*=5:i>=yi&&(o*=2),e<t?-o:o}(t,e,n);switch((r=oi(null==r?",f":r)).type){case"s":var s=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(o=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(ni(e)/3)))-ni(Math.abs(t)))}(i,s))||(r.precision=o),li(r,s);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(o=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,ni(e)-ni(t))+1}(i,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=o-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(o=function(t){return Math.max(0,-ni(Math.abs(t)))}(i))||(r.precision=o-2*("%"===r.type))}return ai(r)}function zi(t){var e=t.domain;return t.ticks=function(t){var n=e();return wi(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return Ii(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,o,i=e(),s=0,u=i.length-1,a=i[s],l=i[u],c=10;for(l<a&&(o=a,a=l,l=o,o=s,s=u,u=o);c-- >0;){if((o=vi(a,l,n))===r)return i[s]=a,i[u]=l,e(i);if(o>0)a=Math.floor(a/o)*o,l=Math.ceil(l/o)*o;else{if(!(o<0))break;a=Math.ceil(a*o)/o,l=Math.floor(l*o)/o}r=o}return t},t}function Vi(){var t=qi();return t.copy=function(){return Oi(t,Vi())},Pi.apply(t,arguments),zi(t)}function Di(){var t,e,n,r,o,i=0,s=1,u=$i,a=!1;function l(e){return null==e||isNaN(e=+e)?o:u(0===n?.5:(e=(r(e)-t)*n,a?Math.max(0,Math.min(1,e)):e))}function c(t){return function(e){var n,r;return arguments.length?([n,r]=e,u=t(n,r),l):[u(0),u(1)]}}return l.domain=function(o){return arguments.length?([i,s]=o,t=r(i=+i),e=r(s=+s),n=t===e?0:1/(e-t),l):[i,s]},l.clamp=function(t){return arguments.length?(a=!!t,l):a},l.interpolator=function(t){return arguments.length?(u=t,l):u},l.range=c(Rr),l.rangeRound=c(Ei),l.unknown=function(t){return arguments.length?(o=t,l):o},function(o){return r=o,t=o(i),e=o(s),n=t===e?0:1/(e-t),l}}function Fi(t,e){return e.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function Bi(){var t=zi(Di()($i));return t.copy=function(){return Fi(t,Bi())},Ci.apply(t,arguments)}var Li=function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n},Xi=t=>vr(t[t.length-1]),Ui=Xi(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Li)),Hi=Xi(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Li));function Yi(t){return((t=Math.exp(t))+1/t)/2}(function t(e,n,r){function o(t,o){var i,s,u=t[0],a=t[1],l=t[2],c=o[0],f=o[1],h=o[2],g=c-u,p=f-a,m=g*g+p*p;if(m<1e-12)s=Math.log(h/l)/e,i=function(t){return[u+t*g,a+t*p,l*Math.exp(e*t*s)]};else{var d=Math.sqrt(m),y=(h*h-l*l+r*m)/(2*l*n*d),w=(h*h-l*l-r*m)/(2*h*n*d),v=Math.log(Math.sqrt(y*y+1)-y),b=Math.log(Math.sqrt(w*w+1)-w);s=(b-v)/e,i=function(t){var r,o=t*s,i=Yi(v),c=l/(n*d)*(i*(r=e*o+v,((r=Math.exp(2*r))-1)/(r+1))-function(t){return((t=Math.exp(t))-1/t)/2}(v));return[u+c*g,a+c*p,l*i/Yi(e*o+v)]}}return i.duration=1e3*s*e/Math.SQRT2,i}return o.rho=function(e){var n=Math.max(.001,+e),r=n*n;return t(n,r,r*r)},o})(Math.SQRT2,2,4);function Qi(t,e,n){this.k=t,this.x=e,this.y=n}Qi.prototype={constructor:Qi,scale:function(t){return 1===t?this:new Qi(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new Qi(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new Qi(1,0,0);Qi.prototype;function Gi(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null==n)return;var r,o,i=[],s=!0,u=!1;try{for(n=n.call(t);!(s=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);s=!0);}catch(t){u=!0,o=t}finally{try{s||null==n.return||n.return()}finally{if(u)throw o}}return i}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return Ki(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Ki(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ki(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Wi(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Ji=function(){function t(e,n,r,o){var i=Gi(r,2),s=i[0],u=i[1],a=Gi(o,2),l=a[0],c=a[1];!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.width=e,this.height=n,this.xmin=s,this.xmax=u,this.xToViewport=Vi().domain([s,u]).range([0,e]),this.yToViewport=Vi().domain([l,c]).range([n,0])}var e,n,r;return e=t,(n=[{key:"x",value:function(t){return this.xToViewport.invert(t)}},{key:"y",value:function(t){return this.yToViewport.invert(t)}},{key:"u",value:function(t){return this.xToViewport(t)}},{key:"v",value:function(t){return this.yToViewport(t)}},{key:"xDomain",value:function(){return this.xToViewport.domain()}},{key:"yDomain",value:function(){return this.yToViewport.domain()}}])&&Wi(e.prototype,n),r&&Wi(e,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Zi(t,e,n){return Math.min(Math.max(t,e),n)}function ts(t){return(ts="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function es(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ns(t,e){return(ns=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function rs(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=ss(t);if(e){var o=ss(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return os(this,n)}}function os(t,e){if(e&&("object"===ts(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return is(t)}function is(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ss(t){return(ss=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function us(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null==n)return;var r,o,i=[],s=!0,u=!1;try{for(n=n.call(t);!(s=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);s=!0);}catch(t){u=!0,o=t}finally{try{s||null==n.return||n.return()}finally{if(u)throw o}}return i}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return as(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return as(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function as(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function ls(t,e,n){var r=t.slice();return r[6]=e[n],r[8]=n,r}function cs(t){var e,n,r,o;return{c:function(){_(e=v("ellipse"),"rx",n=t[6].x),_(e,"ry",r=t[6].y),_(e,"fill",o=t[2](t[8])),_(e,"transform",t[0]),_(e,"vector-effect","non-scaling-stroke")},m:function(t,n){m(t,e,n)},p:function(t,i){2&i&&n!==(n=t[6].x)&&_(e,"rx",n),2&i&&r!==(r=t[6].y)&&_(e,"ry",r),4&i&&o!==(o=t[2](t[8]))&&_(e,"fill",o),1&i&&_(e,"transform",t[0])},d:function(t){t&&d(e)}}}function fs(t){for(var e,n=t[1],o=[],i=0;i<n.length;i+=1)o[i]=cs(ls(t,n,i));return{c:function(){for(var t=0;t<o.length;t+=1)o[t].c();e=b("")},m:function(t,n){for(var r=0;r<o.length;r+=1)o[r].m(t,n);m(t,e,n)},p:function(t,r){var i=us(r,1)[0];if(7&i){var s;for(n=t[1],s=0;s<n.length;s+=1){var u=ls(t,n,s);o[s]?o[s].p(u,i):(o[s]=cs(u),o[s].c(),o[s].m(e.parentNode,e))}for(;s<o.length;s+=1)o[s].d(1);o.length=n.length}},i:r,o:r,d:function(t){y(o,t),t&&d(e)}}}function hs(t,e,n){var r=e.context,o=void 0===r?new Ji(300,300,[-4,4],[-4,4]):r,i=e.gaussian,s=void 0===i?new Jt([0,0],[[1,.7],[.7,2]]):i,u=e.contours,a=void 0===u?[Math.sqrt(4.61),Math.sqrt(3.22),Math.sqrt(2.41),Math.sqrt(1.83),Math.sqrt(1.39),Math.sqrt(1.02),Math.sqrt(.731),Math.sqrt(.446),Math.sqrt(.211)]:u,l=e.transform,c=e.radii,f=e.color;return t.$$set=function(t){"context"in t&&n(3,o=t.context),"gaussian"in t&&n(4,s=t.gaussian),"contours"in t&&n(5,a=t.contours),"transform"in t&&n(0,l=t.transform),"radii"in t&&n(1,c=t.radii),"color"in t&&n(2,f=t.color)},t.$$.update=function(){if(24&t.$$.dirty){var e=us(s.getMean(),2),r=e[0],i=e[1],u=us(s.transformationMatrix(),2),h=us(u[0],2),g=h[0],p=h[1],m=us(u[1],2),d=m[0],y=m[1];n(0,l="matrix(".concat(g,",").concat(-d,",").concat(-p,",").concat(y,",").concat(o.u(r),",").concat(o.v(i),")"))}40&t.$$.dirty&&n(1,c=a.map((function(t){return{x:o.u(t)-o.u(0),y:o.v(0)-o.v(t)}}))),32&t.$$.dirty&&n(2,f=Bi(Ui).domain([0,a.length-1]))},[l,c,f,o,s,a]}var gs=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&ns(t,e)}(i,t);var e,n,r,o=rs(i);function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),K(is(e=o.call(this)),t,hs,fs,a,{context:3,gaussian:4,contours:5,transform:0,radii:1,color:2}),e}return e=i,n&&es(e.prototype,n),r&&es(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}(W);function ps(t){return(ps="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ms(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ds(t,e){return(ds=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ys(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=bs(t);if(e){var o=bs(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return ws(this,n)}}function ws(t,e){if(e&&("object"===ps(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return vs(t)}function vs(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function bs(t){return(bs=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function xs(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null==n)return;var r,o,i=[],s=!0,u=!1;try{for(n=n.call(t);!(s=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);s=!0);}catch(t){u=!0,o=t}finally{try{s||null==n.return||n.return()}finally{if(u)throw o}}return i}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return Ms(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Ms(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ms(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function _s(t){h(t,"svelte-wzalzu",".handleInvisible.svelte-wzalzu{fill:rgba(245, 181, 62, 0);cursor:grab}.handle.svelte-wzalzu{fill:rgb(245, 181, 62)}.handle.svelte-wzalzu:hover{stroke:gray;stroke-width:2px}")}function Ss(t){var e,n,r,o,i,s,u,a,l,c,h,g,p,y,w,b,x,M,S,E,k,A,$,j,N,R,O;return n=new gs({props:{width:t[4].width,height:t[4].height,context:t[4],gaussian:t[0]}}),{c:function(){e=v("svg"),Y(n.$$.fragment),r=v("circle"),s=v("circle"),l=v("line"),y=v("line"),S=v("circle"),A=v("circle"),_(r,"class","handle svelte-wzalzu"),_(r,"cx",o=t[4].u(t[3].e1.x)),_(r,"cy",i=t[4].v(t[3].e1.y)),_(r,"r","4"),_(s,"class","handle svelte-wzalzu"),_(s,"cx",u=t[4].u(t[3].e2.x)),_(s,"cy",a=t[4].v(t[3].e2.y)),_(s,"r","4"),_(l,"x1",c=t[4].u(t[0].mean[0])),_(l,"y1",h=t[4].v(t[0].mean[1])),_(l,"x2",g=t[4].u(t[3].e1.x)),_(l,"y2",p=t[4].v(t[3].e1.y)),_(l,"stroke","rgb(245, 181, 62)"),_(l,"stroke-width","2"),_(y,"x1",w=t[4].u(t[0].mean[0])),_(y,"y1",b=t[4].v(t[0].mean[1])),_(y,"x2",x=t[4].u(t[3].e2.x)),_(y,"y2",M=t[4].v(t[3].e2.y)),_(y,"stroke","rgb(245, 181, 62)"),_(y,"stroke-width","2"),_(S,"class","handleInvisible svelte-wzalzu"),_(S,"cx",E=t[4].u(t[3].e1.x)),_(S,"cy",k=t[4].v(t[3].e1.y)),_(S,"r","44"),_(A,"class","handleInvisible svelte-wzalzu"),_(A,"cx",$=t[4].u(t[3].e2.x)),_(A,"cy",j=t[4].v(t[3].e2.y)),_(A,"r","44"),_(e,"width",N=t[4].width),_(e,"height",R=t[4].height)},m:function(o,i){m(o,e,i),Q(n,e,null),f(e,r),f(e,s),f(e,l),f(e,y),f(e,S),t[6](S),f(e,A),t[7](A),O=!0},p:function(t,f){var m=xs(f,1)[0],d={};16&m&&(d.width=t[4].width),16&m&&(d.height=t[4].height),16&m&&(d.context=t[4]),1&m&&(d.gaussian=t[0]),n.$set(d),(!O||24&m&&o!==(o=t[4].u(t[3].e1.x)))&&_(r,"cx",o),(!O||24&m&&i!==(i=t[4].v(t[3].e1.y)))&&_(r,"cy",i),(!O||24&m&&u!==(u=t[4].u(t[3].e2.x)))&&_(s,"cx",u),(!O||24&m&&a!==(a=t[4].v(t[3].e2.y)))&&_(s,"cy",a),(!O||17&m&&c!==(c=t[4].u(t[0].mean[0])))&&_(l,"x1",c),(!O||17&m&&h!==(h=t[4].v(t[0].mean[1])))&&_(l,"y1",h),(!O||24&m&&g!==(g=t[4].u(t[3].e1.x)))&&_(l,"x2",g),(!O||24&m&&p!==(p=t[4].v(t[3].e1.y)))&&_(l,"y2",p),(!O||17&m&&w!==(w=t[4].u(t[0].mean[0])))&&_(y,"x1",w),(!O||17&m&&b!==(b=t[4].v(t[0].mean[1])))&&_(y,"y1",b),(!O||24&m&&x!==(x=t[4].u(t[3].e2.x)))&&_(y,"x2",x),(!O||24&m&&M!==(M=t[4].v(t[3].e2.y)))&&_(y,"y2",M),(!O||24&m&&E!==(E=t[4].u(t[3].e1.x)))&&_(S,"cx",E),(!O||24&m&&k!==(k=t[4].v(t[3].e1.y)))&&_(S,"cy",k),(!O||24&m&&$!==($=t[4].u(t[3].e2.x)))&&_(A,"cx",$),(!O||24&m&&j!==(j=t[4].v(t[3].e2.y)))&&_(A,"cy",j),(!O||16&m&&N!==(N=t[4].width))&&_(e,"width",N),(!O||16&m&&R!==(R=t[4].height))&&_(e,"height",R)},i:function(t){O||(X(n.$$.fragment,t),O=!0)},o:function(t){U(n.$$.fragment,t),O=!1},d:function(r){r&&d(e),G(n),t[6](null),t[7](null)}}}function Es(t,e,n){var r=this,o=function(t){return Math.sqrt(t[0]*t[0]+t[1]*t[1])},i=new Jt([0,0],[[1,0],[0,2]]),s=new qt(i.cov),u=Math.sqrt(s.realEigenvalues[0]),a=Math.sqrt(s.realEigenvalues[1]),l=e.eig,c=void 0===l?{e1:{x:s.eigenvectorMatrix.get(0,0)*u,y:s.eigenvectorMatrix.get(1,0)*u},e2:{x:s.eigenvectorMatrix.get(0,1)*a,y:s.eigenvectorMatrix.get(1,1)*a}}:l,f=e.mean,h=void 0===f?i.mean:f,g=e.context,p=void 0===g?new Ji(300,300,[-3,3],[-3,3]):g,m=e.gaussian,d=e.e1,y=e.e2;return j((function(){Nn(d).call(ti().on("drag",(function(t,e){var n=r.get(),i=n.context,s=n.eig,u=s.e2.x*s.e2.x+s.e2.y*s.e2.y,a=i.x(Zi(t.x,10,i.width-10)),l=i.y(Zi(t.y,10,i.height-10));s.e1={x:a,y:l},s.e2={x:-l*Math.sqrt(u)/o([a,l]),y:a*Math.sqrt(u)/o([a,l])},r.set({eig:s})}))),Nn(y).call(ti().on("drag",(function(t,e){var n=r.get(),i=n.context,s=n.eig,u=s.e1.x*s.e1.x+s.e1.y*s.e1.y,a=i.x(Zi(t.x,10,i.width-10)),l=i.y(Zi(t.y,10,i.height-10));s.e2={x:a,y:l},s.e1={x:l*Math.sqrt(u)/o([a,l]),y:-a*Math.sqrt(u)/o([a,l])},r.set({eig:s})})))})),t.$$set=function(t){"eig"in t&&n(3,c=t.eig),"mean"in t&&n(5,h=t.mean),"context"in t&&n(4,p=t.context),"gaussian"in t&&n(0,m=t.gaussian),"e1"in t&&n(1,d=t.e1),"e2"in t&&n(2,y=t.e2)},t.$$.update=function(){if(40&t.$$.dirty){var e=new _t([[c.e1.x,c.e2.x],[c.e1.y,c.e2.y]]);n(0,m=new Jt([h[0],h[1]],e.mmul(e.transpose())))}},[m,d,y,c,p,h,function(t){R[t?"unshift":"push"]((function(){n(1,d=t)}))},function(t){R[t?"unshift":"push"]((function(){n(2,y=t)}))}]}var ks=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&ds(t,e)}(i,t);var e,n,r,o=ys(i);function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),K(vs(e=o.call(this)),t,Es,Ss,a,{eig:3,mean:5,context:4,gaussian:0,e1:1,e2:2},_s),e}return e=i,n&&ms(e.prototype,n),r&&ms(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}(W);function As(t){return(As="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function $s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function js(t,e){return(js=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Ns(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Ts(t);if(e){var o=Ts(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Rs(this,n)}}function Rs(t,e){if(e&&("object"===As(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Os(t)}function Os(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ts(t){return(Ts=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function qs(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null==n)return;var r,o,i=[],s=!0,u=!1;try{for(n=n.call(t);!(s=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);s=!0);}catch(t){u=!0,o=t}finally{try{s||null==n.return||n.return()}finally{if(u)throw o}}return i}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return Ps(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Ps(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ps(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Cs(t){h(t,"svelte-134p43",".entry.svelte-134p43{font-size:14px;fill:rgba(0,0,0,0.8);text-anchor:middle;alignment-baseline:center}.entryBox.svelte-134p43{fill:hsl(200, 20%, 97%);stroke-width:1;stroke:rgba(0,0,0,0.2)}")}function Is(t){var e,n,o,i,s,u,a,l,c,h,g,p,y,w,x,M,E;return{c:function(){e=v("svg"),n=v("g"),o=v("rect"),i=v("text"),s=b(t[0]),u=v("g"),a=v("rect"),l=v("text"),c=b(t[2]),h=v("g"),g=v("rect"),p=v("text"),y=b(t[2]),w=v("g"),x=v("rect"),M=v("text"),E=b(t[1]),_(o,"x","0"),_(o,"y","0"),_(o,"width","50"),_(o,"height","35"),_(o,"rx","5"),_(o,"ry","5"),_(o,"class","entryBox svelte-134p43"),_(i,"x","25"),_(i,"y","23"),_(i,"class","entry svelte-134p43"),_(n,"transform","translate(1,1)"),_(a,"x","0"),_(a,"y","0"),_(a,"width","50"),_(a,"height","35"),_(a,"rx","5"),_(a,"ry","5"),_(a,"class","entryBox svelte-134p43"),_(l,"x","25"),_(l,"y","23"),_(l,"class","entry svelte-134p43"),_(u,"transform","translate(61,1)"),_(g,"x","0"),_(g,"y","0"),_(g,"width","50"),_(g,"height","35"),_(g,"rx","5"),_(g,"ry","5"),_(g,"class","entryBox svelte-134p43"),_(p,"x","25"),_(p,"y","23"),_(p,"class","entry svelte-134p43"),_(h,"transform","translate(1,46)"),_(x,"x","0"),_(x,"y","0"),_(x,"width","50"),_(x,"height","35"),_(x,"rx","5"),_(x,"ry","5"),_(x,"class","entryBox svelte-134p43"),_(M,"x","25"),_(M,"y","23"),_(M,"class","entry svelte-134p43"),_(w,"transform","translate(61,46)"),_(e,"height","82"),_(e,"width","112")},m:function(t,r){m(t,e,r),f(e,n),f(n,o),f(n,i),f(i,s),f(e,u),f(u,a),f(u,l),f(l,c),f(e,h),f(h,g),f(h,p),f(p,y),f(e,w),f(w,x),f(w,M),f(M,E)},p:function(t,e){var n=qs(e,1)[0];1&n&&S(s,t[0]),4&n&&S(c,t[2]),4&n&&S(y,t[2]),2&n&&S(E,t[1])},i:r,o:r,d:function(t){t&&d(e)}}}function zs(t,e,n){var r=e.sigma1,o=void 0===r?1:r,i=e.sigma2,s=void 0===i?1:i,u=e.corr,a=void 0===u?.5:u;return t.$$set=function(t){"sigma1"in t&&n(0,o=t.sigma1),"sigma2"in t&&n(1,s=t.sigma2),"corr"in t&&n(2,a=t.corr)},[o,s,a]}var Vs=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&js(t,e)}(i,t);var e,n,r,o=Ns(i);function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),K(Os(e=o.call(this)),t,zs,Is,a,{sigma1:0,sigma2:1,corr:2},Cs),e}return e=i,n&&$s(e.prototype,n),r&&$s(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}(W);function Ds(t){return(Ds="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Fs(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Bs(t,e){return(Bs=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Ls(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Hs(t);if(e){var o=Hs(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Xs(this,n)}}function Xs(t,e){if(e&&("object"===Ds(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Us(t)}function Us(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Hs(t){return(Hs=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Ys(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null==n)return;var r,o,i=[],s=!0,u=!1;try{for(n=n.call(t);!(s=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);s=!0);}catch(t){u=!0,o=t}finally{try{s||null==n.return||n.return()}finally{if(u)throw o}}return i}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return Qs(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Qs(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Qs(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Gs(t,e,n){var r=t.slice();return r[7]=e[n],r}function Ks(t){var e,n;return{c:function(){_(e=v("stop"),"offset",n=t[7].offset+"%"),E(e,"stop-color",t[7].color),E(e,"stop-opacity","1")},m:function(t,n){m(t,e,n)},p:function(t,r){1&r&&n!==(n=t[7].offset+"%")&&_(e,"offset",n),1&r&&E(e,"stop-color",t[7].color)},d:function(t){t&&d(e)}}}function Ws(t){for(var e,n,o,i,s,u,a,l,c,h,g,p=t[0],w=[],b=0;b<p.length;b+=1)w[b]=Ks(Gs(t,p,b));return{c:function(){e=v("svg"),n=v("defs"),o=v("linearGradient");for(var r=0;r<w.length;r+=1)w[r].c();s=v("g"),u=v("rect"),h=v("g"),_(o,"id",i="grad-"+t[4]),_(o,"x1","0%"),_(o,"y1","100%"),_(o,"x2","0%"),_(o,"y2","0%"),_(u,"x",a="-"+t[3].left),_(u,"y","0"),_(u,"width","12"),_(u,"height",l=t[2]-t[3].top-t[3].bottom),_(u,"fill",c="url('#grad-"+t[4]+"')"),_(h,"class","axis"),_(s,"transform",g="translate("+t[3].left+","+t[3].top+")"),_(e,"width","50"),_(e,"height",t[2])},m:function(r,i){m(r,e,i),f(e,n),f(n,o);for(var a=0;a<w.length;a+=1)w[a].m(o,null);f(e,s),f(s,u),f(s,h),t[6](h)},p:function(t,n){var r=Ys(n,1)[0];if(1&r){var f;for(p=t[0],f=0;f<p.length;f+=1){var h=Gs(t,p,f);w[f]?w[f].p(h,r):(w[f]=Ks(h),w[f].c(),w[f].m(o,null))}for(;f<w.length;f+=1)w[f].d(1);w.length=p.length}16&r&&i!==(i="grad-"+t[4])&&_(o,"id",i),8&r&&a!==(a="-"+t[3].left)&&_(u,"x",a),12&r&&l!==(l=t[2]-t[3].top-t[3].bottom)&&_(u,"height",l),16&r&&c!==(c="url('#grad-"+t[4]+"')")&&_(u,"fill",c),8&r&&g!==(g="translate("+t[3].left+","+t[3].top+")")&&_(s,"transform",g),4&r&&_(e,"height",t[2])},i:r,o:r,d:function(n){n&&d(e),y(w,n),t[6](null)}}}function Js(t,e,n){var r,o=e.colorScale,i=void 0===o?Bi(Hi):o,s=e.size,u=void 0===s?150:s,a=e.margin,l=void 0===a?{top:5,right:12,bottom:5,left:18}:a,c=e.id,f=void 0===c?0:c,h=e.colorValues,g=e.colorBar;return r=function(){var t,e=current.size-current.margin.top-current.margin.bottom,n=Vi().domain(current.colorScale.domain()).range([e,0]),r=(t=n,se(2,t)).tickFormat(ai(".2f")).ticks(5);Nn(g).call(r)},$().$$.before_update.push(r),t.$$set=function(t){"colorScale"in t&&n(5,i=t.colorScale),"size"in t&&n(2,u=t.size),"margin"in t&&n(3,l=t.margin),"id"in t&&n(4,f=t.id),"colorValues"in t&&n(0,h=t.colorValues),"colorBar"in t&&n(1,g=t.colorBar)},t.$$.update=function(){if(32&t.$$.dirty){var e=i.domain(),r=(e[1]-e[0])/11;n(0,h=function(t,e,n){t=+t,e=+e,n=(o=arguments.length)<2?(e=t,t=0,1):o<3?1:+n;for(var r=-1,o=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(o);++r<o;)i[r]=t+r*n;return i}(e[0],e[1]+r,r).map((function(t,e){return{offset:e/11*100,color:i(t)}})))}},[h,g,u,l,f,i,function(t){R[t?"unshift":"push"]((function(){n(1,g=t)}))}]}var Zs=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Bs(t,e)}(i,t);var e,n,r,o=Ls(i);function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),K(Us(e=o.call(this)),t,Js,Ws,a,{colorScale:5,size:2,margin:3,id:4,colorValues:0,colorBar:1}),e}return e=i,n&&Fs(e.prototype,n),r&&Fs(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}(W);function tu(t){return(tu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function eu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function nu(t,e){return(nu=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ru(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=su(t);if(e){var o=su(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return ou(this,n)}}function ou(t,e){if(e&&("object"===tu(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return iu(t)}function iu(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function su(t){return(su=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function uu(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null==n)return;var r,o,i=[],s=!0,u=!1;try{for(n=n.call(t);!(s=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);s=!0);}catch(t){u=!0,o=t}finally{try{s||null==n.return||n.return()}finally{if(u)throw o}}return i}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return au(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return au(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function au(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function lu(t){h(t,"svelte-1gc1gg1","svg.svelte-1gc1gg1{width:100%;height:auto}.gauss-grid.svelte-1gc1gg1{display:inline-grid;grid-template-columns:1fr 2fr;grid-auto-rows:min-content;text-align:center}@media only screen and (max-width: 1168px){.gauss-grid.svelte-1gc1gg1{display:inline-grid;grid-template-columns:1fr;grid-auto-rows:min-content;text-align:center}}.grid-item.svelte-1gc1gg1{margin:5px}.plot.svelte-1gc1gg1{float:left}")}function cu(t){var e,n,r,o,i,s,u,a,l,c,h,g,p,y,M,S,E,k,A,$,j,N,R,O,T,q,P,C,I,z,V,D,F,B,L,H,K,W,J,Z,tt={sigma1:t[3].cov.get(0,0),sigma2:t[3].cov.get(1,1),cov:t[3].cov.get(0,1),context:t[2]};return o=new ks({props:tt}),t[4](o),g=new Zs({props:{colorScale:t[1]}}),E=new Vs({props:{sigma1:fu(t[3].cov.get(0,0)),sigma2:fu(t[3].cov.get(1,1)),corr:fu(t[3].cov.get(0,1))}}),{c:function(){e=w("div"),n=w("div"),r=v("svg"),Y(o.$$.fragment),a=x(),l=w("div"),c=v("svg"),h=v("g"),Y(g.$$.fragment),p=v("text"),y=v("tspan"),M=b("Covariance matrix (Σ)"),S=v("g"),Y(E.$$.fragment),k=v("text"),A=b("By dragging the handles you\n        "),$=v("tspan"),j=b("can adjust the variance along"),N=x(),R=v("tspan"),O=b("each dimension, as well as the"),T=x(),q=v("tspan"),P=b("correlation between the two"),C=x(),I=v("tspan"),z=b("random variables. "),V=v("tspan"),D=b("Violet"),F=x(),B=v("tspan"),L=b("values show a high probability"),H=x(),K=v("tspan"),W=b("inside the distribution."),J=x(),_(r,"width",i=t[2].width),_(r,"height",s=t[2].height),_(r,"viewBox",u="0 0 "+t[2].width+" "+t[2].height),_(r,"class","plot svelte-1gc1gg1"),_(n,"class","grid-item svelte-1gc1gg1"),_(h,"transform","translate(0,20)"),_(y,"font-weight","bold"),_(p,"x","70"),_(p,"y","40"),_(p,"class","annotation"),_(S,"transform","translate(82,50)"),_($,"x","230"),_($,"dy","1.5em"),_(R,"x","230"),_(R,"dy","1.5em"),_(q,"x","230"),_(q,"dy","1.5em"),_(V,"fill","rgb(73, 0, 106)"),_(V,"font-style","italic"),_(I,"x","230"),_(I,"dy","1.5em"),_(B,"x","230"),_(B,"dy","1.5em"),_(K,"x","230"),_(K,"dy","1.5em"),_(k,"x","230"),_(k,"y","30"),_(k,"class","annotation"),_(c,"width","450"),_(c,"height","200"),_(c,"class","svelte-1gc1gg1"),_(l,"class","grid-item svelte-1gc1gg1"),_(e,"class","gauss-grid svelte-1gc1gg1")},m:function(t,i){m(t,e,i),f(e,n),f(n,r),Q(o,r,null),f(e,a),f(e,l),f(l,c),f(c,h),Q(g,h,null),f(c,p),f(p,y),f(y,M),f(c,S),Q(E,S,null),f(c,k),f(k,A),f(k,$),f($,j),f(k,N),f(k,R),f(R,O),f(k,T),f(k,q),f(q,P),f(k,C),f(k,I),f(I,z),f(I,V),f(V,D),f(k,F),f(k,B),f(B,L),f(k,H),f(k,K),f(K,W),m(t,J,i),Z=!0},p:function(t,e){var n=uu(e,1)[0],a={};8&n&&(a.sigma1=t[3].cov.get(0,0)),8&n&&(a.sigma2=t[3].cov.get(1,1)),8&n&&(a.cov=t[3].cov.get(0,1)),4&n&&(a.context=t[2]),o.$set(a),(!Z||4&n&&i!==(i=t[2].width))&&_(r,"width",i),(!Z||4&n&&s!==(s=t[2].height))&&_(r,"height",s),(!Z||4&n&&u!==(u="0 0 "+t[2].width+" "+t[2].height))&&_(r,"viewBox",u);var l={};2&n&&(l.colorScale=t[1]),g.$set(l);var c={};8&n&&(c.sigma1=fu(t[3].cov.get(0,0))),8&n&&(c.sigma2=fu(t[3].cov.get(1,1))),8&n&&(c.corr=fu(t[3].cov.get(0,1))),E.$set(c)},i:function(t){Z||(X(o.$$.fragment,t),X(g.$$.fragment,t),X(E.$$.fragment,t),Z=!0)},o:function(t){U(o.$$.fragment,t),U(g.$$.fragment,t),U(E.$$.fragment,t),Z=!1},d:function(n){n&&d(e),t[4](null),G(o),G(g),G(E),n&&d(J)}}}function fu(t){return Math.round(100*t)/100}function hu(t,e,n){var r=this,o=e.gaus,i=e.scale,s=void 0===i?Bi(Ui).domain([0,.2]):i,u=e.context,a=void 0===u?new Ji(200,200,[-2,2],[-2,2]):u,l=e.gaussian,c=void 0===l?new Jt([0,0],[[1,.7],[.7,2]]):l;return j((function(){o.on("update",(function(t){t._changed;var e=t.current;t._previous;r.set({gaussian:e.gaussian})}))})),t.$$set=function(t){"gaus"in t&&n(0,o=t.gaus),"scale"in t&&n(1,s=t.scale),"context"in t&&n(2,a=t.context),"gaussian"in t&&n(3,c=t.gaussian)},[o,s,a,c,function(t){R[t?"unshift":"push"]((function(){n(0,o=t)}))}]}var gu=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&nu(t,e)}(i,t);var e,n,r,o=ru(i);function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),K(iu(e=o.call(this)),t,hu,cu,a,{gaus:0,scale:1,context:2,gaussian:3},lu),e}return e=i,n&&eu(e.prototype,n),r&&eu(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}(W),pu=document.getElementById("svelte-example-dfigure");pu.addEventListener("ready",(function(){var t=pu.querySelector("#svelte-example-target");new et({target:t})}));var mu=document.getElementById("multivariate-dfigure");mu.addEventListener("ready",(function(){var t=mu.querySelector("#multivariate-target");new gu({target:t})}))},3:function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},4:function(t,e){(function(e){t.exports=e}).call(this,{})},44:function(t,e,n){var r=n(133),o=n(134),i=n(135),s=n(136),u=n(137),a=n(138),l=n(139);l.alea=r,l.xor128=o,l.xorwow=i,l.xorshift7=s,l.xor4096=u,l.tychei=a,t.exports=l}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,