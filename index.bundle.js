(()=>{var t={91:(t,e,n)=>{"use strict";n.r(e),n.d(e,{isAnyArray:()=>o});const r=Object.prototype.toString;function o(t){const e=r.call(t);return e.endsWith("Array]")&&!e.includes("Big")}},805:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>o});var r=n(91);function o(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(0,r.isAnyArray)(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");if(void 0!==n.output){if(!(0,r.isAnyArray)(n.output))throw new TypeError("output option must be an array if specified");e=n.output}else e=new Array(t.length);var o=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(0,r.isAnyArray)(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");var n=e.fromIndex,o=void 0===n?0:n,i=e.toIndex,s=void 0===i?t.length:i;if(o<0||o>=t.length||!Number.isInteger(o))throw new Error("fromIndex must be a positive integer smaller than length");if(s<=o||s>t.length||!Number.isInteger(s))throw new Error("toIndex must be an integer greater than fromIndex and at most equal to length");for(var u=t[o],a=o+1;a<s;a++)t[a]<u&&(u=t[a]);return u}(t),i=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(0,r.isAnyArray)(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");var n=e.fromIndex,o=void 0===n?0:n,i=e.toIndex,s=void 0===i?t.length:i;if(o<0||o>=t.length||!Number.isInteger(o))throw new Error("fromIndex must be a positive integer smaller than length");if(s<=o||s>t.length||!Number.isInteger(s))throw new Error("toIndex must be an integer greater than fromIndex and at most equal to length");for(var u=t[o],a=o+1;a<s;a++)t[a]>u&&(u=t[a]);return u}(t);if(o===i)throw new RangeError("minimum and maximum input values are equal. Cannot rescale a constant array");var s=n.min,u=void 0===s?n.autoMinMax?o:0:s,a=n.max,l=void 0===a?n.autoMinMax?i:1:a;if(u>=l)throw new RangeError("min option must be smaller than max option");for(var c=(l-u)/(i-o),f=0;f<t.length;f++)e[f]=(t[f]-o)*c+u;return e}},406:(t,e,n)=>{"use strict";var r=n(91),o=n(805);const i=" ".repeat(2),s=" ".repeat(4);function u(t,e={}){const{maxRows:n=15,maxColumns:r=10,maxNumSize:o=8,padMinus:u="auto"}=e;return`${t.constructor.name} {\n${i}[\n${s}${function(t,e,n,r,o){const{rows:i,columns:u}=t,l=Math.min(i,e),c=Math.min(u,n),f=[];if("auto"===o){o=!1;t:for(let e=0;e<l;e++)for(let n=0;n<c;n++)if(t.get(e,n)<0){o=!0;break t}}for(let e=0;e<l;e++){let n=[];for(let i=0;i<c;i++)n.push(a(t.get(e,i),r,o));f.push(`${n.join(" ")}`)}return c!==u&&(f[f.length-1]+=` ... ${u-n} more columns`),l!==i&&f.push(`... ${i-e} more rows`),f.join(`\n${s}`)}(t,n,r,o,u)}\n${i}]\n${i}rows: ${t.rows}\n${i}columns: ${t.columns}\n}`}function a(t,e,n){return(t>=0&&n?` ${l(t,e-1)}`:l(t,e)).padEnd(e)}function l(t,e){let n=t.toString();if(n.length<=e)return n;let r=t.toFixed(e);if(r.length>e&&(r=t.toFixed(Math.max(0,e-(r.length-e)))),r.length<=e&&!r.startsWith("0.000")&&!r.startsWith("-0.000"))return r;let o=t.toExponential(e);return o.length>e&&(o=t.toExponential(Math.max(0,e-(o.length-e)))),o.slice(0)}function c(t,e,n){let r=n?t.rows:t.rows-1;if(e<0||e>r)throw new RangeError("Row index out of range")}function f(t,e,n){let r=n?t.columns:t.columns-1;if(e<0||e>r)throw new RangeError("Column index out of range")}function h(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.columns)throw new RangeError("vector size must be the same as the number of columns");return e}function p(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.rows)throw new RangeError("vector size must be the same as the number of rows");return e}function m(t,e){if(!r.isAnyArray(e))throw new TypeError("row indices must be an array");for(let n=0;n<e.length;n++)if(e[n]<0||e[n]>=t.rows)throw new RangeError("row indices are out of range")}function g(t,e){if(!r.isAnyArray(e))throw new TypeError("column indices must be an array");for(let n=0;n<e.length;n++)if(e[n]<0||e[n]>=t.columns)throw new RangeError("column indices are out of range")}function d(t,e,n,r,o){if(5!==arguments.length)throw new RangeError("expected 4 arguments");if(w("startRow",e),w("endRow",n),w("startColumn",r),w("endColumn",o),e>n||r>o||e<0||e>=t.rows||n<0||n>=t.rows||r<0||r>=t.columns||o<0||o>=t.columns)throw new RangeError("Submatrix indices are out of range")}function y(t,e=0){let n=[];for(let r=0;r<t;r++)n.push(e);return n}function w(t,e){if("number"!=typeof e)throw new TypeError(`${t} must be a number`)}function v(t){if(t.isEmpty())throw new Error("Empty matrix has no elements to index")}class b{static from1DArray(t,e,n){if(t*e!==n.length)throw new RangeError("data length does not match given dimensions");let r=new _(t,e);for(let o=0;o<t;o++)for(let t=0;t<e;t++)r.set(o,t,n[o*e+t]);return r}static rowVector(t){let e=new _(1,t.length);for(let n=0;n<t.length;n++)e.set(0,n,t[n]);return e}static columnVector(t){let e=new _(t.length,1);for(let n=0;n<t.length;n++)e.set(n,0,t[n]);return e}static zeros(t,e){return new _(t,e)}static ones(t,e){return new _(t,e).fill(1)}static rand(t,e,n={}){if("object"!=typeof n)throw new TypeError("options must be an object");const{random:r=Math.random}=n;let o=new _(t,e);for(let n=0;n<t;n++)for(let t=0;t<e;t++)o.set(n,t,r());return o}static randInt(t,e,n={}){if("object"!=typeof n)throw new TypeError("options must be an object");const{min:r=0,max:o=1e3,random:i=Math.random}=n;if(!Number.isInteger(r))throw new TypeError("min must be an integer");if(!Number.isInteger(o))throw new TypeError("max must be an integer");if(r>=o)throw new RangeError("min must be smaller than max");let s=o-r,u=new _(t,e);for(let n=0;n<t;n++)for(let t=0;t<e;t++){let e=r+Math.round(i()*s);u.set(n,t,e)}return u}static eye(t,e,n){void 0===e&&(e=t),void 0===n&&(n=1);let r=Math.min(t,e),o=this.zeros(t,e);for(let t=0;t<r;t++)o.set(t,t,n);return o}static diag(t,e,n){let r=t.length;void 0===e&&(e=r),void 0===n&&(n=e);let o=Math.min(r,e,n),i=this.zeros(e,n);for(let e=0;e<o;e++)i.set(e,e,t[e]);return i}static min(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);let n=t.rows,r=t.columns,o=new _(n,r);for(let i=0;i<n;i++)for(let n=0;n<r;n++)o.set(i,n,Math.min(t.get(i,n),e.get(i,n)));return o}static max(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);let n=t.rows,r=t.columns,o=new this(n,r);for(let i=0;i<n;i++)for(let n=0;n<r;n++)o.set(i,n,Math.max(t.get(i,n),e.get(i,n)));return o}static checkMatrix(t){return b.isMatrix(t)?t:new _(t)}static isMatrix(t){return null!=t&&"Matrix"===t.klass}get size(){return this.rows*this.columns}apply(t){if("function"!=typeof t)throw new TypeError("callback must be a function");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)t.call(this,e,n);return this}to1DArray(){let t=[];for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)t.push(this.get(e,n));return t}to2DArray(){let t=[];for(let e=0;e<this.rows;e++){t.push([]);for(let n=0;n<this.columns;n++)t[e].push(this.get(e,n))}return t}toJSON(){return this.to2DArray()}isRowVector(){return 1===this.rows}isColumnVector(){return 1===this.columns}isVector(){return 1===this.rows||1===this.columns}isSquare(){return this.rows===this.columns}isEmpty(){return 0===this.rows||0===this.columns}isSymmetric(){if(this.isSquare()){for(let t=0;t<this.rows;t++)for(let e=0;e<=t;e++)if(this.get(t,e)!==this.get(e,t))return!1;return!0}return!1}isEchelonForm(){let t=0,e=0,n=-1,r=!0,o=!1;for(;t<this.rows&&r;){for(e=0,o=!1;e<this.columns&&!1===o;)0===this.get(t,e)?e++:1===this.get(t,e)&&e>n?(o=!0,n=e):(r=!1,o=!0);t++}return r}isReducedEchelonForm(){let t=0,e=0,n=-1,r=!0,o=!1;for(;t<this.rows&&r;){for(e=0,o=!1;e<this.columns&&!1===o;)0===this.get(t,e)?e++:1===this.get(t,e)&&e>n?(o=!0,n=e):(r=!1,o=!0);for(let n=e+1;n<this.rows;n++)0!==this.get(t,n)&&(r=!1);t++}return r}echelonForm(){let t=this.clone(),e=0,n=0;for(;e<t.rows&&n<t.columns;){let r=e;for(let o=e;o<t.rows;o++)t.get(o,n)>t.get(r,n)&&(r=o);if(0===t.get(r,n))n++;else{t.swapRows(e,r);let o=t.get(e,n);for(let r=n;r<t.columns;r++)t.set(e,r,t.get(e,r)/o);for(let r=e+1;r<t.rows;r++){let o=t.get(r,n)/t.get(e,n);t.set(r,n,0);for(let i=n+1;i<t.columns;i++)t.set(r,i,t.get(r,i)-t.get(e,i)*o)}e++,n++}}return t}reducedEchelonForm(){let t=this.echelonForm(),e=t.columns,n=t.rows,r=n-1;for(;r>=0;)if(0===t.maxRow(r))r--;else{let o=0,i=!1;for(;o<n&&!1===i;)1===t.get(r,o)?i=!0:o++;for(let n=0;n<r;n++){let i=t.get(n,o);for(let s=o;s<e;s++){let e=t.get(n,s)-i*t.get(r,s);t.set(n,s,e)}}r--}return t}set(){throw new Error("set method is unimplemented")}get(){throw new Error("get method is unimplemented")}repeat(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{rows:e=1,columns:n=1}=t;if(!Number.isInteger(e)||e<=0)throw new TypeError("rows must be a positive integer");if(!Number.isInteger(n)||n<=0)throw new TypeError("columns must be a positive integer");let r=new _(this.rows*e,this.columns*n);for(let t=0;t<e;t++)for(let e=0;e<n;e++)r.setSubMatrix(this,this.rows*t,this.columns*e);return r}fill(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,t);return this}neg(){return this.mulS(-1)}getRow(t){c(this,t);let e=[];for(let n=0;n<this.columns;n++)e.push(this.get(t,n));return e}getRowVector(t){return _.rowVector(this.getRow(t))}setRow(t,e){c(this,t),e=h(this,e);for(let n=0;n<this.columns;n++)this.set(t,n,e[n]);return this}swapRows(t,e){c(this,t),c(this,e);for(let n=0;n<this.columns;n++){let r=this.get(t,n);this.set(t,n,this.get(e,n)),this.set(e,n,r)}return this}getColumn(t){f(this,t);let e=[];for(let n=0;n<this.rows;n++)e.push(this.get(n,t));return e}getColumnVector(t){return _.columnVector(this.getColumn(t))}setColumn(t,e){f(this,t),e=p(this,e);for(let n=0;n<this.rows;n++)this.set(n,t,e[n]);return this}swapColumns(t,e){f(this,t),f(this,e);for(let n=0;n<this.rows;n++){let r=this.get(n,t);this.set(n,t,this.get(n,e)),this.set(n,e,r)}return this}addRowVector(t){t=h(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)+t[n]);return this}subRowVector(t){t=h(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)-t[n]);return this}mulRowVector(t){t=h(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)*t[n]);return this}divRowVector(t){t=h(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)/t[n]);return this}addColumnVector(t){t=p(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)+t[e]);return this}subColumnVector(t){t=p(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)-t[e]);return this}mulColumnVector(t){t=p(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)*t[e]);return this}divColumnVector(t){t=p(this,t);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)/t[e]);return this}mulRow(t,e){c(this,t);for(let n=0;n<this.columns;n++)this.set(t,n,this.get(t,n)*e);return this}mulColumn(t,e){f(this,t);for(let n=0;n<this.rows;n++)this.set(n,t,this.get(n,t)*e);return this}max(t){if(this.isEmpty())return NaN;switch(t){case"row":{const t=new Array(this.rows).fill(Number.NEGATIVE_INFINITY);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.get(e,n)>t[e]&&(t[e]=this.get(e,n));return t}case"column":{const t=new Array(this.columns).fill(Number.NEGATIVE_INFINITY);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.get(e,n)>t[n]&&(t[n]=this.get(e,n));return t}case void 0:{let t=this.get(0,0);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.get(e,n)>t&&(t=this.get(e,n));return t}default:throw new Error(`invalid option: ${t}`)}}maxIndex(){v(this);let t=this.get(0,0),e=[0,0];for(let n=0;n<this.rows;n++)for(let r=0;r<this.columns;r++)this.get(n,r)>t&&(t=this.get(n,r),e[0]=n,e[1]=r);return e}min(t){if(this.isEmpty())return NaN;switch(t){case"row":{const t=new Array(this.rows).fill(Number.POSITIVE_INFINITY);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.get(e,n)<t[e]&&(t[e]=this.get(e,n));return t}case"column":{const t=new Array(this.columns).fill(Number.POSITIVE_INFINITY);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.get(e,n)<t[n]&&(t[n]=this.get(e,n));return t}case void 0:{let t=this.get(0,0);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.get(e,n)<t&&(t=this.get(e,n));return t}default:throw new Error(`invalid option: ${t}`)}}minIndex(){v(this);let t=this.get(0,0),e=[0,0];for(let n=0;n<this.rows;n++)for(let r=0;r<this.columns;r++)this.get(n,r)<t&&(t=this.get(n,r),e[0]=n,e[1]=r);return e}maxRow(t){if(c(this,t),this.isEmpty())return NaN;let e=this.get(t,0);for(let n=1;n<this.columns;n++)this.get(t,n)>e&&(e=this.get(t,n));return e}maxRowIndex(t){c(this,t),v(this);let e=this.get(t,0),n=[t,0];for(let r=1;r<this.columns;r++)this.get(t,r)>e&&(e=this.get(t,r),n[1]=r);return n}minRow(t){if(c(this,t),this.isEmpty())return NaN;let e=this.get(t,0);for(let n=1;n<this.columns;n++)this.get(t,n)<e&&(e=this.get(t,n));return e}minRowIndex(t){c(this,t),v(this);let e=this.get(t,0),n=[t,0];for(let r=1;r<this.columns;r++)this.get(t,r)<e&&(e=this.get(t,r),n[1]=r);return n}maxColumn(t){if(f(this,t),this.isEmpty())return NaN;let e=this.get(0,t);for(let n=1;n<this.rows;n++)this.get(n,t)>e&&(e=this.get(n,t));return e}maxColumnIndex(t){f(this,t),v(this);let e=this.get(0,t),n=[0,t];for(let r=1;r<this.rows;r++)this.get(r,t)>e&&(e=this.get(r,t),n[0]=r);return n}minColumn(t){if(f(this,t),this.isEmpty())return NaN;let e=this.get(0,t);for(let n=1;n<this.rows;n++)this.get(n,t)<e&&(e=this.get(n,t));return e}minColumnIndex(t){f(this,t),v(this);let e=this.get(0,t),n=[0,t];for(let r=1;r<this.rows;r++)this.get(r,t)<e&&(e=this.get(r,t),n[0]=r);return n}diag(){let t=Math.min(this.rows,this.columns),e=[];for(let n=0;n<t;n++)e.push(this.get(n,n));return e}norm(t="frobenius"){switch(t){case"max":return this.max();case"frobenius":return Math.sqrt(this.dot(this));default:throw new RangeError(`unknown norm type: ${t}`)}}cumulativeSum(){let t=0;for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)t+=this.get(e,n),this.set(e,n,t);return this}dot(t){b.isMatrix(t)&&(t=t.to1DArray());let e=this.to1DArray();if(e.length!==t.length)throw new RangeError("vectors do not have the same size");let n=0;for(let r=0;r<e.length;r++)n+=e[r]*t[r];return n}mmul(t){t=_.checkMatrix(t);let e=this.rows,n=this.columns,r=t.columns,o=new _(e,r),i=new Float64Array(n);for(let s=0;s<r;s++){for(let e=0;e<n;e++)i[e]=t.get(e,s);for(let t=0;t<e;t++){let e=0;for(let r=0;r<n;r++)e+=this.get(t,r)*i[r];o.set(t,s,e)}}return o}strassen2x2(t){t=_.checkMatrix(t);let e=new _(2,2);const n=this.get(0,0),r=t.get(0,0),o=this.get(0,1),i=t.get(0,1),s=this.get(1,0),u=t.get(1,0),a=this.get(1,1),l=t.get(1,1),c=(n+a)*(r+l),f=(s+a)*r,h=n*(i-l),p=a*(u-r),m=(n+o)*l,g=c+p-m+(o-a)*(u+l),d=h+m,y=f+p,w=c-f+h+(s-n)*(r+i);return e.set(0,0,g),e.set(0,1,d),e.set(1,0,y),e.set(1,1,w),e}strassen3x3(t){t=_.checkMatrix(t);let e=new _(3,3);const n=this.get(0,0),r=this.get(0,1),o=this.get(0,2),i=this.get(1,0),s=this.get(1,1),u=this.get(1,2),a=this.get(2,0),l=this.get(2,1),c=this.get(2,2),f=t.get(0,0),h=t.get(0,1),p=t.get(0,2),m=t.get(1,0),g=t.get(1,1),d=t.get(1,2),y=t.get(2,0),w=t.get(2,1),v=t.get(2,2),b=(n-i)*(-h+g),x=(-n+i+s)*(f-h+g),M=(i+s)*(-f+h),$=n*f,E=(-n+a+l)*(f-p+d),S=(-n+a)*(p-d),A=(a+l)*(-f+p),k=(-o+l+c)*(g+y-w),j=(o-c)*(g-w),O=o*y,R=(l+c)*(-y+w),N=(-o+s+u)*(d+y-v),T=(o-u)*(d-v),P=(s+u)*(-y+v),I=$+O+r*m,q=(n+r+o-i-s-l-c)*g+x+M+$+k+O+R,C=$+E+A+(n+r+o-s-u-a-l)*d+O+N+P,z=b+s*(-f+h+m-g-d-y+v)+x+$+O+N+T,V=b+x+M+$+u*w,D=O+N+T+P+i*p,L=$+E+S+l*(-f+p+m-g-d-y+w)+k+j+O,B=k+j+O+R+a*h,F=$+E+S+A+c*v;return e.set(0,0,I),e.set(0,1,q),e.set(0,2,C),e.set(1,0,z),e.set(1,1,V),e.set(1,2,D),e.set(2,0,L),e.set(2,1,B),e.set(2,2,F),e}mmulStrassen(t){t=_.checkMatrix(t);let e=this.clone(),n=e.rows,r=e.columns,o=t.rows,i=t.columns;function s(t,e,n){let r=t.rows,o=t.columns;if(r===e&&o===n)return t;{let r=b.zeros(e,n);return r=r.setSubMatrix(t,0,0),r}}r!==o&&console.warn(`Multiplying ${n} x ${r} and ${o} x ${i} matrix: dimensions do not match.`);let u=Math.max(n,o),a=Math.max(r,i);return e=s(e,u,a),function t(e,n,r,o){if(r<=512||o<=512)return e.mmul(n);r%2==1&&o%2==1?(e=s(e,r+1,o+1),n=s(n,r+1,o+1)):r%2==1?(e=s(e,r+1,o),n=s(n,r+1,o)):o%2==1&&(e=s(e,r,o+1),n=s(n,r,o+1));let i=parseInt(e.rows/2,10),u=parseInt(e.columns/2,10),a=e.subMatrix(0,i-1,0,u-1),l=n.subMatrix(0,i-1,0,u-1),c=e.subMatrix(0,i-1,u,e.columns-1),f=n.subMatrix(0,i-1,u,n.columns-1),h=e.subMatrix(i,e.rows-1,0,u-1),p=n.subMatrix(i,n.rows-1,0,u-1),m=e.subMatrix(i,e.rows-1,u,e.columns-1),g=n.subMatrix(i,n.rows-1,u,n.columns-1),d=t(b.add(a,m),b.add(l,g),i,u),y=t(b.add(h,m),l,i,u),w=t(a,b.sub(f,g),i,u),v=t(m,b.sub(p,l),i,u),x=t(b.add(a,c),g,i,u),_=t(b.sub(h,a),b.add(l,f),i,u),M=t(b.sub(c,m),b.add(p,g),i,u),$=b.add(d,v);$.sub(x),$.add(M);let E=b.add(w,x),S=b.add(y,v),A=b.sub(d,y);A.add(w),A.add(_);let k=b.zeros(2*$.rows,2*$.columns);return k=k.setSubMatrix($,0,0),k=k.setSubMatrix(E,$.rows,0),k=k.setSubMatrix(S,0,$.columns),k=k.setSubMatrix(A,$.rows,$.columns),k.subMatrix(0,r-1,0,o-1)}(e,t=s(t,u,a),u,a)}scaleRows(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{min:e=0,max:n=1}=t;if(!Number.isFinite(e))throw new TypeError("min must be a number");if(!Number.isFinite(n))throw new TypeError("max must be a number");if(e>=n)throw new RangeError("min must be smaller than max");let r=new _(this.rows,this.columns);for(let t=0;t<this.rows;t++){const i=this.getRow(t);i.length>0&&o(i,{min:e,max:n,output:i}),r.setRow(t,i)}return r}scaleColumns(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{min:e=0,max:n=1}=t;if(!Number.isFinite(e))throw new TypeError("min must be a number");if(!Number.isFinite(n))throw new TypeError("max must be a number");if(e>=n)throw new RangeError("min must be smaller than max");let r=new _(this.rows,this.columns);for(let t=0;t<this.columns;t++){const i=this.getColumn(t);i.length&&o(i,{min:e,max:n,output:i}),r.setColumn(t,i)}return r}flipRows(){const t=Math.ceil(this.columns/2);for(let e=0;e<this.rows;e++)for(let n=0;n<t;n++){let t=this.get(e,n),r=this.get(e,this.columns-1-n);this.set(e,n,r),this.set(e,this.columns-1-n,t)}return this}flipColumns(){const t=Math.ceil(this.rows/2);for(let e=0;e<this.columns;e++)for(let n=0;n<t;n++){let t=this.get(n,e),r=this.get(this.rows-1-n,e);this.set(n,e,r),this.set(this.rows-1-n,e,t)}return this}kroneckerProduct(t){t=_.checkMatrix(t);let e=this.rows,n=this.columns,r=t.rows,o=t.columns,i=new _(e*r,n*o);for(let s=0;s<e;s++)for(let e=0;e<n;e++)for(let n=0;n<r;n++)for(let u=0;u<o;u++)i.set(r*s+n,o*e+u,this.get(s,e)*t.get(n,u));return i}kroneckerSum(t){if(t=_.checkMatrix(t),!this.isSquare()||!t.isSquare())throw new Error("Kronecker Sum needs two Square Matrices");let e=this.rows,n=t.rows,r=this.kroneckerProduct(_.eye(n,n)),o=_.eye(e,e).kroneckerProduct(t);return r.add(o)}transpose(){let t=new _(this.columns,this.rows);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)t.set(n,e,this.get(e,n));return t}sortRows(t=x){for(let e=0;e<this.rows;e++)this.setRow(e,this.getRow(e).sort(t));return this}sortColumns(t=x){for(let e=0;e<this.columns;e++)this.setColumn(e,this.getColumn(e).sort(t));return this}subMatrix(t,e,n,r){d(this,t,e,n,r);let o=new _(e-t+1,r-n+1);for(let i=t;i<=e;i++)for(let e=n;e<=r;e++)o.set(i-t,e-n,this.get(i,e));return o}subMatrixRow(t,e,n){if(void 0===e&&(e=0),void 0===n&&(n=this.columns-1),e>n||e<0||e>=this.columns||n<0||n>=this.columns)throw new RangeError("Argument out of range");let r=new _(t.length,n-e+1);for(let o=0;o<t.length;o++)for(let i=e;i<=n;i++){if(t[o]<0||t[o]>=this.rows)throw new RangeError(`Row index out of range: ${t[o]}`);r.set(o,i-e,this.get(t[o],i))}return r}subMatrixColumn(t,e,n){if(void 0===e&&(e=0),void 0===n&&(n=this.rows-1),e>n||e<0||e>=this.rows||n<0||n>=this.rows)throw new RangeError("Argument out of range");let r=new _(n-e+1,t.length);for(let o=0;o<t.length;o++)for(let i=e;i<=n;i++){if(t[o]<0||t[o]>=this.columns)throw new RangeError(`Column index out of range: ${t[o]}`);r.set(i-e,o,this.get(i,t[o]))}return r}setSubMatrix(t,e,n){if((t=_.checkMatrix(t)).isEmpty())return this;d(this,e,e+t.rows-1,n,n+t.columns-1);for(let r=0;r<t.rows;r++)for(let o=0;o<t.columns;o++)this.set(e+r,n+o,t.get(r,o));return this}selection(t,e){m(this,t),g(this,e);let n=new _(t.length,e.length);for(let r=0;r<t.length;r++){let o=t[r];for(let t=0;t<e.length;t++){let i=e[t];n.set(r,t,this.get(o,i))}}return n}trace(){let t=Math.min(this.rows,this.columns),e=0;for(let n=0;n<t;n++)e+=this.get(n,n);return e}clone(){let t=new _(this.rows,this.columns);for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)t.set(e,n,this.get(e,n));return t}sum(t){switch(t){case"row":return function(t){let e=y(t.rows);for(let n=0;n<t.rows;++n)for(let r=0;r<t.columns;++r)e[n]+=t.get(n,r);return e}(this);case"column":return function(t){let e=y(t.columns);for(let n=0;n<t.rows;++n)for(let r=0;r<t.columns;++r)e[r]+=t.get(n,r);return e}(this);case void 0:return function(t){let e=0;for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)e+=t.get(n,r);return e}(this);default:throw new Error(`invalid option: ${t}`)}}product(t){switch(t){case"row":return function(t){let e=y(t.rows,1);for(let n=0;n<t.rows;++n)for(let r=0;r<t.columns;++r)e[n]*=t.get(n,r);return e}(this);case"column":return function(t){let e=y(t.columns,1);for(let n=0;n<t.rows;++n)for(let r=0;r<t.columns;++r)e[r]*=t.get(n,r);return e}(this);case void 0:return function(t){let e=1;for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)e*=t.get(n,r);return e}(this);default:throw new Error(`invalid option: ${t}`)}}mean(t){const e=this.sum(t);switch(t){case"row":for(let t=0;t<this.rows;t++)e[t]/=this.columns;return e;case"column":for(let t=0;t<this.columns;t++)e[t]/=this.rows;return e;case void 0:return e/this.size;default:throw new Error(`invalid option: ${t}`)}}variance(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");const{unbiased:n=!0,mean:o=this.mean(t)}=e;if("boolean"!=typeof n)throw new TypeError("unbiased must be a boolean");switch(t){case"row":if(!r.isAnyArray(o))throw new TypeError("mean must be an array");return function(t,e,n){const r=t.rows,o=t.columns,i=[];for(let s=0;s<r;s++){let r=0,u=0,a=0;for(let e=0;e<o;e++)a=t.get(s,e)-n[s],r+=a,u+=a*a;e?i.push((u-r*r/o)/(o-1)):i.push((u-r*r/o)/o)}return i}(this,n,o);case"column":if(!r.isAnyArray(o))throw new TypeError("mean must be an array");return function(t,e,n){const r=t.rows,o=t.columns,i=[];for(let s=0;s<o;s++){let o=0,u=0,a=0;for(let e=0;e<r;e++)a=t.get(e,s)-n[s],o+=a,u+=a*a;e?i.push((u-o*o/r)/(r-1)):i.push((u-o*o/r)/r)}return i}(this,n,o);case void 0:if("number"!=typeof o)throw new TypeError("mean must be a number");return function(t,e,n){const r=t.rows,o=t.columns,i=r*o;let s=0,u=0,a=0;for(let e=0;e<r;e++)for(let r=0;r<o;r++)a=t.get(e,r)-n,s+=a,u+=a*a;return e?(u-s*s/i)/(i-1):(u-s*s/i)/i}(this,n,o);default:throw new Error(`invalid option: ${t}`)}}standardDeviation(t,e){"object"==typeof t&&(e=t,t=void 0);const n=this.variance(t,e);if(void 0===t)return Math.sqrt(n);for(let t=0;t<n.length;t++)n[t]=Math.sqrt(n[t]);return n}center(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");const{center:n=this.mean(t)}=e;switch(t){case"row":if(!r.isAnyArray(n))throw new TypeError("center must be an array");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)-e[n])}(this,n),this;case"column":if(!r.isAnyArray(n))throw new TypeError("center must be an array");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)-e[r])}(this,n),this;case void 0:if("number"!=typeof n)throw new TypeError("center must be a number");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)-e)}(this,n),this;default:throw new Error(`invalid option: ${t}`)}}scale(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");let n=e.scale;switch(t){case"row":if(void 0===n)n=function(t){const e=[];for(let n=0;n<t.rows;n++){let r=0;for(let e=0;e<t.columns;e++)r+=Math.pow(t.get(n,e),2)/(t.columns-1);e.push(Math.sqrt(r))}return e}(this);else if(!r.isAnyArray(n))throw new TypeError("scale must be an array");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)/e[n])}(this,n),this;case"column":if(void 0===n)n=function(t){const e=[];for(let n=0;n<t.columns;n++){let r=0;for(let e=0;e<t.rows;e++)r+=Math.pow(t.get(e,n),2)/(t.rows-1);e.push(Math.sqrt(r))}return e}(this);else if(!r.isAnyArray(n))throw new TypeError("scale must be an array");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)/e[r])}(this,n),this;case void 0:if(void 0===n)n=function(t){const e=t.size-1;let n=0;for(let r=0;r<t.columns;r++)for(let o=0;o<t.rows;o++)n+=Math.pow(t.get(o,r),2)/e;return Math.sqrt(n)}(this);else if("number"!=typeof n)throw new TypeError("scale must be a number");return function(t,e){for(let n=0;n<t.rows;n++)for(let r=0;r<t.columns;r++)t.set(n,r,t.get(n,r)/e)}(this,n),this;default:throw new Error(`invalid option: ${t}`)}}toString(t){return u(this,t)}}function x(t,e){return t-e}b.prototype.klass="Matrix","undefined"!=typeof Symbol&&(b.prototype[Symbol.for("nodejs.util.inspect.custom")]=function(){return u(this)}),b.random=b.rand,b.randomInt=b.randInt,b.diagonal=b.diag,b.prototype.diagonal=b.prototype.diag,b.identity=b.eye,b.prototype.negate=b.prototype.neg,b.prototype.tensorProduct=b.prototype.kroneckerProduct;class _ extends b{constructor(t,e){if(super(),_.isMatrix(t))return t.clone();if(Number.isInteger(t)&&t>=0){if(this.data=[],!(Number.isInteger(e)&&e>=0))throw new TypeError("nColumns must be a positive integer");for(let n=0;n<t;n++)this.data.push(new Float64Array(e))}else{if(!r.isAnyArray(t))throw new TypeError("First argument must be a positive number or an array");{const n=t;if("number"!=typeof(e=(t=n.length)?n[0].length:0))throw new TypeError("Data must be a 2D array with at least one element");this.data=[];for(let r=0;r<t;r++){if(n[r].length!==e)throw new RangeError("Inconsistent array dimensions");if(!n[r].every((t=>"number"==typeof t)))throw new TypeError("Input data contains non-numeric values");this.data.push(Float64Array.from(n[r]))}}}this.rows=t,this.columns=e}set(t,e,n){return this.data[t][e]=n,this}get(t,e){return this.data[t][e]}removeRow(t){return c(this,t),this.data.splice(t,1),this.rows-=1,this}addRow(t,e){return void 0===e&&(e=t,t=this.rows),c(this,t,!0),e=Float64Array.from(h(this,e)),this.data.splice(t,0,e),this.rows+=1,this}removeColumn(t){f(this,t);for(let e=0;e<this.rows;e++){const n=new Float64Array(this.columns-1);for(let r=0;r<t;r++)n[r]=this.data[e][r];for(let r=t+1;r<this.columns;r++)n[r-1]=this.data[e][r];this.data[e]=n}return this.columns-=1,this}addColumn(t,e){void 0===e&&(e=t,t=this.columns),f(this,t,!0),e=p(this,e);for(let n=0;n<this.rows;n++){const r=new Float64Array(this.columns+1);let o=0;for(;o<t;o++)r[o]=this.data[n][o];for(r[o++]=e[n];o<this.columns+1;o++)r[o]=this.data[n][o-1];this.data[n]=r}return this.columns+=1,this}}!function(t,e){t.prototype.add=function(t){return"number"==typeof t?this.addS(t):this.addM(t)},t.prototype.addS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)+t);return this},t.prototype.addM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)+t.get(e,n));return this},t.add=function(t,n){return new e(t).add(n)},t.prototype.sub=function(t){return"number"==typeof t?this.subS(t):this.subM(t)},t.prototype.subS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)-t);return this},t.prototype.subM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)-t.get(e,n));return this},t.sub=function(t,n){return new e(t).sub(n)},t.prototype.subtract=t.prototype.sub,t.prototype.subtractS=t.prototype.subS,t.prototype.subtractM=t.prototype.subM,t.subtract=t.sub,t.prototype.mul=function(t){return"number"==typeof t?this.mulS(t):this.mulM(t)},t.prototype.mulS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)*t);return this},t.prototype.mulM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)*t.get(e,n));return this},t.mul=function(t,n){return new e(t).mul(n)},t.prototype.multiply=t.prototype.mul,t.prototype.multiplyS=t.prototype.mulS,t.prototype.multiplyM=t.prototype.mulM,t.multiply=t.mul,t.prototype.div=function(t){return"number"==typeof t?this.divS(t):this.divM(t)},t.prototype.divS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)/t);return this},t.prototype.divM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)/t.get(e,n));return this},t.div=function(t,n){return new e(t).div(n)},t.prototype.divide=t.prototype.div,t.prototype.divideS=t.prototype.divS,t.prototype.divideM=t.prototype.divM,t.divide=t.div,t.prototype.mod=function(t){return"number"==typeof t?this.modS(t):this.modM(t)},t.prototype.modS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)%t);return this},t.prototype.modM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)%t.get(e,n));return this},t.mod=function(t,n){return new e(t).mod(n)},t.prototype.modulus=t.prototype.mod,t.prototype.modulusS=t.prototype.modS,t.prototype.modulusM=t.prototype.modM,t.modulus=t.mod,t.prototype.and=function(t){return"number"==typeof t?this.andS(t):this.andM(t)},t.prototype.andS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)&t);return this},t.prototype.andM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)&t.get(e,n));return this},t.and=function(t,n){return new e(t).and(n)},t.prototype.or=function(t){return"number"==typeof t?this.orS(t):this.orM(t)},t.prototype.orS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)|t);return this},t.prototype.orM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)|t.get(e,n));return this},t.or=function(t,n){return new e(t).or(n)},t.prototype.xor=function(t){return"number"==typeof t?this.xorS(t):this.xorM(t)},t.prototype.xorS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)^t);return this},t.prototype.xorM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)^t.get(e,n));return this},t.xor=function(t,n){return new e(t).xor(n)},t.prototype.leftShift=function(t){return"number"==typeof t?this.leftShiftS(t):this.leftShiftM(t)},t.prototype.leftShiftS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)<<t);return this},t.prototype.leftShiftM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)<<t.get(e,n));return this},t.leftShift=function(t,n){return new e(t).leftShift(n)},t.prototype.signPropagatingRightShift=function(t){return"number"==typeof t?this.signPropagatingRightShiftS(t):this.signPropagatingRightShiftM(t)},t.prototype.signPropagatingRightShiftS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)>>t);return this},t.prototype.signPropagatingRightShiftM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)>>t.get(e,n));return this},t.signPropagatingRightShift=function(t,n){return new e(t).signPropagatingRightShift(n)},t.prototype.rightShift=function(t){return"number"==typeof t?this.rightShiftS(t):this.rightShiftM(t)},t.prototype.rightShiftS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)>>>t);return this},t.prototype.rightShiftM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)>>>t.get(e,n));return this},t.rightShift=function(t,n){return new e(t).rightShift(n)},t.prototype.zeroFillRightShift=t.prototype.rightShift,t.prototype.zeroFillRightShiftS=t.prototype.rightShiftS,t.prototype.zeroFillRightShiftM=t.prototype.rightShiftM,t.zeroFillRightShift=t.rightShift,t.prototype.not=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,~this.get(t,e));return this},t.not=function(t){return new e(t).not()},t.prototype.abs=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.abs(this.get(t,e)));return this},t.abs=function(t){return new e(t).abs()},t.prototype.acos=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.acos(this.get(t,e)));return this},t.acos=function(t){return new e(t).acos()},t.prototype.acosh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.acosh(this.get(t,e)));return this},t.acosh=function(t){return new e(t).acosh()},t.prototype.asin=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.asin(this.get(t,e)));return this},t.asin=function(t){return new e(t).asin()},t.prototype.asinh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.asinh(this.get(t,e)));return this},t.asinh=function(t){return new e(t).asinh()},t.prototype.atan=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.atan(this.get(t,e)));return this},t.atan=function(t){return new e(t).atan()},t.prototype.atanh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.atanh(this.get(t,e)));return this},t.atanh=function(t){return new e(t).atanh()},t.prototype.cbrt=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cbrt(this.get(t,e)));return this},t.cbrt=function(t){return new e(t).cbrt()},t.prototype.ceil=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.ceil(this.get(t,e)));return this},t.ceil=function(t){return new e(t).ceil()},t.prototype.clz32=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.clz32(this.get(t,e)));return this},t.clz32=function(t){return new e(t).clz32()},t.prototype.cos=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cos(this.get(t,e)));return this},t.cos=function(t){return new e(t).cos()},t.prototype.cosh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cosh(this.get(t,e)));return this},t.cosh=function(t){return new e(t).cosh()},t.prototype.exp=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.exp(this.get(t,e)));return this},t.exp=function(t){return new e(t).exp()},t.prototype.expm1=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.expm1(this.get(t,e)));return this},t.expm1=function(t){return new e(t).expm1()},t.prototype.floor=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.floor(this.get(t,e)));return this},t.floor=function(t){return new e(t).floor()},t.prototype.fround=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.fround(this.get(t,e)));return this},t.fround=function(t){return new e(t).fround()},t.prototype.log=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log(this.get(t,e)));return this},t.log=function(t){return new e(t).log()},t.prototype.log1p=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log1p(this.get(t,e)));return this},t.log1p=function(t){return new e(t).log1p()},t.prototype.log10=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log10(this.get(t,e)));return this},t.log10=function(t){return new e(t).log10()},t.prototype.log2=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log2(this.get(t,e)));return this},t.log2=function(t){return new e(t).log2()},t.prototype.round=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.round(this.get(t,e)));return this},t.round=function(t){return new e(t).round()},t.prototype.sign=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sign(this.get(t,e)));return this},t.sign=function(t){return new e(t).sign()},t.prototype.sin=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sin(this.get(t,e)));return this},t.sin=function(t){return new e(t).sin()},t.prototype.sinh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sinh(this.get(t,e)));return this},t.sinh=function(t){return new e(t).sinh()},t.prototype.sqrt=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sqrt(this.get(t,e)));return this},t.sqrt=function(t){return new e(t).sqrt()},t.prototype.tan=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.tan(this.get(t,e)));return this},t.tan=function(t){return new e(t).tan()},t.prototype.tanh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.tanh(this.get(t,e)));return this},t.tanh=function(t){return new e(t).tanh()},t.prototype.trunc=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.trunc(this.get(t,e)));return this},t.trunc=function(t){return new e(t).trunc()},t.pow=function(t,n){return new e(t).pow(n)},t.prototype.pow=function(t){return"number"==typeof t?this.powS(t):this.powM(t)},t.prototype.powS=function(t){for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,Math.pow(this.get(e,n),t));return this},t.prototype.powM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let n=0;n<this.columns;n++)this.set(e,n,Math.pow(this.get(e,n),t.get(e,n)));return this}}(b,_);class M extends b{constructor(t,e,n){super(),this.matrix=t,this.rows=e,this.columns=n}}class $ extends M{constructor(t,e,n){m(t,e),g(t,n),super(t,e.length,n.length),this.rowIndices=e,this.columnIndices=n}set(t,e,n){return this.matrix.set(this.rowIndices[t],this.columnIndices[e],n),this}get(t,e){return this.matrix.get(this.rowIndices[t],this.columnIndices[e])}}class E extends b{constructor(t,e={}){const{rows:n=1}=e;if(t.length%n!=0)throw new Error("the data length is not divisible by the number of rows");super(),this.rows=n,this.columns=t.length/n,this.data=t}set(t,e,n){let r=this._calculateIndex(t,e);return this.data[r]=n,this}get(t,e){let n=this._calculateIndex(t,e);return this.data[n]}_calculateIndex(t,e){return t*this.columns+e}}class S extends b{constructor(t){super(),this.data=t,this.rows=t.length,this.columns=t[0].length}set(t,e,n){return this.data[t][e]=n,this}get(t,e){return this.data[t][e]}}class A{constructor(t){let e,n,r,o,i,s,u,a,l,c=(t=S.checkMatrix(t)).clone(),f=c.rows,h=c.columns,p=new Float64Array(f),m=1;for(e=0;e<f;e++)p[e]=e;for(a=new Float64Array(f),n=0;n<h;n++){for(e=0;e<f;e++)a[e]=c.get(e,n);for(e=0;e<f;e++){for(l=Math.min(e,n),i=0,r=0;r<l;r++)i+=c.get(e,r)*a[r];a[e]-=i,c.set(e,n,a[e])}for(o=n,e=n+1;e<f;e++)Math.abs(a[e])>Math.abs(a[o])&&(o=e);if(o!==n){for(r=0;r<h;r++)s=c.get(o,r),c.set(o,r,c.get(n,r)),c.set(n,r,s);u=p[o],p[o]=p[n],p[n]=u,m=-m}if(n<f&&0!==c.get(n,n))for(e=n+1;e<f;e++)c.set(e,n,c.get(e,n)/c.get(n,n))}this.LU=c,this.pivotVector=p,this.pivotSign=m}isSingular(){let t=this.LU,e=t.columns;for(let n=0;n<e;n++)if(0===t.get(n,n))return!0;return!1}solve(t){t=_.checkMatrix(t);let e=this.LU;if(e.rows!==t.rows)throw new Error("Invalid matrix dimensions");if(this.isSingular())throw new Error("LU matrix is singular");let n,r,o,i=t.columns,s=t.subMatrixRow(this.pivotVector,0,i-1),u=e.columns;for(o=0;o<u;o++)for(n=o+1;n<u;n++)for(r=0;r<i;r++)s.set(n,r,s.get(n,r)-s.get(o,r)*e.get(n,o));for(o=u-1;o>=0;o--){for(r=0;r<i;r++)s.set(o,r,s.get(o,r)/e.get(o,o));for(n=0;n<o;n++)for(r=0;r<i;r++)s.set(n,r,s.get(n,r)-s.get(o,r)*e.get(n,o))}return s}get determinant(){let t=this.LU;if(!t.isSquare())throw new Error("Matrix must be square");let e=this.pivotSign,n=t.columns;for(let r=0;r<n;r++)e*=t.get(r,r);return e}get lowerTriangularMatrix(){let t=this.LU,e=t.rows,n=t.columns,r=new _(e,n);for(let o=0;o<e;o++)for(let e=0;e<n;e++)o>e?r.set(o,e,t.get(o,e)):o===e?r.set(o,e,1):r.set(o,e,0);return r}get upperTriangularMatrix(){let t=this.LU,e=t.rows,n=t.columns,r=new _(e,n);for(let o=0;o<e;o++)for(let e=0;e<n;e++)o<=e?r.set(o,e,t.get(o,e)):r.set(o,e,0);return r}get pivotPermutationVector(){return Array.from(this.pivotVector)}}function k(t,e){let n=0;return Math.abs(t)>Math.abs(e)?(n=e/t,Math.abs(t)*Math.sqrt(1+n*n)):0!==e?(n=t/e,Math.abs(e)*Math.sqrt(1+n*n)):0}class j{constructor(t){let e,n,r,o,i=(t=S.checkMatrix(t)).clone(),s=t.rows,u=t.columns,a=new Float64Array(u);for(r=0;r<u;r++){let t=0;for(e=r;e<s;e++)t=k(t,i.get(e,r));if(0!==t){for(i.get(r,r)<0&&(t=-t),e=r;e<s;e++)i.set(e,r,i.get(e,r)/t);for(i.set(r,r,i.get(r,r)+1),n=r+1;n<u;n++){for(o=0,e=r;e<s;e++)o+=i.get(e,r)*i.get(e,n);for(o=-o/i.get(r,r),e=r;e<s;e++)i.set(e,n,i.get(e,n)+o*i.get(e,r))}}a[r]=-t}this.QR=i,this.Rdiag=a}solve(t){t=_.checkMatrix(t);let e=this.QR,n=e.rows;if(t.rows!==n)throw new Error("Matrix row dimensions must agree");if(!this.isFullRank())throw new Error("Matrix is rank deficient");let r,o,i,s,u=t.columns,a=t.clone(),l=e.columns;for(i=0;i<l;i++)for(o=0;o<u;o++){for(s=0,r=i;r<n;r++)s+=e.get(r,i)*a.get(r,o);for(s=-s/e.get(i,i),r=i;r<n;r++)a.set(r,o,a.get(r,o)+s*e.get(r,i))}for(i=l-1;i>=0;i--){for(o=0;o<u;o++)a.set(i,o,a.get(i,o)/this.Rdiag[i]);for(r=0;r<i;r++)for(o=0;o<u;o++)a.set(r,o,a.get(r,o)-a.get(i,o)*e.get(r,i))}return a.subMatrix(0,l-1,0,u-1)}isFullRank(){let t=this.QR.columns;for(let e=0;e<t;e++)if(0===this.Rdiag[e])return!1;return!0}get upperTriangularMatrix(){let t,e,n=this.QR,r=n.columns,o=new _(r,r);for(t=0;t<r;t++)for(e=0;e<r;e++)t<e?o.set(t,e,n.get(t,e)):t===e?o.set(t,e,this.Rdiag[t]):o.set(t,e,0);return o}get orthogonalMatrix(){let t,e,n,r,o=this.QR,i=o.rows,s=o.columns,u=new _(i,s);for(n=s-1;n>=0;n--){for(t=0;t<i;t++)u.set(t,n,0);for(u.set(n,n,1),e=n;e<s;e++)if(0!==o.get(n,n)){for(r=0,t=n;t<i;t++)r+=o.get(t,n)*u.get(t,e);for(r=-r/o.get(n,n),t=n;t<i;t++)u.set(t,e,u.get(t,e)+r*o.get(t,n))}}return u}}class O{constructor(t,e={}){if((t=S.checkMatrix(t)).isEmpty())throw new Error("Matrix must be non-empty");let n=t.rows,r=t.columns;const{computeLeftSingularVectors:o=!0,computeRightSingularVectors:i=!0,autoTranspose:s=!1}=e;let u,a=Boolean(o),l=Boolean(i),c=!1;if(n<r)if(s){u=t.transpose(),n=u.rows,r=u.columns,c=!0;let e=a;a=l,l=e}else u=t.clone(),console.warn("Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose");else u=t.clone();let f=Math.min(n,r),h=Math.min(n+1,r),p=new Float64Array(h),m=new _(n,f),g=new _(r,r),d=new Float64Array(r),y=new Float64Array(n),w=new Float64Array(h);for(let t=0;t<h;t++)w[t]=t;let v=Math.min(n-1,r),b=Math.max(0,Math.min(r-2,n)),x=Math.max(v,b);for(let t=0;t<x;t++){if(t<v){p[t]=0;for(let e=t;e<n;e++)p[t]=k(p[t],u.get(e,t));if(0!==p[t]){u.get(t,t)<0&&(p[t]=-p[t]);for(let e=t;e<n;e++)u.set(e,t,u.get(e,t)/p[t]);u.set(t,t,u.get(t,t)+1)}p[t]=-p[t]}for(let e=t+1;e<r;e++){if(t<v&&0!==p[t]){let r=0;for(let o=t;o<n;o++)r+=u.get(o,t)*u.get(o,e);r=-r/u.get(t,t);for(let o=t;o<n;o++)u.set(o,e,u.get(o,e)+r*u.get(o,t))}d[e]=u.get(t,e)}if(a&&t<v)for(let e=t;e<n;e++)m.set(e,t,u.get(e,t));if(t<b){d[t]=0;for(let e=t+1;e<r;e++)d[t]=k(d[t],d[e]);if(0!==d[t]){d[t+1]<0&&(d[t]=0-d[t]);for(let e=t+1;e<r;e++)d[e]/=d[t];d[t+1]+=1}if(d[t]=-d[t],t+1<n&&0!==d[t]){for(let e=t+1;e<n;e++)y[e]=0;for(let e=t+1;e<n;e++)for(let n=t+1;n<r;n++)y[e]+=d[n]*u.get(e,n);for(let e=t+1;e<r;e++){let r=-d[e]/d[t+1];for(let o=t+1;o<n;o++)u.set(o,e,u.get(o,e)+r*y[o])}}if(l)for(let e=t+1;e<r;e++)g.set(e,t,d[e])}}let M=Math.min(r,n+1);if(v<r&&(p[v]=u.get(v,v)),n<M&&(p[M-1]=0),b+1<M&&(d[b]=u.get(b,M-1)),d[M-1]=0,a){for(let t=v;t<f;t++){for(let e=0;e<n;e++)m.set(e,t,0);m.set(t,t,1)}for(let t=v-1;t>=0;t--)if(0!==p[t]){for(let e=t+1;e<f;e++){let r=0;for(let o=t;o<n;o++)r+=m.get(o,t)*m.get(o,e);r=-r/m.get(t,t);for(let o=t;o<n;o++)m.set(o,e,m.get(o,e)+r*m.get(o,t))}for(let e=t;e<n;e++)m.set(e,t,-m.get(e,t));m.set(t,t,1+m.get(t,t));for(let e=0;e<t-1;e++)m.set(e,t,0)}else{for(let e=0;e<n;e++)m.set(e,t,0);m.set(t,t,1)}}if(l)for(let t=r-1;t>=0;t--){if(t<b&&0!==d[t])for(let e=t+1;e<r;e++){let n=0;for(let o=t+1;o<r;o++)n+=g.get(o,t)*g.get(o,e);n=-n/g.get(t+1,t);for(let o=t+1;o<r;o++)g.set(o,e,g.get(o,e)+n*g.get(o,t))}for(let e=0;e<r;e++)g.set(e,t,0);g.set(t,t,1)}let $=M-1,E=Number.EPSILON;for(;M>0;){let t,e;for(t=M-2;t>=-1&&-1!==t;t--){const e=Number.MIN_VALUE+E*Math.abs(p[t]+Math.abs(p[t+1]));if(Math.abs(d[t])<=e||Number.isNaN(d[t])){d[t]=0;break}}if(t===M-2)e=4;else{let n;for(n=M-1;n>=t&&n!==t;n--){let e=(n!==M?Math.abs(d[n]):0)+(n!==t+1?Math.abs(d[n-1]):0);if(Math.abs(p[n])<=E*e){p[n]=0;break}}n===t?e=3:n===M-1?e=1:(e=2,t=n)}switch(t++,e){case 1:{let e=d[M-2];d[M-2]=0;for(let n=M-2;n>=t;n--){let o=k(p[n],e),i=p[n]/o,s=e/o;if(p[n]=o,n!==t&&(e=-s*d[n-1],d[n-1]=i*d[n-1]),l)for(let t=0;t<r;t++)o=i*g.get(t,n)+s*g.get(t,M-1),g.set(t,M-1,-s*g.get(t,n)+i*g.get(t,M-1)),g.set(t,n,o)}break}case 2:{let e=d[t-1];d[t-1]=0;for(let r=t;r<M;r++){let o=k(p[r],e),i=p[r]/o,s=e/o;if(p[r]=o,e=-s*d[r],d[r]=i*d[r],a)for(let e=0;e<n;e++)o=i*m.get(e,r)+s*m.get(e,t-1),m.set(e,t-1,-s*m.get(e,r)+i*m.get(e,t-1)),m.set(e,r,o)}break}case 3:{const e=Math.max(Math.abs(p[M-1]),Math.abs(p[M-2]),Math.abs(d[M-2]),Math.abs(p[t]),Math.abs(d[t])),o=p[M-1]/e,i=p[M-2]/e,s=d[M-2]/e,u=p[t]/e,c=d[t]/e,f=((i+o)*(i-o)+s*s)/2,h=o*s*(o*s);let y=0;0===f&&0===h||(y=f<0?0-Math.sqrt(f*f+h):Math.sqrt(f*f+h),y=h/(f+y));let w=(u+o)*(u-o)+y,v=u*c;for(let e=t;e<M-1;e++){let o=k(w,v);0===o&&(o=Number.MIN_VALUE);let i=w/o,s=v/o;if(e!==t&&(d[e-1]=o),w=i*p[e]+s*d[e],d[e]=i*d[e]-s*p[e],v=s*p[e+1],p[e+1]=i*p[e+1],l)for(let t=0;t<r;t++)o=i*g.get(t,e)+s*g.get(t,e+1),g.set(t,e+1,-s*g.get(t,e)+i*g.get(t,e+1)),g.set(t,e,o);if(o=k(w,v),0===o&&(o=Number.MIN_VALUE),i=w/o,s=v/o,p[e]=o,w=i*d[e]+s*p[e+1],p[e+1]=-s*d[e]+i*p[e+1],v=s*d[e+1],d[e+1]=i*d[e+1],a&&e<n-1)for(let t=0;t<n;t++)o=i*m.get(t,e)+s*m.get(t,e+1),m.set(t,e+1,-s*m.get(t,e)+i*m.get(t,e+1)),m.set(t,e,o)}d[M-2]=w;break}case 4:if(p[t]<=0&&(p[t]=p[t]<0?-p[t]:0,l))for(let e=0;e<=$;e++)g.set(e,t,-g.get(e,t));for(;t<$&&!(p[t]>=p[t+1]);){let e=p[t];if(p[t]=p[t+1],p[t+1]=e,l&&t<r-1)for(let n=0;n<r;n++)e=g.get(n,t+1),g.set(n,t+1,g.get(n,t)),g.set(n,t,e);if(a&&t<n-1)for(let r=0;r<n;r++)e=m.get(r,t+1),m.set(r,t+1,m.get(r,t)),m.set(r,t,e);t++}M--}}if(c){let t=g;g=m,m=t}this.m=n,this.n=r,this.s=p,this.U=m,this.V=g}solve(t){let e=t,n=this.threshold,r=this.s.length,o=_.zeros(r,r);for(let t=0;t<r;t++)Math.abs(this.s[t])<=n?o.set(t,t,0):o.set(t,t,1/this.s[t]);let i=this.U,s=this.rightSingularVectors,u=s.mmul(o),a=s.rows,l=i.rows,c=_.zeros(a,l);for(let t=0;t<a;t++)for(let e=0;e<l;e++){let n=0;for(let o=0;o<r;o++)n+=u.get(t,o)*i.get(e,o);c.set(t,e,n)}return c.mmul(e)}solveForDiagonal(t){return this.solve(_.diag(t))}inverse(){let t=this.V,e=this.threshold,n=t.rows,r=t.columns,o=new _(n,this.s.length);for(let i=0;i<n;i++)for(let n=0;n<r;n++)Math.abs(this.s[n])>e&&o.set(i,n,t.get(i,n)/this.s[n]);let i=this.U,s=i.rows,u=i.columns,a=new _(n,s);for(let t=0;t<n;t++)for(let e=0;e<s;e++){let n=0;for(let r=0;r<u;r++)n+=o.get(t,r)*i.get(e,r);a.set(t,e,n)}return a}get condition(){return this.s[0]/this.s[Math.min(this.m,this.n)-1]}get norm2(){return this.s[0]}get rank(){let t=Math.max(this.m,this.n)*this.s[0]*Number.EPSILON,e=0,n=this.s;for(let r=0,o=n.length;r<o;r++)n[r]>t&&e++;return e}get diagonal(){return Array.from(this.s)}get threshold(){return Number.EPSILON/2*Math.max(this.m,this.n)*this.s[0]}get leftSingularVectors(){return this.U}get rightSingularVectors(){return this.V}get diagonalMatrix(){return _.diag(this.s)}}function R(t,e,n=!1){return t=S.checkMatrix(t),e=S.checkMatrix(e),n?new O(t).solve(e):t.isSquare()?new A(t).solve(e):new j(t).solve(e)}function N(t,e){let n=[];for(let r=0;r<t;r++)r!==e&&n.push(r);return n}function T(t,e,n,r=1e-9,o=1e-9){if(t>o)return new Array(e.rows+1).fill(0);{let t=e.addRow(n,[0]);for(let e=0;e<t.rows;e++)Math.abs(t.get(e,0))<r&&t.set(e,0,0);return t.to1DArray()}}class P{constructor(t,e={}){const{assumeSymmetric:n=!1}=e;if(!(t=S.checkMatrix(t)).isSquare())throw new Error("Matrix is not a square matrix");if(t.isEmpty())throw new Error("Matrix must be non-empty");let r,o,i=t.columns,s=new _(i,i),u=new Float64Array(i),a=new Float64Array(i),l=t,c=!1;if(c=!!n||t.isSymmetric(),c){for(r=0;r<i;r++)for(o=0;o<i;o++)s.set(r,o,l.get(r,o));!function(t,e,n,r){let o,i,s,u,a,l,c,f;for(a=0;a<t;a++)n[a]=r.get(t-1,a);for(u=t-1;u>0;u--){for(f=0,s=0,l=0;l<u;l++)f+=Math.abs(n[l]);if(0===f)for(e[u]=n[u-1],a=0;a<u;a++)n[a]=r.get(u-1,a),r.set(u,a,0),r.set(a,u,0);else{for(l=0;l<u;l++)n[l]/=f,s+=n[l]*n[l];for(o=n[u-1],i=Math.sqrt(s),o>0&&(i=-i),e[u]=f*i,s-=o*i,n[u-1]=o-i,a=0;a<u;a++)e[a]=0;for(a=0;a<u;a++){for(o=n[a],r.set(a,u,o),i=e[a]+r.get(a,a)*o,l=a+1;l<=u-1;l++)i+=r.get(l,a)*n[l],e[l]+=r.get(l,a)*o;e[a]=i}for(o=0,a=0;a<u;a++)e[a]/=s,o+=e[a]*n[a];for(c=o/(s+s),a=0;a<u;a++)e[a]-=c*n[a];for(a=0;a<u;a++){for(o=n[a],i=e[a],l=a;l<=u-1;l++)r.set(l,a,r.get(l,a)-(o*e[l]+i*n[l]));n[a]=r.get(u-1,a),r.set(u,a,0)}}n[u]=s}for(u=0;u<t-1;u++){if(r.set(t-1,u,r.get(u,u)),r.set(u,u,1),s=n[u+1],0!==s){for(l=0;l<=u;l++)n[l]=r.get(l,u+1)/s;for(a=0;a<=u;a++){for(i=0,l=0;l<=u;l++)i+=r.get(l,u+1)*r.get(l,a);for(l=0;l<=u;l++)r.set(l,a,r.get(l,a)-i*n[l])}}for(l=0;l<=u;l++)r.set(l,u+1,0)}for(a=0;a<t;a++)n[a]=r.get(t-1,a),r.set(t-1,a,0);r.set(t-1,t-1,1),e[0]=0}(i,a,u,s),function(t,e,n,r){let o,i,s,u,a,l,c,f,h,p,m,g,d,y,w,v;for(s=1;s<t;s++)e[s-1]=e[s];e[t-1]=0;let b=0,x=0,_=Number.EPSILON;for(l=0;l<t;l++){for(x=Math.max(x,Math.abs(n[l])+Math.abs(e[l])),c=l;c<t&&!(Math.abs(e[c])<=_*x);)c++;if(c>l)do{for(o=n[l],f=(n[l+1]-o)/(2*e[l]),h=k(f,1),f<0&&(h=-h),n[l]=e[l]/(f+h),n[l+1]=e[l]*(f+h),p=n[l+1],i=o-n[l],s=l+2;s<t;s++)n[s]-=i;for(b+=i,f=n[c],m=1,g=m,d=m,y=e[l+1],w=0,v=0,s=c-1;s>=l;s--)for(d=g,g=m,v=w,o=m*e[s],i=m*f,h=k(f,e[s]),e[s+1]=w*h,w=e[s]/h,m=f/h,f=m*n[s]-w*o,n[s+1]=i+w*(m*o+w*n[s]),a=0;a<t;a++)i=r.get(a,s+1),r.set(a,s+1,w*r.get(a,s)+m*i),r.set(a,s,m*r.get(a,s)-w*i);f=-w*v*d*y*e[l]/p,e[l]=w*f,n[l]=m*f}while(Math.abs(e[l])>_*x);n[l]=n[l]+b,e[l]=0}for(s=0;s<t-1;s++){for(a=s,f=n[s],u=s+1;u<t;u++)n[u]<f&&(a=u,f=n[u]);if(a!==s)for(n[a]=n[s],n[s]=f,u=0;u<t;u++)f=r.get(u,s),r.set(u,s,r.get(u,a)),r.set(u,a,f)}}(i,a,u,s)}else{let t=new _(i,i),e=new Float64Array(i);for(o=0;o<i;o++)for(r=0;r<i;r++)t.set(r,o,l.get(r,o));!function(t,e,n,r){let o,i,s,u,a,l,c,f=t-1;for(l=1;l<=f-1;l++){for(c=0,u=l;u<=f;u++)c+=Math.abs(e.get(u,l-1));if(0!==c){for(s=0,u=f;u>=l;u--)n[u]=e.get(u,l-1)/c,s+=n[u]*n[u];for(i=Math.sqrt(s),n[l]>0&&(i=-i),s-=n[l]*i,n[l]=n[l]-i,a=l;a<t;a++){for(o=0,u=f;u>=l;u--)o+=n[u]*e.get(u,a);for(o/=s,u=l;u<=f;u++)e.set(u,a,e.get(u,a)-o*n[u])}for(u=0;u<=f;u++){for(o=0,a=f;a>=l;a--)o+=n[a]*e.get(u,a);for(o/=s,a=l;a<=f;a++)e.set(u,a,e.get(u,a)-o*n[a])}n[l]=c*n[l],e.set(l,l-1,c*i)}}for(u=0;u<t;u++)for(a=0;a<t;a++)r.set(u,a,u===a?1:0);for(l=f-1;l>=1;l--)if(0!==e.get(l,l-1)){for(u=l+1;u<=f;u++)n[u]=e.get(u,l-1);for(a=l;a<=f;a++){for(i=0,u=l;u<=f;u++)i+=n[u]*r.get(u,a);for(i=i/n[l]/e.get(l,l-1),u=l;u<=f;u++)r.set(u,a,r.get(u,a)+i*n[u])}}}(i,t,e,s),function(t,e,n,r,o){let i,s,u,a,l,c,f,h,p,m,g,d,y,w,v,b=t-1,x=t-1,_=Number.EPSILON,M=0,$=0,E=0,S=0,A=0,k=0,j=0,O=0;for(i=0;i<t;i++)for((i<0||i>x)&&(n[i]=o.get(i,i),e[i]=0),s=Math.max(i-1,0);s<t;s++)$+=Math.abs(o.get(i,s));for(;b>=0;){for(a=b;a>0&&(k=Math.abs(o.get(a-1,a-1))+Math.abs(o.get(a,a)),0===k&&(k=$),!(Math.abs(o.get(a,a-1))<_*k));)a--;if(a===b)o.set(b,b,o.get(b,b)+M),n[b]=o.get(b,b),e[b]=0,b--,O=0;else if(a===b-1){if(f=o.get(b,b-1)*o.get(b-1,b),E=(o.get(b-1,b-1)-o.get(b,b))/2,S=E*E+f,j=Math.sqrt(Math.abs(S)),o.set(b,b,o.get(b,b)+M),o.set(b-1,b-1,o.get(b-1,b-1)+M),h=o.get(b,b),S>=0){for(j=E>=0?E+j:E-j,n[b-1]=h+j,n[b]=n[b-1],0!==j&&(n[b]=h-f/j),e[b-1]=0,e[b]=0,h=o.get(b,b-1),k=Math.abs(h)+Math.abs(j),E=h/k,S=j/k,A=Math.sqrt(E*E+S*S),E/=A,S/=A,s=b-1;s<t;s++)j=o.get(b-1,s),o.set(b-1,s,S*j+E*o.get(b,s)),o.set(b,s,S*o.get(b,s)-E*j);for(i=0;i<=b;i++)j=o.get(i,b-1),o.set(i,b-1,S*j+E*o.get(i,b)),o.set(i,b,S*o.get(i,b)-E*j);for(i=0;i<=x;i++)j=r.get(i,b-1),r.set(i,b-1,S*j+E*r.get(i,b)),r.set(i,b,S*r.get(i,b)-E*j)}else n[b-1]=h+E,n[b]=h+E,e[b-1]=j,e[b]=-j;b-=2,O=0}else{if(h=o.get(b,b),p=0,f=0,a<b&&(p=o.get(b-1,b-1),f=o.get(b,b-1)*o.get(b-1,b)),10===O){for(M+=h,i=0;i<=b;i++)o.set(i,i,o.get(i,i)-h);k=Math.abs(o.get(b,b-1))+Math.abs(o.get(b-1,b-2)),h=p=.75*k,f=-.4375*k*k}if(30===O&&(k=(p-h)/2,k=k*k+f,k>0)){for(k=Math.sqrt(k),p<h&&(k=-k),k=h-f/((p-h)/2+k),i=0;i<=b;i++)o.set(i,i,o.get(i,i)-k);M+=k,h=p=f=.964}for(O+=1,l=b-2;l>=a&&(j=o.get(l,l),A=h-j,k=p-j,E=(A*k-f)/o.get(l+1,l)+o.get(l,l+1),S=o.get(l+1,l+1)-j-A-k,A=o.get(l+2,l+1),k=Math.abs(E)+Math.abs(S)+Math.abs(A),E/=k,S/=k,A/=k,l!==a)&&!(Math.abs(o.get(l,l-1))*(Math.abs(S)+Math.abs(A))<_*(Math.abs(E)*(Math.abs(o.get(l-1,l-1))+Math.abs(j)+Math.abs(o.get(l+1,l+1)))));)l--;for(i=l+2;i<=b;i++)o.set(i,i-2,0),i>l+2&&o.set(i,i-3,0);for(u=l;u<=b-1&&(w=u!==b-1,u!==l&&(E=o.get(u,u-1),S=o.get(u+1,u-1),A=w?o.get(u+2,u-1):0,h=Math.abs(E)+Math.abs(S)+Math.abs(A),0!==h&&(E/=h,S/=h,A/=h)),0!==h);u++)if(k=Math.sqrt(E*E+S*S+A*A),E<0&&(k=-k),0!==k){for(u!==l?o.set(u,u-1,-k*h):a!==l&&o.set(u,u-1,-o.get(u,u-1)),E+=k,h=E/k,p=S/k,j=A/k,S/=E,A/=E,s=u;s<t;s++)E=o.get(u,s)+S*o.get(u+1,s),w&&(E+=A*o.get(u+2,s),o.set(u+2,s,o.get(u+2,s)-E*j)),o.set(u,s,o.get(u,s)-E*h),o.set(u+1,s,o.get(u+1,s)-E*p);for(i=0;i<=Math.min(b,u+3);i++)E=h*o.get(i,u)+p*o.get(i,u+1),w&&(E+=j*o.get(i,u+2),o.set(i,u+2,o.get(i,u+2)-E*A)),o.set(i,u,o.get(i,u)-E),o.set(i,u+1,o.get(i,u+1)-E*S);for(i=0;i<=x;i++)E=h*r.get(i,u)+p*r.get(i,u+1),w&&(E+=j*r.get(i,u+2),r.set(i,u+2,r.get(i,u+2)-E*A)),r.set(i,u,r.get(i,u)-E),r.set(i,u+1,r.get(i,u+1)-E*S)}}}if(0!==$){for(b=t-1;b>=0;b--)if(E=n[b],S=e[b],0===S)for(a=b,o.set(b,b,1),i=b-1;i>=0;i--){for(f=o.get(i,i)-E,A=0,s=a;s<=b;s++)A+=o.get(i,s)*o.get(s,b);if(e[i]<0)j=f,k=A;else if(a=i,0===e[i]?o.set(i,b,0!==f?-A/f:-A/(_*$)):(h=o.get(i,i+1),p=o.get(i+1,i),S=(n[i]-E)*(n[i]-E)+e[i]*e[i],c=(h*k-j*A)/S,o.set(i,b,c),o.set(i+1,b,Math.abs(h)>Math.abs(j)?(-A-f*c)/h:(-k-p*c)/j)),c=Math.abs(o.get(i,b)),_*c*c>1)for(s=i;s<=b;s++)o.set(s,b,o.get(s,b)/c)}else if(S<0)for(a=b-1,Math.abs(o.get(b,b-1))>Math.abs(o.get(b-1,b))?(o.set(b-1,b-1,S/o.get(b,b-1)),o.set(b-1,b,-(o.get(b,b)-E)/o.get(b,b-1))):(v=I(0,-o.get(b-1,b),o.get(b-1,b-1)-E,S),o.set(b-1,b-1,v[0]),o.set(b-1,b,v[1])),o.set(b,b-1,0),o.set(b,b,1),i=b-2;i>=0;i--){for(m=0,g=0,s=a;s<=b;s++)m+=o.get(i,s)*o.get(s,b-1),g+=o.get(i,s)*o.get(s,b);if(f=o.get(i,i)-E,e[i]<0)j=f,A=m,k=g;else if(a=i,0===e[i]?(v=I(-m,-g,f,S),o.set(i,b-1,v[0]),o.set(i,b,v[1])):(h=o.get(i,i+1),p=o.get(i+1,i),d=(n[i]-E)*(n[i]-E)+e[i]*e[i]-S*S,y=2*(n[i]-E)*S,0===d&&0===y&&(d=_*$*(Math.abs(f)+Math.abs(S)+Math.abs(h)+Math.abs(p)+Math.abs(j))),v=I(h*A-j*m+S*g,h*k-j*g-S*m,d,y),o.set(i,b-1,v[0]),o.set(i,b,v[1]),Math.abs(h)>Math.abs(j)+Math.abs(S)?(o.set(i+1,b-1,(-m-f*o.get(i,b-1)+S*o.get(i,b))/h),o.set(i+1,b,(-g-f*o.get(i,b)-S*o.get(i,b-1))/h)):(v=I(-A-p*o.get(i,b-1),-k-p*o.get(i,b),j,S),o.set(i+1,b-1,v[0]),o.set(i+1,b,v[1]))),c=Math.max(Math.abs(o.get(i,b-1)),Math.abs(o.get(i,b))),_*c*c>1)for(s=i;s<=b;s++)o.set(s,b-1,o.get(s,b-1)/c),o.set(s,b,o.get(s,b)/c)}for(i=0;i<t;i++)if(i<0||i>x)for(s=i;s<t;s++)r.set(i,s,o.get(i,s));for(s=t-1;s>=0;s--)for(i=0;i<=x;i++){for(j=0,u=0;u<=Math.min(s,x);u++)j+=r.get(i,u)*o.get(u,s);r.set(i,s,j)}}}(i,a,u,s,t)}this.n=i,this.e=a,this.d=u,this.V=s}get realEigenvalues(){return Array.from(this.d)}get imaginaryEigenvalues(){return Array.from(this.e)}get eigenvectorMatrix(){return this.V}get diagonalMatrix(){let t,e,n=this.n,r=this.e,o=this.d,i=new _(n,n);for(t=0;t<n;t++){for(e=0;e<n;e++)i.set(t,e,0);i.set(t,t,o[t]),r[t]>0?i.set(t,t+1,r[t]):r[t]<0&&i.set(t,t-1,r[t])}return i}}function I(t,e,n,r){let o,i;return Math.abs(n)>Math.abs(r)?(o=r/n,i=n+o*r,[(t+o*e)/i,(e-o*t)/i]):(o=n/r,i=r+o*n,[(o*t+e)/i,(o*e-t)/i])}class q{constructor(t){if(!(t=S.checkMatrix(t)).isSymmetric())throw new Error("Matrix is not symmetric");let e,n,r,o=t,i=o.rows,s=new _(i,i),u=!0;for(n=0;n<i;n++){let t=0;for(r=0;r<n;r++){let i=0;for(e=0;e<r;e++)i+=s.get(r,e)*s.get(n,e);i=(o.get(n,r)-i)/s.get(r,r),s.set(n,r,i),t+=i*i}for(t=o.get(n,n)-t,u&=t>0,s.set(n,n,Math.sqrt(Math.max(t,0))),r=n+1;r<i;r++)s.set(n,r,0)}this.L=s,this.positiveDefinite=Boolean(u)}isPositiveDefinite(){return this.positiveDefinite}solve(t){t=S.checkMatrix(t);let e=this.L,n=e.rows;if(t.rows!==n)throw new Error("Matrix dimensions do not match");if(!1===this.isPositiveDefinite())throw new Error("Matrix is not positive definite");let r,o,i,s=t.columns,u=t.clone();for(i=0;i<n;i++)for(o=0;o<s;o++){for(r=0;r<i;r++)u.set(i,o,u.get(i,o)-u.get(r,o)*e.get(i,r));u.set(i,o,u.get(i,o)/e.get(i,i))}for(i=n-1;i>=0;i--)for(o=0;o<s;o++){for(r=i+1;r<n;r++)u.set(i,o,u.get(i,o)-u.get(r,o)*e.get(r,i));u.set(i,o,u.get(i,o)/e.get(i,i))}return u}get lowerTriangularMatrix(){return this.L}}class C{constructor(t,e={}){t=S.checkMatrix(t);let{Y:n}=e;const{scaleScores:o=!1,maxIterations:i=1e3,terminationCriteria:s=1e-10}=e;let u;if(n){if(n=r.isAnyArray(n)&&"number"==typeof n[0]?_.columnVector(n):S.checkMatrix(n),n.rows!==t.rows)throw new Error("Y should have the same number of rows as X");u=n.getColumnVector(0)}else u=t.getColumnVector(0);let a,l,c,f,h=1;for(let e=0;e<i&&h>s;e++)c=t.transpose().mmul(u).div(u.transpose().mmul(u).get(0,0)),c=c.div(c.norm()),a=t.mmul(c).div(c.transpose().mmul(c).get(0,0)),e>0&&(h=a.clone().sub(f).pow(2).sum()),f=a.clone(),n?(l=n.transpose().mmul(a).div(a.transpose().mmul(a).get(0,0)),l=l.div(l.norm()),u=n.mmul(l).div(l.transpose().mmul(l).get(0,0))):u=a;if(n){let e=t.transpose().mmul(a).div(a.transpose().mmul(a).get(0,0));e=e.div(e.norm());let r=t.clone().sub(a.clone().mmul(e.transpose())),o=u.transpose().mmul(a).div(a.transpose().mmul(a).get(0,0)),i=n.clone().sub(a.clone().mulS(o.get(0,0)).mmul(l.transpose()));this.t=a,this.p=e.transpose(),this.w=c.transpose(),this.q=l,this.u=u,this.s=a.transpose().mmul(a),this.xResidual=r,this.yResidual=i,this.betas=o}else this.w=c.transpose(),this.s=a.transpose().mmul(a).sqrt(),this.t=o?a.clone().div(this.s.get(0,0)):a,this.xResidual=t.sub(a.mmul(c.transpose()))}}e.XA=b,e.a_=q,e.yQ=q,e.Ec=P,e.dx=P,e.LU=A,e.Rm=A,e.y3=_,e.qK=class extends M{constructor(t,e){g(t,e),super(t,t.rows,e.length),this.columnIndices=e}set(t,e,n){return this.matrix.set(t,this.columnIndices[e],n),this}get(t,e){return this.matrix.get(t,this.columnIndices[e])}},e.pb=class extends M{constructor(t,e){f(t,e),super(t,t.rows,1),this.column=e}set(t,e,n){return this.matrix.set(t,this.column,n),this}get(t){return this.matrix.get(t,this.column)}},e.j=class extends M{constructor(t){super(t,t.rows,t.columns)}set(t,e,n){return this.matrix.set(t,this.columns-e-1,n),this}get(t,e){return this.matrix.get(t,this.columns-e-1)}},e.sO=class extends M{constructor(t){super(t,t.rows,t.columns)}set(t,e,n){return this.matrix.set(this.rows-t-1,e,n),this}get(t,e){return this.matrix.get(this.rows-t-1,e)}},e.BZ=class extends M{constructor(t,e){m(t,e),super(t,e.length,t.columns),this.rowIndices=e}set(t,e,n){return this.matrix.set(this.rowIndices[t],e,n),this}get(t,e){return this.matrix.get(this.rowIndices[t],e)}},e.EK=class extends M{constructor(t,e){c(t,e),super(t,1,t.columns),this.row=e}set(t,e,n){return this.matrix.set(this.row,e,n),this}get(t,e){return this.matrix.get(this.row,e)}},e.Db=$,e.Fx=class extends M{constructor(t,e,n,r,o){d(t,e,n,r,o),super(t,n-e+1,o-r+1),this.startRow=e,this.startColumn=r}set(t,e,n){return this.matrix.set(this.startRow+t,this.startColumn+e,n),this}get(t,e){return this.matrix.get(this.startRow+t,this.startColumn+e)}},e.tU=class extends M{constructor(t){super(t,t.columns,t.rows)}set(t,e,n){return this.matrix.set(e,t,n),this}get(t,e){return this.matrix.get(e,t)}},e.Ym=C,e.rs=C,e.QR=j,e.TB=j,e.oH=O,e.Sc=O,e.it=E,e.$r=S,e.QM=function(t,e=t,n={}){t=new _(t);let o=!1;if("object"!=typeof e||_.isMatrix(e)||r.isAnyArray(e)?e=new _(e):(n=e,e=t,o=!0),t.rows!==e.rows)throw new TypeError("Both matrices must have the same number of rows");const{center:i=!0,scale:s=!0}=n;i&&(t.center("column"),o||e.center("column")),s&&(t.scale("column"),o||e.scale("column"));const u=t.standardDeviation("column",{unbiased:!0}),a=o?u:e.standardDeviation("column",{unbiased:!0}),l=t.transpose().mmul(e);for(let e=0;e<l.rows;e++)for(let n=0;n<l.columns;n++)l.set(e,n,l.get(e,n)*(1/(u[e]*a[n]))*(1/(t.rows-1)));return l},e.AV=function(t,e=t,n={}){t=new _(t);let o=!1;if("object"!=typeof e||_.isMatrix(e)||r.isAnyArray(e)?e=new _(e):(n=e,e=t,o=!0),t.rows!==e.rows)throw new TypeError("Both matrices must have the same number of rows");const{center:i=!0}=n;i&&(t=t.center("column"),o||(e=e.center("column")));const s=t.transpose().mmul(e);for(let e=0;e<s.rows;e++)for(let n=0;n<s.columns;n++)s.set(e,n,s.get(e,n)*(1/(t.rows-1)));return s},e.GH=function t(e){if((e=_.checkMatrix(e)).isSquare()){if(0===e.columns)return 1;let n,r,o,i;if(2===e.columns)return n=e.get(0,0),r=e.get(0,1),o=e.get(1,0),i=e.get(1,1),n*i-r*o;if(3===e.columns){let i,s,u;return i=new $(e,[1,2],[1,2]),s=new $(e,[1,2],[0,2]),u=new $(e,[1,2],[0,1]),n=e.get(0,0),r=e.get(0,1),o=e.get(0,2),n*t(i)-r*t(s)+o*t(u)}return new A(e).determinant}throw Error("determinant can only be calculated for a square matrix")},e.SO=function(t,e=!1){return t=S.checkMatrix(t),e?new O(t).inverse():R(t,_.eye(t.rows))},e.uZ=function(t,e={}){const{thresholdValue:n=1e-9,thresholdError:r=1e-9}=e;let o=(t=_.checkMatrix(t)).rows,i=new _(o,o);for(let e=0;e<o;e++){let s=_.columnVector(t.getRow(e)),u=t.subMatrixRow(N(o,e)).transpose(),a=new O(u).solve(s),l=_.sub(s,u.mmul(a)).abs().max();i.setRow(e,T(l,a,e,n,r))}return i},e.yU=function(t,e=Number.EPSILON){if((t=_.checkMatrix(t)).isEmpty())return t.transpose();let n=new O(t,{autoTranspose:!0}),r=n.leftSingularVectors,o=n.rightSingularVectors,i=n.diagonal;for(let t=0;t<i.length;t++)Math.abs(i[t])>e?i[t]=1/i[t]:i[t]=0;return o.mmul(_.diag(i).mmul(r.transpose()))},e.F1=R,e.re=function(t,e){if(r.isAnyArray(t))return t[0]&&r.isAnyArray(t[0])?new S(t):new E(t,e);throw new Error("the argument is not an array")}},377:(t,e,n)=>{var r=n(832),o=n(652),i=n(801),s=n(30),u=n(618),a=n(49),l=n(971);l.alea=r,l.xor128=o,l.xorwow=i,l.xorshift7=s,l.xor4096=u,l.tychei=a,t.exports=l},832:function(t,e,n){var r;!function(t,o,i){function s(t){var e,n=this,r=(e=4022871197,function(t){t=String(t);for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function u(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function a(t,e){var n=new s(t),r=e&&e.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,r&&("object"==typeof r&&u(r,n),o.state=function(){return u(n,{})}),o}o&&o.exports?o.exports=a:n.amdD&&n.amdO?void 0===(r=function(){return a}.call(e,n,e,o))||(o.exports=r):this.alea=a}(0,t=n.nmd(t),n.amdD)},49:function(t,e,n){var r;!function(t,o,i){function s(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,o=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^o,o=o-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^o,e.a=o-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function u(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function a(t,e){var n=new s(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&u(r,n),o.state=function(){return u(n,{})}),o}o&&o.exports?o.exports=a:n.amdD&&n.amdO?void 0===(r=function(){return a}.call(e,n,e,o))||(o.exports=r):this.tychei=a}(0,t=n.nmd(t),n.amdD)},652:function(t,e,n){var r;!function(t,o,i){function s(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function u(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function a(t,e){var n=new s(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&u(r,n),o.state=function(){return u(n,{})}),o}o&&o.exports?o.exports=a:n.amdD&&n.amdO?void 0===(r=function(){return a}.call(e,n,e,o))||(o.exports=r):this.xor128=a}(0,t=n.nmd(t),n.amdD)},618:function(t,e,n){var r;!function(t,o,i){function s(t){var e=this;e.next=function(){var t,n,r=e.w,o=e.X,i=e.i;return e.w=r=r+1640531527|0,n=o[i+34&127],t=o[i=i+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=o[i]=n^t,e.i=i,n+(r^r>>>16)|0},function(t,e){var n,r,o,i,s,u=[],a=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,a=Math.max(a,e.length)),o=0,i=-32;i<a;++i)e&&(r^=e.charCodeAt((i+32)%e.length)),0===i&&(s=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,i>=0&&(s=s+1640531527|0,o=0==(n=u[127&i]^=r+s)?o+1:0);for(o>=128&&(u[127&(e&&e.length||0)]=-1),o=127,i=512;i>0;--i)r=u[o+34&127],n=u[o=o+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,u[o]=r^n;t.w=s,t.X=u,t.i=o}(e,t)}function u(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function a(t,e){null==t&&(t=+new Date);var n=new s(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&(r.X&&u(r,n),o.state=function(){return u(n,{})}),o}o&&o.exports?o.exports=a:n.amdD&&n.amdO?void 0===(r=function(){return a}.call(e,n,e,o))||(o.exports=r):this.xor4096=a}(0,t=n.nmd(t),n.amdD)},30:function(t,e,n){var r;!function(t,o,i){function s(t){var e=this;e.next=function(){var t,n,r=e.x,o=e.i;return t=r[o],n=(t^=t>>>7)^t<<24,n^=(t=r[o+1&7])^t>>>10,n^=(t=r[o+3&7])^t>>>3,n^=(t=r[o+4&7])^t<<7,t=r[o+7&7],n^=(t^=t<<13)^t<<9,r[o]=n,e.i=o+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function u(t,e){return e.x=t.x.slice(),e.i=t.i,e}function a(t,e){null==t&&(t=+new Date);var n=new s(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&(r.x&&u(r,n),o.state=function(){return u(n,{})}),o}o&&o.exports?o.exports=a:n.amdD&&n.amdO?void 0===(r=function(){return a}.call(e,n,e,o))||(o.exports=r):this.xorshift7=a}(0,t=n.nmd(t),n.amdD)},801:function(t,e,n){var r;!function(t,o,i){function s(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function u(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function a(t,e){var n=new s(t),r=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,r&&("object"==typeof r&&u(r,n),o.state=function(){return u(n,{})}),o}o&&o.exports?o.exports=a:n.amdD&&n.amdO?void 0===(r=function(){return a}.call(e,n,e,o))||(o.exports=r):this.xorwow=a}(0,t=n.nmd(t),n.amdD)},971:function(t,e,n){var r;!function(o,i,s){var u,a=256,l=s.pow(a,6),c=s.pow(2,52),f=2*c,h=a-1;function p(t,e,n){var r=[],h=y(d((e=1==e?{entropy:!0}:e||{}).entropy?[t,w(i)]:null==t?function(){try{var t;return u&&(t=u.randomBytes)?t=t(a):(t=new Uint8Array(a),(o.crypto||o.msCrypto).getRandomValues(t)),w(t)}catch(t){var e=o.navigator,n=e&&e.plugins;return[+new Date,o,n,o.screen,w(i)]}}():t,3),r),p=new m(r),v=function(){for(var t=p.g(6),e=l,n=0;t<c;)t=(t+n)*a,e*=a,n=p.g(1);for(;t>=f;)t/=2,e/=2,n>>>=1;return(t+n)/e};return v.int32=function(){return 0|p.g(4)},v.quick=function(){return p.g(4)/4294967296},v.double=v,y(w(p.S),i),(e.pass||n||function(t,e,n,r){return r&&(r.S&&g(r,p),t.state=function(){return g(p,{})}),n?(s.random=t,e):t})(v,h,"global"in e?e.global:this==s,e.state)}function m(t){var e,n=t.length,r=this,o=0,i=r.i=r.j=0,s=r.S=[];for(n||(t=[n++]);o<a;)s[o]=o++;for(o=0;o<a;o++)s[o]=s[i=h&i+t[o%n]+(e=s[o])],s[i]=e;(r.g=function(t){for(var e,n=0,o=r.i,i=r.j,s=r.S;t--;)e=s[o=h&o+1],n=n*a+s[h&(s[o]=s[i=h&i+e])+(s[i]=e)];return r.i=o,r.j=i,n})(a)}function g(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function d(t,e){var n,r=[],o=typeof t;if(e&&"object"==o)for(n in t)try{r.push(d(t[n],e-1))}catch(t){}return r.length?r:"string"==o?t:t+"\0"}function y(t,e){for(var n,r=t+"",o=0;o<r.length;)e[h&o]=h&(n^=19*e[h&o])+r.charCodeAt(o++);return w(e)}function w(t){return String.fromCharCode.apply(0,t)}if(y(s.random(),i),t.exports){t.exports=p;try{u=n(42)}catch(t){}}else void 0===(r=function(){return p}.call(e,n,e,t))||(t.exports=r)}("undefined"!=typeof self?self:this,[],Math)},42:()=>{}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";new Set;const t="undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:global;class e{_listeners="WeakMap"in t?new WeakMap:void 0;_observer=void 0;options;constructor(t){this.options=t}observe(t,e){return this._listeners.set(t,e),this._getObserver().observe(t,this.options),()=>{this._listeners.delete(t),this._observer.unobserve(t)}}_getObserver(){return this._observer??(this._observer=new ResizeObserver((t=>{for(const n of t)e.entries.set(n.target,n),this._listeners.get(n.target)?.(n)})))}}e.entries="WeakMap"in t?new WeakMap:void 0;let r,o=!1;function i(t,e){t.appendChild(e)}function s(t,e,n){const r=function(t){if(!t)return document;const e=t.getRootNode?t.getRootNode():t.ownerDocument;return e&&e.host?e:t.ownerDocument}(t);if(!r.getElementById(e)){const t=l("style");t.id=e,t.textContent=n,function(t,e){i(t.head||t,e),e.sheet}(r,t)}}function u(t,e,n){t.insertBefore(e,n||null)}function a(t){t.parentNode&&t.parentNode.removeChild(t)}function l(t){return document.createElement(t)}function c(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}function f(t){return document.createTextNode(t)}function h(){return f(" ")}function p(){return f("")}function m(t,e,n,r){return t.addEventListener(e,n,r),()=>t.removeEventListener(e,n,r)}function g(t,e,n){null==n?t.removeAttribute(e):t.getAttribute(e)!==n&&t.setAttribute(e,n)}function d(t){return""===t?null:+t}function y(t,e){e=""+e,t.data!==e&&(t.data=e)}function w(t,e){t.value=null==e?"":e}function v(t,e,n,r){null==n?t.style.removeProperty(e):t.style.setProperty(e,n,r?"important":"")}function b(){}function x(t){return t()}function _(){return Object.create(null)}function M(t){t.forEach(x)}function $(t){return"function"==typeof t}function E(t,e){return t!=t?e==e:t!==e||t&&"object"==typeof t||"function"==typeof t}function S(t){r=t}function A(){if(!r)throw new Error("Function called outside component initialization");return r}function k(t){A().$$.on_mount.push(t)}function j(t){A().$$.after_update.push(t)}new Map;const O=[],R=[];let N=[];const T=[],P=Promise.resolve();let I=!1;function q(t){N.push(t)}const C=new Set;let z=0;function V(){if(0!==z)return;const t=r;do{try{for(;z<O.length;){const t=O[z];z++,S(t),D(t.$$)}}catch(t){throw O.length=0,z=0,t}for(S(null),O.length=0,z=0;R.length;)R.pop()();for(let t=0;t<N.length;t+=1){const e=N[t];C.has(e)||(C.add(e),e())}N.length=0}while(O.length);for(;T.length;)T.pop()();I=!1,C.clear(),S(t)}function D(t){if(null!==t.fragment){t.update(),M(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(q)}}const L=new Set;let B,F;function X(t,e){t&&t.i&&(L.delete(t),t.i(e))}function U(t,e,n,r){if(t&&t.o){if(L.has(t))return;L.add(t),B.c.push((()=>{L.delete(t),r&&(n&&t.d(1),r())})),t.o(e)}else r&&r()}function Y(t){return void 0!==t?.length?t:Array.from(t)}function H(t){t&&t.c()}function Q(t,e,n){const{fragment:r,after_update:o}=t.$$;r&&r.m(e,n),q((()=>{const e=t.$$.on_mount.map(x).filter($);t.$$.on_destroy?t.$$.on_destroy.push(...e):M(e),t.$$.on_mount=[]})),o.forEach(q)}function G(t,e){const n=t.$$;null!==n.fragment&&(function(t){const e=[],n=[];N.forEach((r=>-1===t.indexOf(r)?e.push(r):n.push(r))),n.forEach((t=>t())),N=e}(n.after_update),M(n.on_destroy),n.fragment&&n.fragment.d(e),n.on_destroy=n.fragment=null,n.ctx=[])}function W(t,e,n,i,s,u,l=null,c=[-1]){const f=r;S(t);const h=t.$$={fragment:null,ctx:[],props:u,update:b,not_equal:s,bound:_(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(f?f.$$.context:[])),callbacks:_(),dirty:c,skip_bound:!1,root:e.target||f.$$.root};l&&l(h.root);let p=!1;if(h.ctx=n?n(t,e.props||{},((e,n,...r)=>{const o=r.length?r[0]:n;return h.ctx&&s(h.ctx[e],h.ctx[e]=o)&&(!h.skip_bound&&h.bound[e]&&h.bound[e](o),p&&function(t,e){-1===t.$$.dirty[0]&&(O.push(t),I||(I=!0,P.then(V)),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}(t,e)),n})):[],h.update(),p=!0,M(h.before_update),h.fragment=!!i&&i(h.ctx),e.target){if(e.hydrate){o=!0;const t=(m=e.target,Array.from(m.childNodes));h.fragment&&h.fragment.l(t),t.forEach(a)}else h.fragment&&h.fragment.c();e.intro&&X(t.$$.fragment),Q(t,e.target,e.anchor),o=!1,V()}var m;S(f)}function K(t,e,n,r){const o=n[t]?.type;if(e="Boolean"===o&&"boolean"!=typeof e?null!=e:e,!r||!n[t])return e;if("toAttribute"===r)switch(o){case"Object":case"Array":return null==e?null:JSON.stringify(e);case"Boolean":return e?"":null;case"Number":return null==e?null:e;default:return e}else switch(o){case"Object":case"Array":return e&&JSON.parse(e);case"Boolean":default:return e;case"Number":return null!=e?+e:e}}new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","inert","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]),"function"==typeof HTMLElement&&(F=class extends HTMLElement{$$ctor;$$s;$$c;$$cn=!1;$$d={};$$r=!1;$$p_d={};$$l={};$$l_u=new Map;constructor(t,e,n){super(),this.$$ctor=t,this.$$s=e,n&&this.attachShadow({mode:"open"})}addEventListener(t,e,n){if(this.$$l[t]=this.$$l[t]||[],this.$$l[t].push(e),this.$$c){const n=this.$$c.$on(t,e);this.$$l_u.set(e,n)}super.addEventListener(t,e,n)}removeEventListener(t,e,n){if(super.removeEventListener(t,e,n),this.$$c){const t=this.$$l_u.get(e);t&&(t(),this.$$l_u.delete(e))}}async connectedCallback(){if(this.$$cn=!0,!this.$$c){if(await Promise.resolve(),!this.$$cn)return;function t(t){return()=>{let e;return{c:function(){e=l("slot"),"default"!==t&&g(e,"name",t)},m:function(t,n){u(t,e,n)},d:function(t){t&&a(e)}}}}const e={},n=function(t){const e={};return t.childNodes.forEach((t=>{e[t.slot||"default"]=!0})),e}(this);for(const o of this.$$s)o in n&&(e[o]=[t(o)]);for(const i of this.attributes){const s=this.$$g_p(i.name);s in this.$$d||(this.$$d[s]=K(s,i.value,this.$$p_d,"toProp"))}this.$$c=new this.$$ctor({target:this.shadowRoot||this,props:{...this.$$d,$$slots:e,$$scope:{ctx:[]}}});const r=()=>{this.$$r=!0;for(const t in this.$$p_d)if(this.$$d[t]=this.$$c.$$.ctx[this.$$c.$$.props[t]],this.$$p_d[t].reflect){const e=K(t,this.$$d[t],this.$$p_d,"toAttribute");null==e?this.removeAttribute(this.$$p_d[t].attribute||t):this.setAttribute(this.$$p_d[t].attribute||t,e)}this.$$r=!1};this.$$c.$$.after_update.push(r),r();for(const c in this.$$l)for(const f of this.$$l[c]){const h=this.$$c.$on(c,f);this.$$l_u.set(f,h)}this.$$l={}}}attributeChangedCallback(t,e,n){this.$$r||(t=this.$$g_p(t),this.$$d[t]=K(t,n,this.$$p_d,"toProp"),this.$$c?.$set({[t]:this.$$d[t]}))}disconnectedCallback(){this.$$cn=!1,Promise.resolve().then((()=>{this.$$cn||(this.$$c.$destroy(),this.$$c=void 0)}))}$$g_p(t){return Object.keys(this.$$p_d).find((e=>this.$$p_d[e].attribute===t||!this.$$p_d[e].attribute&&e.toLowerCase()===t))||t}});class Z{$$=void 0;$$set=void 0;$destroy(){G(this,1),this.$destroy=b}$on(t,e){if(!$(e))return b;const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(t){var e;this.$$set&&(e=t,0!==Object.keys(e).length)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}}"undefined"!=typeof window&&(window.__svelte||(window.__svelte={v:new Set})).v.add("4");var J=Array.prototype,tt=J.slice;function et(t,e){return null==t||null==e?NaN:t<e?-1:t>e?1:t>=e?0:NaN}function nt(t,e){return null==t||null==e?NaN:e<t?-1:e>t?1:e>=t?0:NaN}function rt(t){let e,n,r;function o(t,r,o=0,i=t.length){if(o<i){if(0!==e(r,r))return i;do{const e=o+i>>>1;n(t[e],r)<0?o=e+1:i=e}while(o<i)}return o}return 2!==t.length?(e=et,n=(e,n)=>et(t(e),n),r=(e,n)=>t(e)-n):(e=t===et||t===nt?t:ot,n=t,r=t),{left:o,center:function(t,e,n=0,i=t.length){const s=o(t,e,n,i-1);return s>n&&r(t[s-1],e)>-r(t[s],e)?s-1:s},right:function(t,r,o=0,i=t.length){if(o<i){if(0!==e(r,r))return i;do{const e=o+i>>>1;n(t[e],r)<=0?o=e+1:i=e}while(o<i)}return o}}}function ot(){return 0}J.map;const it=rt(et),st=it.right,ut=(it.left,rt((function(t){return null===t?NaN:+t})).center,st);function at(t){return()=>t}function lt(t,e){let n,r;if(void 0===e)for(const e of t)null!=e&&(void 0===n?e>=e&&(n=r=e):(n>e&&(n=e),r<e&&(r=e)));else{let o=-1;for(let i of t)null!=(i=e(i,++o,t))&&(void 0===n?i>=i&&(n=r=i):(n>i&&(n=i),r<i&&(r=i)))}return[n,r]}function ct(t){return t}const ft=Math.sqrt(50),ht=Math.sqrt(10),pt=Math.sqrt(2);function mt(t,e,n){const r=(e-t)/Math.max(0,n),o=Math.floor(Math.log10(r)),i=r/Math.pow(10,o),s=i>=ft?10:i>=ht?5:i>=pt?2:1;let u,a,l;return o<0?(l=Math.pow(10,-o)/s,u=Math.round(t*l),a=Math.round(e*l),u/l<t&&++u,a/l>e&&--a,l=-l):(l=Math.pow(10,o)*s,u=Math.round(t/l),a=Math.round(e/l),u*l<t&&++u,a*l>e&&--a),a<u&&.5<=n&&n<2?mt(t,e,2*n):[u,a,l]}function gt(t,e,n){if(!((n=+n)>0))return[];if((t=+t)==(e=+e))return[t];const r=e<t,[o,i,s]=r?mt(e,t,n):mt(t,e,n);if(!(i>=o))return[];const u=i-o+1,a=new Array(u);if(r)if(s<0)for(let t=0;t<u;++t)a[t]=(i-t)/-s;else for(let t=0;t<u;++t)a[t]=(i-t)*s;else if(s<0)for(let t=0;t<u;++t)a[t]=(o+t)/-s;else for(let t=0;t<u;++t)a[t]=(o+t)*s;return a}function dt(t,e,n){return mt(t=+t,e=+e,n=+n)[2]}function yt(t){return Math.max(1,Math.ceil(Math.log(function(t,e){let n=0;for(let e of t)null!=e&&(e=+e)>=e&&++n;return n}(t))/Math.LN2)+1)}function wt(t,e,n){t=+t,e=+e,n=(o=arguments.length)<2?(e=t,t=0,1):o<3?1:+n;for(var r=-1,o=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(o);++r<o;)i[r]=t+r*n;return i}function vt(t){return t.length}function bt(){}function xt(t){return null==t?bt:function(){return this.querySelector(t)}}function _t(){return[]}function Mt(t){return null==t?_t:function(){return this.querySelectorAll(t)}}function $t(t){return function(){return this.matches(t)}}function Et(t){return function(e){return e.matches(t)}}var St=Array.prototype.find;function At(){return this.firstElementChild}var kt=Array.prototype.filter;function jt(){return Array.from(this.children)}function Ot(t){return new Array(t.length)}function Rt(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function Nt(t,e,n,r,o,i){for(var s,u=0,a=e.length,l=i.length;u<l;++u)(s=e[u])?(s.__data__=i[u],r[u]=s):n[u]=new Rt(t,i[u]);for(;u<a;++u)(s=e[u])&&(o[u]=s)}function Tt(t,e,n,r,o,i,s){var u,a,l,c=new Map,f=e.length,h=i.length,p=new Array(f);for(u=0;u<f;++u)(a=e[u])&&(p[u]=l=s.call(a,a.__data__,u,e)+"",c.has(l)?o[u]=a:c.set(l,a));for(u=0;u<h;++u)l=s.call(t,i[u],u,i)+"",(a=c.get(l))?(r[u]=a,a.__data__=i[u],c.delete(l)):n[u]=new Rt(t,i[u]);for(u=0;u<f;++u)(a=e[u])&&c.get(p[u])===a&&(o[u]=a)}function Pt(t){return t.__data__}function It(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function qt(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}Rt.prototype={constructor:Rt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var Ct="http://www.w3.org/1999/xhtml";const zt={svg:"http://www.w3.org/2000/svg",xhtml:Ct,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function Vt(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),zt.hasOwnProperty(e)?{space:zt[e],local:t}:t}function Dt(t){return function(){this.removeAttribute(t)}}function Lt(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Bt(t,e){return function(){this.setAttribute(t,e)}}function Ft(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function Xt(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function Ut(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function Yt(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function Ht(t){return function(){this.style.removeProperty(t)}}function Qt(t,e,n){return function(){this.style.setProperty(t,e,n)}}function Gt(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function Wt(t,e){return t.style.getPropertyValue(e)||Yt(t).getComputedStyle(t,null).getPropertyValue(e)}function Kt(t){return function(){delete this[t]}}function Zt(t,e){return function(){this[t]=e}}function Jt(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function te(t){return t.trim().split(/^|\s+/)}function ee(t){return t.classList||new ne(t)}function ne(t){this._node=t,this._names=te(t.getAttribute("class")||"")}function re(t,e){for(var n=ee(t),r=-1,o=e.length;++r<o;)n.add(e[r])}function oe(t,e){for(var n=ee(t),r=-1,o=e.length;++r<o;)n.remove(e[r])}function ie(t){return function(){re(this,t)}}function se(t){return function(){oe(this,t)}}function ue(t,e){return function(){(e.apply(this,arguments)?re:oe)(this,t)}}function ae(){this.textContent=""}function le(t){return function(){this.textContent=t}}function ce(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function fe(){this.innerHTML=""}function he(t){return function(){this.innerHTML=t}}function pe(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function me(){this.nextSibling&&this.parentNode.appendChild(this)}function ge(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function de(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===Ct&&e.documentElement.namespaceURI===Ct?e.createElement(t):e.createElementNS(n,t)}}function ye(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function we(t){var e=Vt(t);return(e.local?ye:de)(e)}function ve(){return null}function be(){var t=this.parentNode;t&&t.removeChild(this)}function xe(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function _e(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Me(t){return function(){var e=this.__on;if(e){for(var n,r=0,o=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++o]=n:this.removeEventListener(n.type,n.listener,n.options);++o?e.length=o:delete this.__on}}}function $e(t,e,n){return function(){var r,o=this.__on,i=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(o)for(var s=0,u=o.length;s<u;++s)if((r=o[s]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=i,r.options=n),void(r.value=e);this.addEventListener(t.type,i,n),r={type:t.type,name:t.name,value:e,listener:i,options:n},o?o.push(r):this.__on=[r]}}function Ee(t,e,n){var r=Yt(t),o=r.CustomEvent;"function"==typeof o?o=new o(e,n):(o=r.document.createEvent("Event"),n?(o.initEvent(e,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(e,!1,!1)),t.dispatchEvent(o)}function Se(t,e){return function(){return Ee(this,t,e)}}function Ae(t,e){return function(){return Ee(this,t,e.apply(this,arguments))}}ne.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var ke=[null];function je(t,e){this._groups=t,this._parents=e}function Oe(){return new je([[document.documentElement]],ke)}je.prototype=Oe.prototype={constructor:je,select:function(t){"function"!=typeof t&&(t=xt(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,s,u=e[o],a=u.length,l=r[o]=new Array(a),c=0;c<a;++c)(i=u[c])&&(s=t.call(i,i.__data__,c,u))&&("__data__"in i&&(s.__data__=i.__data__),l[c]=s);return new je(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return null==(e=t.apply(this,arguments))?[]:Array.isArray(e)?e:Array.from(e);var e}}(t):Mt(t);for(var e=this._groups,n=e.length,r=[],o=[],i=0;i<n;++i)for(var s,u=e[i],a=u.length,l=0;l<a;++l)(s=u[l])&&(r.push(t.call(s,s.__data__,l,u)),o.push(s));return new je(r,o)},selectChild:function(t){return this.select(null==t?At:function(t){return function(){return St.call(this.children,t)}}("function"==typeof t?t:Et(t)))},selectChildren:function(t){return this.selectAll(null==t?jt:function(t){return function(){return kt.call(this.children,t)}}("function"==typeof t?t:Et(t)))},filter:function(t){"function"!=typeof t&&(t=$t(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,s=e[o],u=s.length,a=r[o]=[],l=0;l<u;++l)(i=s[l])&&t.call(i,i.__data__,l,s)&&a.push(i);return new je(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,Pt);var n,r=e?Tt:Nt,o=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var s=i.length,u=new Array(s),a=new Array(s),l=new Array(s),c=0;c<s;++c){var f=o[c],h=i[c],p=h.length,m=It(t.call(f,f&&f.__data__,c,o)),g=m.length,d=a[c]=new Array(g),y=u[c]=new Array(g);r(f,h,d,y,l[c]=new Array(p),m,e);for(var w,v,b=0,x=0;b<g;++b)if(w=d[b]){for(b>=x&&(x=b+1);!(v=y[x])&&++x<g;);w._next=v||null}}return(u=new je(u,o))._enter=a,u._exit=l,u},enter:function(){return new je(this._enter||this._groups.map(Ot),this._parents)},exit:function(){return new je(this._exit||this._groups.map(Ot),this._parents)},join:function(t,e,n){var r=this.enter(),o=this,i=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=e&&(o=e(o))&&(o=o.selection()),null==n?i.remove():n(i),r&&o?r.merge(o).order():o},merge:function(t){for(var e=t.selection?t.selection():t,n=this._groups,r=e._groups,o=n.length,i=r.length,s=Math.min(o,i),u=new Array(o),a=0;a<s;++a)for(var l,c=n[a],f=r[a],h=c.length,p=u[a]=new Array(h),m=0;m<h;++m)(l=c[m]||f[m])&&(p[m]=l);for(;a<o;++a)u[a]=n[a];return new je(u,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,o=t[e],i=o.length-1,s=o[i];--i>=0;)(r=o[i])&&(s&&4^r.compareDocumentPosition(s)&&s.parentNode.insertBefore(r,s),s=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=qt);for(var n=this._groups,r=n.length,o=new Array(r),i=0;i<r;++i){for(var s,u=n[i],a=u.length,l=o[i]=new Array(a),c=0;c<a;++c)(s=u[c])&&(l[c]=s);l.sort(e)}return new je(o,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],o=0,i=r.length;o<i;++o){var s=r[o];if(s)return s}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var o,i=e[n],s=0,u=i.length;s<u;++s)(o=i[s])&&t.call(o,o.__data__,s,i);return this},attr:function(t,e){var n=Vt(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?Lt:Dt:"function"==typeof e?n.local?Ut:Xt:n.local?Ft:Bt)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?Ht:"function"==typeof e?Gt:Qt)(t,e,null==n?"":n)):Wt(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?Kt:"function"==typeof e?Jt:Zt)(t,e)):this.node()[t]},classed:function(t,e){var n=te(t+"");if(arguments.length<2){for(var r=ee(this.node()),o=-1,i=n.length;++o<i;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof e?ue:e?ie:se)(n,e))},text:function(t){return arguments.length?this.each(null==t?ae:("function"==typeof t?ce:le)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?fe:("function"==typeof t?pe:he)(t)):this.node().innerHTML},raise:function(){return this.each(me)},lower:function(){return this.each(ge)},append:function(t){var e="function"==typeof t?t:we(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:we(t),r=null==e?ve:"function"==typeof e?e:xt(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(be)},clone:function(t){return this.select(t?_e:xe)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,o,i=function(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}(t+""),s=i.length;if(!(arguments.length<2)){for(u=e?$e:Me,r=0;r<s;++r)this.each(u(i[r],e,n));return this}var u=this.node().__on;if(u)for(var a,l=0,c=u.length;l<c;++l)for(r=0,a=u[l];r<s;++r)if((o=i[r]).type===a.type&&o.name===a.name)return a.value},dispatch:function(t,e){return this.each(("function"==typeof e?Ae:Se)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,o=t[e],i=0,s=o.length;i<s;++i)(r=o[i])&&(yield r)}};const Re=Oe;var Ne={value:()=>{}};function Te(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new Pe(r)}function Pe(t){this._=t}function Ie(t,e){for(var n,r=0,o=t.length;r<o;++r)if((n=t[r]).name===e)return n.value}function qe(t,e,n){for(var r=0,o=t.length;r<o;++r)if(t[r].name===e){t[r]=Ne,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}Pe.prototype=Te.prototype={constructor:Pe,on:function(t,e){var n,r,o=this._,i=(r=o,(t+"").trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))),s=-1,u=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++s<u;)if(n=(t=i[s]).type)o[n]=qe(o[n],t.name,e);else if(null==e)for(n in o)o[n]=qe(o[n],t.name,null);return this}for(;++s<u;)if((n=(t=i[s]).type)&&(n=Ie(o[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Pe(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,o=new Array(n),i=0;i<n;++i)o[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,o)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],o=0,i=r.length;o<i;++o)r[o].value.apply(e,n)}};const Ce=Te;var ze,Ve,De=0,Le=0,Be=0,Fe=1e3,Xe=0,Ue=0,Ye=0,He="object"==typeof performance&&performance.now?performance:Date,Qe="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Ge(){return Ue||(Qe(We),Ue=He.now()+Ye)}function We(){Ue=0}function Ke(){this._call=this._time=this._next=null}function Ze(t,e,n){var r=new Ke;return r.restart(t,e,n),r}function Je(){Ue=(Xe=He.now())+Ye,De=Le=0;try{!function(){Ge(),++De;for(var t,e=ze;e;)(t=Ue-e._time)>=0&&e._call.call(void 0,t),e=e._next;--De}()}finally{De=0,function(){for(var t,e,n=ze,r=1/0;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:ze=e);Ve=t,en(r)}(),Ue=0}}function tn(){var t=He.now(),e=t-Xe;e>Fe&&(Ye-=e,Xe=t)}function en(t){De||(Le&&(Le=clearTimeout(Le)),t-Ue>24?(t<1/0&&(Le=setTimeout(Je,t-He.now()-Ye)),Be&&(Be=clearInterval(Be))):(Be||(Xe=He.now(),Be=setInterval(tn,Fe)),De=1,Qe(Je)))}function nn(t,e,n){var r=new Ke;return e=null==e?0:+e,r.restart((n=>{r.stop(),t(n+e)}),e,n),r}Ke.prototype=Ze.prototype={constructor:Ke,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Ge():+n)+(null==e?0:+e),this._next||Ve===this||(Ve?Ve._next=this:ze=this,Ve=this),this._call=t,this._time=n,en()},stop:function(){this._call&&(this._call=null,this._time=1/0,en())}};var rn=Ce("start","end","cancel","interrupt"),on=[],sn=0,un=3;function an(t,e,n,r,o,i){var s=t.__transition;if(s){if(n in s)return}else t.__transition={};!function(t,e,n){var r,o=t.__transition;function i(a){var l,c,f,h;if(1!==n.state)return u();for(l in o)if((h=o[l]).name===n.name){if(h.state===un)return nn(i);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete o[l]):+l<e&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete o[l])}if(nn((function(){n.state===un&&(n.state=4,n.timer.restart(s,n.delay,n.time),s(a))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=un,r=new Array(f=n.tween.length),l=0,c=-1;l<f;++l)(h=n.tween[l].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=h);r.length=c+1}}function s(e){for(var o=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(u),n.state=5,1),i=-1,s=r.length;++i<s;)r[i].call(t,o);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),u())}function u(){for(var r in n.state=6,n.timer.stop(),delete o[e],o)return;delete t.__transition}o[e]=n,n.timer=Ze((function(t){n.state=1,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:o,on:rn,tween:on,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:sn})}function ln(t,e){var n=fn(t,e);if(n.state>sn)throw new Error("too late; already scheduled");return n}function cn(t,e){var n=fn(t,e);if(n.state>un)throw new Error("too late; already running");return n}function fn(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function hn(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}var pn,mn=180/Math.PI,gn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function dn(t,e,n,r,o,i){var s,u,a;return(s=Math.sqrt(t*t+e*e))&&(t/=s,e/=s),(a=t*n+e*r)&&(n-=t*a,r-=e*a),(u=Math.sqrt(n*n+r*r))&&(n/=u,r/=u,a/=u),t*r<e*n&&(t=-t,e=-e,a=-a,s=-s),{translateX:o,translateY:i,rotate:Math.atan2(e,t)*mn,skewX:Math.atan(a)*mn,scaleX:s,scaleY:u}}function yn(t,e,n,r){function o(t){return t.length?t.pop()+" ":""}return function(i,s){var u=[],a=[];return i=t(i),s=t(s),function(t,r,o,i,s,u){if(t!==o||r!==i){var a=s.push("translate(",null,e,null,n);u.push({i:a-4,x:hn(t,o)},{i:a-2,x:hn(r,i)})}else(o||i)&&s.push("translate("+o+e+i+n)}(i.translateX,i.translateY,s.translateX,s.translateY,u,a),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(o(n)+"rotate(",null,r)-2,x:hn(t,e)})):e&&n.push(o(n)+"rotate("+e+r)}(i.rotate,s.rotate,u,a),function(t,e,n,i){t!==e?i.push({i:n.push(o(n)+"skewX(",null,r)-2,x:hn(t,e)}):e&&n.push(o(n)+"skewX("+e+r)}(i.skewX,s.skewX,u,a),function(t,e,n,r,i,s){if(t!==n||e!==r){var u=i.push(o(i)+"scale(",null,",",null,")");s.push({i:u-4,x:hn(t,n)},{i:u-2,x:hn(e,r)})}else 1===n&&1===r||i.push(o(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,s.scaleX,s.scaleY,u,a),i=s=null,function(t){for(var e,n=-1,r=a.length;++n<r;)u[(e=a[n]).i]=e.x(t);return u.join("")}}}var wn=yn((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?gn:dn(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),vn=yn((function(t){return null==t?gn:(pn||(pn=document.createElementNS("http://www.w3.org/2000/svg","g")),pn.setAttribute("transform",t),(t=pn.transform.baseVal.consolidate())?dn((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):gn)}),", ",")",")");function bn(t,e){var n,r;return function(){var o=cn(this,t),i=o.tween;if(i!==n)for(var s=0,u=(r=n=i).length;s<u;++s)if(r[s].name===e){(r=r.slice()).splice(s,1);break}o.tween=r}}function xn(t,e,n){var r,o;if("function"!=typeof n)throw new Error;return function(){var i=cn(this,t),s=i.tween;if(s!==r){o=(r=s).slice();for(var u={name:e,value:n},a=0,l=o.length;a<l;++a)if(o[a].name===e){o[a]=u;break}a===l&&o.push(u)}i.tween=o}}function _n(t,e,n){var r=t._id;return t.each((function(){var t=cn(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return fn(t,r).value[e]}}function Mn(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function $n(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function En(){}var Sn=.7,An=1/Sn,kn="\\s*([+-]?\\d+)\\s*",jn="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",On="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Rn=/^#([0-9a-f]{3,8})$/,Nn=new RegExp(`^rgb\\(${kn},${kn},${kn}\\)$`),Tn=new RegExp(`^rgb\\(${On},${On},${On}\\)$`),Pn=new RegExp(`^rgba\\(${kn},${kn},${kn},${jn}\\)$`),In=new RegExp(`^rgba\\(${On},${On},${On},${jn}\\)$`),qn=new RegExp(`^hsl\\(${jn},${On},${On}\\)$`),Cn=new RegExp(`^hsla\\(${jn},${On},${On},${jn}\\)$`),zn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Vn(){return this.rgb().formatHex()}function Dn(){return this.rgb().formatRgb()}function Ln(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=Rn.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?Bn(e):3===n?new Un(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?Fn(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?Fn(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=Nn.exec(t))?new Un(e[1],e[2],e[3],1):(e=Tn.exec(t))?new Un(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Pn.exec(t))?Fn(e[1],e[2],e[3],e[4]):(e=In.exec(t))?Fn(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=qn.exec(t))?Kn(e[1],e[2]/100,e[3]/100,1):(e=Cn.exec(t))?Kn(e[1],e[2]/100,e[3]/100,e[4]):zn.hasOwnProperty(t)?Bn(zn[t]):"transparent"===t?new Un(NaN,NaN,NaN,0):null}function Bn(t){return new Un(t>>16&255,t>>8&255,255&t,1)}function Fn(t,e,n,r){return r<=0&&(t=e=n=NaN),new Un(t,e,n,r)}function Xn(t,e,n,r){return 1===arguments.length?((o=t)instanceof En||(o=Ln(o)),o?new Un((o=o.rgb()).r,o.g,o.b,o.opacity):new Un):new Un(t,e,n,null==r?1:r);var o}function Un(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Yn(){return`#${Wn(this.r)}${Wn(this.g)}${Wn(this.b)}`}function Hn(){const t=Qn(this.opacity);return`${1===t?"rgb(":"rgba("}${Gn(this.r)}, ${Gn(this.g)}, ${Gn(this.b)}${1===t?")":`, ${t})`}`}function Qn(t){return isNaN(t)?1:Math.max(0,Math.min(1,t))}function Gn(t){return Math.max(0,Math.min(255,Math.round(t)||0))}function Wn(t){return((t=Gn(t))<16?"0":"")+t.toString(16)}function Kn(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Jn(t,e,n,r)}function Zn(t){if(t instanceof Jn)return new Jn(t.h,t.s,t.l,t.opacity);if(t instanceof En||(t=Ln(t)),!t)return new Jn;if(t instanceof Jn)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,o=Math.min(e,n,r),i=Math.max(e,n,r),s=NaN,u=i-o,a=(i+o)/2;return u?(s=e===i?(n-r)/u+6*(n<r):n===i?(r-e)/u+2:(e-n)/u+4,u/=a<.5?i+o:2-i-o,s*=60):u=a>0&&a<1?0:s,new Jn(s,u,a,t.opacity)}function Jn(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function tr(t){return(t=(t||0)%360)<0?t+360:t}function er(t){return Math.max(0,Math.min(1,t||0))}function nr(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function rr(t,e,n,r,o){var i=t*t,s=i*t;return((1-3*t+3*i-s)*e+(4-6*i+3*s)*n+(1+3*t+3*i-3*s)*r+s*o)/6}Mn(En,Ln,{copy(t){return Object.assign(new this.constructor,this,t)},displayable(){return this.rgb().displayable()},hex:Vn,formatHex:Vn,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return Zn(this).formatHsl()},formatRgb:Dn,toString:Dn}),Mn(Un,Xn,$n(En,{brighter(t){return t=null==t?An:Math.pow(An,t),new Un(this.r*t,this.g*t,this.b*t,this.opacity)},darker(t){return t=null==t?Sn:Math.pow(Sn,t),new Un(this.r*t,this.g*t,this.b*t,this.opacity)},rgb(){return this},clamp(){return new Un(Gn(this.r),Gn(this.g),Gn(this.b),Qn(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Yn,formatHex:Yn,formatHex8:function(){return`#${Wn(this.r)}${Wn(this.g)}${Wn(this.b)}${Wn(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:Hn,toString:Hn})),Mn(Jn,(function(t,e,n,r){return 1===arguments.length?Zn(t):new Jn(t,e,n,null==r?1:r)}),$n(En,{brighter(t){return t=null==t?An:Math.pow(An,t),new Jn(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?Sn:Math.pow(Sn,t),new Jn(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,o=2*n-r;return new Un(nr(t>=240?t-240:t+120,o,r),nr(t,o,r),nr(t<120?t+240:t-120,o,r),this.opacity)},clamp(){return new Jn(tr(this.h),er(this.s),er(this.l),Qn(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const t=Qn(this.opacity);return`${1===t?"hsl(":"hsla("}${tr(this.h)}, ${100*er(this.s)}%, ${100*er(this.l)}%${1===t?")":`, ${t})`}`}}));const or=t=>()=>t;function ir(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):or(isNaN(t)?e:t)}const sr=function t(e){var n=function(t){return 1==(t=+t)?ir:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):or(isNaN(e)?n:e)}}(e);function r(t,e){var r=n((t=Xn(t)).r,(e=Xn(e)).r),o=n(t.g,e.g),i=n(t.b,e.b),s=ir(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=o(e),t.b=i(e),t.opacity=s(e),t+""}}return r.gamma=t,r}(1);function ur(t){return function(e){var n,r,o=e.length,i=new Array(o),s=new Array(o),u=new Array(o);for(n=0;n<o;++n)r=Xn(e[n]),i[n]=r.r||0,s[n]=r.g||0,u[n]=r.b||0;return i=t(i),s=t(s),u=t(u),r.opacity=1,function(t){return r.r=i(t),r.g=s(t),r.b=u(t),r+""}}}var ar=ur((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),o=t[r],i=t[r+1],s=r>0?t[r-1]:2*o-i,u=r<e-1?t[r+2]:2*i-o;return rr((n-r/e)*e,s,o,i,u)}})),lr=(ur((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),o=t[(r+e-1)%e],i=t[r%e],s=t[(r+1)%e],u=t[(r+2)%e];return rr((n-r/e)*e,o,i,s,u)}})),/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g),cr=new RegExp(lr.source,"g");function fr(t,e){var n,r,o,i=lr.lastIndex=cr.lastIndex=0,s=-1,u=[],a=[];for(t+="",e+="";(n=lr.exec(t))&&(r=cr.exec(e));)(o=r.index)>i&&(o=e.slice(i,o),u[s]?u[s]+=o:u[++s]=o),(n=n[0])===(r=r[0])?u[s]?u[s]+=r:u[++s]=r:(u[++s]=null,a.push({i:s,x:hn(n,r)})),i=cr.lastIndex;return i<e.length&&(o=e.slice(i),u[s]?u[s]+=o:u[++s]=o),u.length<2?a[0]?function(t){return function(e){return t(e)+""}}(a[0].x):function(t){return function(){return t}}(e):(e=a.length,function(t){for(var n,r=0;r<e;++r)u[(n=a[r]).i]=n.x(t);return u.join("")})}function hr(t,e){var n;return("number"==typeof e?hn:e instanceof Ln?sr:(n=Ln(e))?(e=n,sr):fr)(t,e)}function pr(t){return function(){this.removeAttribute(t)}}function mr(t){return function(){this.removeAttributeNS(t.space,t.local)}}function gr(t,e,n){var r,o,i=n+"";return function(){var s=this.getAttribute(t);return s===i?null:s===r?o:o=e(r=s,n)}}function dr(t,e,n){var r,o,i=n+"";return function(){var s=this.getAttributeNS(t.space,t.local);return s===i?null:s===r?o:o=e(r=s,n)}}function yr(t,e,n){var r,o,i;return function(){var s,u,a=n(this);if(null!=a)return(s=this.getAttribute(t))===(u=a+"")?null:s===r&&u===o?i:(o=u,i=e(r=s,a));this.removeAttribute(t)}}function wr(t,e,n){var r,o,i;return function(){var s,u,a=n(this);if(null!=a)return(s=this.getAttributeNS(t.space,t.local))===(u=a+"")?null:s===r&&u===o?i:(o=u,i=e(r=s,a));this.removeAttributeNS(t.space,t.local)}}function vr(t,e){var n,r;function o(){var o=e.apply(this,arguments);return o!==r&&(n=(r=o)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}(t,o)),n}return o._value=e,o}function br(t,e){var n,r;function o(){var o=e.apply(this,arguments);return o!==r&&(n=(r=o)&&function(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}(t,o)),n}return o._value=e,o}function xr(t,e){return function(){ln(this,t).delay=+e.apply(this,arguments)}}function _r(t,e){return e=+e,function(){ln(this,t).delay=e}}function Mr(t,e){return function(){cn(this,t).duration=+e.apply(this,arguments)}}function $r(t,e){return e=+e,function(){cn(this,t).duration=e}}var Er=Re.prototype.constructor;function Sr(t){return function(){this.style.removeProperty(t)}}var Ar=0;function kr(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function jr(){return++Ar}var Or=Re.prototype;kr.prototype=function(t){return Re().transition(t)}.prototype={constructor:kr,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=xt(t));for(var r=this._groups,o=r.length,i=new Array(o),s=0;s<o;++s)for(var u,a,l=r[s],c=l.length,f=i[s]=new Array(c),h=0;h<c;++h)(u=l[h])&&(a=t.call(u,u.__data__,h,l))&&("__data__"in u&&(a.__data__=u.__data__),f[h]=a,an(f[h],e,n,h,f,fn(u,n)));return new kr(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Mt(t));for(var r=this._groups,o=r.length,i=[],s=[],u=0;u<o;++u)for(var a,l=r[u],c=l.length,f=0;f<c;++f)if(a=l[f]){for(var h,p=t.call(a,a.__data__,f,l),m=fn(a,n),g=0,d=p.length;g<d;++g)(h=p[g])&&an(h,e,n,g,p,m);i.push(p),s.push(a)}return new kr(i,s,e,n)},selectChild:Or.selectChild,selectChildren:Or.selectChildren,filter:function(t){"function"!=typeof t&&(t=$t(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,s=e[o],u=s.length,a=r[o]=[],l=0;l<u;++l)(i=s[l])&&t.call(i,i.__data__,l,s)&&a.push(i);return new kr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,o=n.length,i=Math.min(r,o),s=new Array(r),u=0;u<i;++u)for(var a,l=e[u],c=n[u],f=l.length,h=s[u]=new Array(f),p=0;p<f;++p)(a=l[p]||c[p])&&(h[p]=a);for(;u<r;++u)s[u]=e[u];return new kr(s,this._parents,this._name,this._id)},selection:function(){return new Er(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=jr(),r=this._groups,o=r.length,i=0;i<o;++i)for(var s,u=r[i],a=u.length,l=0;l<a;++l)if(s=u[l]){var c=fn(s,e);an(s,t,n,l,u,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new kr(r,this._parents,t,n)},call:Or.call,nodes:Or.nodes,node:Or.node,size:Or.size,empty:Or.empty,each:Or.each,on:function(t,e){var n=this._id;return arguments.length<2?fn(this.node(),n).on.on(t):this.each(function(t,e,n){var r,o,i=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?ln:cn;return function(){var s=i(this,t),u=s.on;u!==r&&(o=(r=u).copy()).on(e,n),s.on=o}}(n,t,e))},attr:function(t,e){var n=Vt(t),r="transform"===n?vn:hr;return this.attrTween(t,"function"==typeof e?(n.local?wr:yr)(n,r,_n(this,"attr."+t,e)):null==e?(n.local?mr:pr)(n):(n.local?dr:gr)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=Vt(t);return this.tween(n,(r.local?vr:br)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?wn:hr;return null==e?this.styleTween(t,function(t,e){var n,r,o;return function(){var i=Wt(this,t),s=(this.style.removeProperty(t),Wt(this,t));return i===s?null:i===n&&s===r?o:o=e(n=i,r=s)}}(t,r)).on("end.style."+t,Sr(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,o,i;return function(){var s=Wt(this,t),u=n(this),a=u+"";return null==u&&(this.style.removeProperty(t),a=u=Wt(this,t)),s===a?null:s===r&&a===o?i:(o=a,i=e(r=s,u))}}(t,r,_n(this,"style."+t,e))).each(function(t,e){var n,r,o,i,s="style."+e,u="end."+s;return function(){var a=cn(this,t),l=a.on,c=null==a.value[s]?i||(i=Sr(e)):void 0;l===n&&o===c||(r=(n=l).copy()).on(u,o=c),a.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,o,i=n+"";return function(){var s=Wt(this,t);return s===i?null:s===r?o:o=e(r=s,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){var r,o;function i(){var i=e.apply(this,arguments);return i!==o&&(r=(o=i)&&function(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}(t,i,n)),r}return i._value=e,i}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(_n(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,function(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&function(t){return function(e){this.textContent=t.call(this,e)}}(r)),e}return r._value=t,r}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,o=fn(this.node(),n).tween,i=0,s=o.length;i<s;++i)if((r=o[i]).name===t)return r.value;return null}return this.each((null==e?bn:xn)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?xr:_r)(e,t)):fn(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Mr:$r)(e,t)):fn(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){cn(this,t).ease=e}}(e,t)):fn(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;cn(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,o=n.size();return new Promise((function(i,s){var u={value:s},a={value:function(){0==--o&&i()}};n.each((function(){var n=cn(this,r),o=n.on;o!==t&&((e=(t=o).copy())._.cancel.push(u),e._.interrupt.push(u),e._.end.push(a)),n.on=e})),0===o&&i()}))},[Symbol.iterator]:Or[Symbol.iterator]};var Rr={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Nr(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}Re.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,r,o,i=t.__transition,s=!0;if(i){for(o in e=null==e?null:e+"",i)(n=i[o]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete i[o]):s=!1;s&&delete t.__transition}}(this,t)}))},Re.prototype.transition=function(t){var e,n;t instanceof kr?(e=t._id,t=t._name):(e=jr(),(n=Rr).time=Ge(),t=null==t?null:t+"");for(var r=this._groups,o=r.length,i=0;i<o;++i)for(var s,u=r[i],a=u.length,l=0;l<a;++l)(s=u[l])&&an(s,t,e,l,u,n||Nr(s,e));return new kr(r,this._parents,t,e)};const{abs:Tr,max:Pr,min:Ir}=Math;function qr(t){return{type:t}}function Cr(t){return"string"==typeof t?new je([[document.querySelector(t)]],[document.documentElement]):new je([[t]],ke)}function zr(t,e){if(t=function(t){let e;for(;e=t.sourceEvent;)t=e;return t}(t),void 0===e&&(e=t.currentTarget),e){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}if(e.getBoundingClientRect){var o=e.getBoundingClientRect();return[t.clientX-o.left-e.clientLeft,t.clientY-o.top-e.clientTop]}}return[t.pageX,t.pageY]}["w","e"].map(qr),["n","s"].map(qr),["n","w","e","s","nw","ne","sw","se"].map(qr);const Vr={passive:!1},Dr={capture:!0,passive:!1};function Lr(t){t.stopImmediatePropagation()}function Br(t){t.preventDefault(),t.stopImmediatePropagation()}const Fr=t=>()=>t;function Xr(t,{sourceEvent:e,subject:n,target:r,identifier:o,active:i,x:s,y:u,dx:a,dy:l,dispatch:c}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:e,enumerable:!0,configurable:!0},subject:{value:n,enumerable:!0,configurable:!0},target:{value:r,enumerable:!0,configurable:!0},identifier:{value:o,enumerable:!0,configurable:!0},active:{value:i,enumerable:!0,configurable:!0},x:{value:s,enumerable:!0,configurable:!0},y:{value:u,enumerable:!0,configurable:!0},dx:{value:a,enumerable:!0,configurable:!0},dy:{value:l,enumerable:!0,configurable:!0},_:{value:c}})}function Ur(t){return!t.ctrlKey&&!t.button}function Yr(){return this.parentNode}function Hr(t,e){return null==e?{x:t.x,y:t.y}:e}function Qr(){return navigator.maxTouchPoints||"ontouchstart"in this}function Gr(){var t,e,n,r,o=Ur,i=Yr,s=Hr,u=Qr,a={},l=Ce("start","drag","end"),c=0,f=0;function h(t){t.on("mousedown.drag",p).filter(u).on("touchstart.drag",d).on("touchmove.drag",y,Vr).on("touchend.drag touchcancel.drag",w).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(s,u){if(!r&&o.call(this,s,u)){var a=v(this,i.call(this,s,u),s,u,"mouse");a&&(Cr(s.view).on("mousemove.drag",m,Dr).on("mouseup.drag",g,Dr),function(t){var e=t.document.documentElement,n=Cr(t).on("dragstart.drag",Br,Dr);"onselectstart"in e?n.on("selectstart.drag",Br,Dr):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}(s.view),Lr(s),n=!1,t=s.clientX,e=s.clientY,a("start",s))}}function m(r){if(Br(r),!n){var o=r.clientX-t,i=r.clientY-e;n=o*o+i*i>f}a.mouse("drag",r)}function g(t){Cr(t.view).on("mousemove.drag mouseup.drag",null),function(t,e){var n=t.document.documentElement,r=Cr(t).on("dragstart.drag",null);e&&(r.on("click.drag",Br,Dr),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(t.view,n),Br(t),a.mouse("end",t)}function d(t,e){if(o.call(this,t,e)){var n,r,s=t.changedTouches,u=i.call(this,t,e),a=s.length;for(n=0;n<a;++n)(r=v(this,u,t,e,s[n].identifier,s[n]))&&(Lr(t),r("start",t,s[n]))}}function y(t){var e,n,r=t.changedTouches,o=r.length;for(e=0;e<o;++e)(n=a[r[e].identifier])&&(Br(t),n("drag",t,r[e]))}function w(t){var e,n,o=t.changedTouches,i=o.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),e=0;e<i;++e)(n=a[o[e].identifier])&&(Lr(t),n("end",t,o[e]))}function v(t,e,n,r,o,i){var u,f,p,m=l.copy(),g=zr(i||n,e);if(null!=(p=s.call(t,new Xr("beforestart",{sourceEvent:n,target:h,identifier:o,active:c,x:g[0],y:g[1],dx:0,dy:0,dispatch:m}),r)))return u=p.x-g[0]||0,f=p.y-g[1]||0,function n(i,s,l){var d,y=g;switch(i){case"start":a[o]=n,d=c++;break;case"end":delete a[o],--c;case"drag":g=zr(l||s,e),d=c}m.call(i,t,new Xr(i,{sourceEvent:s,subject:p,target:h,identifier:o,active:d,x:g[0]+u,y:g[1]+f,dx:g[0]-y[0],dy:g[1]-y[1],dispatch:m}),r)}}return h.filter=function(t){return arguments.length?(o="function"==typeof t?t:Fr(!!t),h):o},h.container=function(t){return arguments.length?(i="function"==typeof t?t:Fr(t),h):i},h.subject=function(t){return arguments.length?(s="function"==typeof t?t:Fr(t),h):s},h.touchable=function(t){return arguments.length?(u="function"==typeof t?t:Fr(!!t),h):u},h.on=function(){var t=l.on.apply(l,arguments);return t===l?h:t},h.clickDistance=function(t){return arguments.length?(f=(t=+t)*t,h):Math.sqrt(f)},h}function Wr(t,e){var n,r=e?e.length:0,o=t?Math.min(r,t.length):0,i=new Array(o),s=new Array(r);for(n=0;n<o;++n)i[n]=to(t[n],e[n]);for(;n<r;++n)s[n]=e[n];return function(t){for(n=0;n<o;++n)s[n]=i[n](t);return s}}function Kr(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function Zr(t,e){var n,r={},o={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=to(t[n],e[n]):o[n]=e[n];return function(t){for(n in r)o[n]=r[n](t);return o}}function Jr(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,o=e.slice();return function(i){for(n=0;n<r;++n)o[n]=t[n]*(1-i)+e[n]*i;return o}}function to(t,e){var n,r,o=typeof e;return null==e||"boolean"===o?or(e):("number"===o?hn:"string"===o?(n=Ln(e))?(e=n,sr):fr:e instanceof Ln?sr:e instanceof Date?Kr:(r=e,!ArrayBuffer.isView(r)||r instanceof DataView?Array.isArray(e)?Wr:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Zr:hn:Jr))(t,e)}function eo(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}function no(t){return+t}Xr.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var ro=[0,1];function oo(t){return t}function io(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=isNaN(e)?NaN:.5,function(){return n});var n}function so(t,e,n){var r=t[0],o=t[1],i=e[0],s=e[1];return o<r?(r=io(o,r),i=n(s,i)):(r=io(r,o),i=n(i,s)),function(t){return i(r(t))}}function uo(t,e,n){var r=Math.min(t.length,e.length)-1,o=new Array(r),i=new Array(r),s=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++s<r;)o[s]=io(t[s],t[s+1]),i[s]=n(e[s],e[s+1]);return function(e){var n=ut(t,e,1,r)-1;return i[n](o[n](e))}}function ao(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function lo(t,e){switch(arguments.length){case 0:break;case 1:"function"==typeof t?this.interpolator(t):this.range(t);break;default:this.domain(t),"function"==typeof e?this.interpolator(e):this.range(e)}return this}var co,fo=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function ho(t){if(!(e=fo.exec(t)))throw new Error("invalid format: "+t);var e;return new po({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function po(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function mo(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function go(t){return(t=mo(Math.abs(t)))?t[1]:NaN}function yo(t,e){var n=mo(t,e);if(!n)return t+"";var r=n[0],o=n[1];return o<0?"0."+new Array(-o).join("0")+r:r.length>o+1?r.slice(0,o+1)+"."+r.slice(o+1):r+new Array(o-r.length+2).join("0")}ho.prototype=po.prototype,po.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const wo={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>yo(100*t,e),r:yo,s:function(t,e){var n=mo(t,e);if(!n)return t+"";var r=n[0],o=n[1],i=o-(co=3*Math.max(-8,Math.min(8,Math.floor(o/3))))+1,s=r.length;return i===s?r:i>s?r+new Array(i-s+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+mo(t,Math.max(0,e+i-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function vo(t){return t}var bo,xo,_o,Mo=Array.prototype.map,$o=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Eo(t){var e=t.domain;return t.ticks=function(t){var n=e();return gt(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return function(t,e,n,r){var o,i=function(t,e,n){n=+n;const r=(e=+e)<(t=+t),o=r?dt(e,t,n):dt(t,e,n);return(r?-1:1)*(o<0?1/-o:o)}(t,e,n);switch((r=ho(null==r?",f":r)).type){case"s":var s=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(o=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(go(e)/3)))-go(Math.abs(t)))}(i,s))||(r.precision=o),_o(r,s);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(o=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,go(e)-go(t))+1}(i,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=o-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(o=function(t){return Math.max(0,-go(Math.abs(t)))}(i))||(r.precision=o-2*("%"===r.type))}return xo(r)}(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,o,i=e(),s=0,u=i.length-1,a=i[s],l=i[u],c=10;for(l<a&&(o=a,a=l,l=o,o=s,s=u,u=o);c-- >0;){if((o=dt(a,l,n))===r)return i[s]=a,i[u]=l,e(i);if(o>0)a=Math.floor(a/o)*o,l=Math.ceil(l/o)*o;else{if(!(o<0))break;a=Math.ceil(a*o)/o,l=Math.floor(l*o)/o}r=o}return t},t}function So(){var t=function(){var t,e,n,r,o,i,s=ro,u=ro,a=to,l=oo;function c(){var t,e,n,a=Math.min(s.length,u.length);return l!==oo&&(t=s[0],e=s[a-1],t>e&&(n=t,t=e,e=n),l=function(n){return Math.max(t,Math.min(e,n))}),r=a>2?uo:so,o=i=null,f}function f(e){return null==e||isNaN(e=+e)?n:(o||(o=r(s.map(t),u,a)))(t(l(e)))}return f.invert=function(n){return l(e((i||(i=r(u,s.map(t),hn)))(n)))},f.domain=function(t){return arguments.length?(s=Array.from(t,no),c()):s.slice()},f.range=function(t){return arguments.length?(u=Array.from(t),c()):u.slice()},f.rangeRound=function(t){return u=Array.from(t),a=eo,c()},f.clamp=function(t){return arguments.length?(l=!!t||oo,c()):l!==oo},f.interpolate=function(t){return arguments.length?(a=t,c()):a},f.unknown=function(t){return arguments.length?(n=t,f):n},function(n,r){return t=n,e=r,c()}}()(oo,oo);return t.copy=function(){return e=t,So().domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown());var e},ao.apply(t,arguments),Eo(t)}function Ao(){var t=Eo(function(){var t,e,n,r,o,i=0,s=1,u=oo,a=!1;function l(e){return null==e||isNaN(e=+e)?o:u(0===n?.5:(e=(r(e)-t)*n,a?Math.max(0,Math.min(1,e)):e))}function c(t){return function(e){var n,r;return arguments.length?([n,r]=e,u=t(n,r),l):[u(0),u(1)]}}return l.domain=function(o){return arguments.length?([i,s]=o,t=r(i=+i),e=r(s=+s),n=t===e?0:1/(e-t),l):[i,s]},l.clamp=function(t){return arguments.length?(a=!!t,l):a},l.interpolator=function(t){return arguments.length?(u=t,l):u},l.range=c(to),l.rangeRound=c(eo),l.unknown=function(t){return arguments.length?(o=t,l):o},function(o){return r=o,t=o(i),e=o(s),n=t===e?0:1/(e-t),l}}()(oo));return t.copy=function(){return e=t,Ao().domain(e.domain()).interpolator(e.interpolator()).clamp(e.clamp()).unknown(e.unknown());var e},lo.apply(t,arguments)}bo=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?vo:(e=Mo.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var o=t.length,i=[],s=0,u=e[0],a=0;o>0&&u>0&&(a+u+1>r&&(u=Math.max(1,r-a)),i.push(t.substring(o-=u,o+u)),!((a+=u+1)>r));)u=e[s=(s+1)%e.length];return i.reverse().join(n)}),o=void 0===t.currency?"":t.currency[0]+"",i=void 0===t.currency?"":t.currency[1]+"",s=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?vo:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(Mo.call(t.numerals,String)),a=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"−":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var e=(t=ho(t)).fill,n=t.align,f=t.sign,h=t.symbol,p=t.zero,m=t.width,g=t.comma,d=t.precision,y=t.trim,w=t.type;"n"===w?(g=!0,w="g"):wo[w]||(void 0===d&&(d=12),y=!0,w="g"),(p||"0"===e&&"="===n)&&(p=!0,e="0",n="=");var v="$"===h?o:"#"===h&&/[boxX]/.test(w)?"0"+w.toLowerCase():"",b="$"===h?i:/[%p]/.test(w)?a:"",x=wo[w],_=/[defgprs%]/.test(w);function M(t){var o,i,a,h=v,M=b;if("c"===w)M=x(t)+M,t="";else{var $=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:x(Math.abs(t),d),y&&(t=function(t){t:for(var e,n=t.length,r=1,o=-1;r<n;++r)switch(t[r]){case".":o=e=r;break;case"0":0===o&&(o=r),e=r;break;default:if(!+t[r])break t;o>0&&(o=0)}return o>0?t.slice(0,o)+t.slice(e+1):t}(t)),$&&0==+t&&"+"!==f&&($=!1),h=($?"("===f?f:l:"-"===f||"("===f?"":f)+h,M=("s"===w?$o[8+co/3]:"")+M+($&&"("===f?")":""),_)for(o=-1,i=t.length;++o<i;)if(48>(a=t.charCodeAt(o))||a>57){M=(46===a?s+t.slice(o+1):t.slice(o))+M,t=t.slice(0,o);break}}g&&!p&&(t=r(t,1/0));var E=h.length+t.length+M.length,S=E<m?new Array(m-E+1).join(e):"";switch(g&&p&&(t=r(S+t,S.length?m-M.length:1/0),S=""),n){case"<":t=h+t+M+S;break;case"=":t=h+S+t+M;break;case"^":t=S.slice(0,E=S.length>>1)+h+t+M+S.slice(E);break;default:t=S+h+t+M}return u(t)}return d=void 0===d?6:/[gprs]/.test(w)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),M.toString=function(){return t+""},M}return{format:f,formatPrefix:function(t,e){var n=f(((t=ho(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(go(e)/3))),o=Math.pow(10,-r),i=$o[8+r/3];return function(t){return n(o*t)+i}}}}({thousands:",",grouping:[3],currency:["$",""]}),xo=bo.format,_o=bo.formatPrefix;const ko=(t=>ar(t[t.length-1]))(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map((function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n})));function jo(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function Oo(t){return function(){return t}}function Ro(t){this._context=t}function No(t){return new Ro(t)}Array.prototype.slice,Ro.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};const To=Math.PI,Po=2*To,Io=1e-6,qo=Po-Io;function Co(t){this._+=t[0];for(let e=1,n=t.length;e<n;++e)this._+=arguments[e]+t[e]}class zo{constructor(t){this._x0=this._y0=this._x1=this._y1=null,this._="",this._append=null==t?Co:function(t){let e=Math.floor(t);if(!(e>=0))throw new Error(`invalid digits: ${t}`);if(e>15)return Co;const n=10**e;return function(t){this._+=t[0];for(let e=1,r=t.length;e<r;++e)this._+=Math.round(arguments[e]*n)/n+t[e]}}(t)}moveTo(t,e){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._append`Z`)}lineTo(t,e){this._append`L${this._x1=+t},${this._y1=+e}`}quadraticCurveTo(t,e,n,r){this._append`Q${+t},${+e},${this._x1=+n},${this._y1=+r}`}bezierCurveTo(t,e,n,r,o,i){this._append`C${+t},${+e},${+n},${+r},${this._x1=+o},${this._y1=+i}`}arcTo(t,e,n,r,o){if(t=+t,e=+e,n=+n,r=+r,(o=+o)<0)throw new Error(`negative radius: ${o}`);let i=this._x1,s=this._y1,u=n-t,a=r-e,l=i-t,c=s-e,f=l*l+c*c;if(null===this._x1)this._append`M${this._x1=t},${this._y1=e}`;else if(f>Io)if(Math.abs(c*u-a*l)>Io&&o){let h=n-i,p=r-s,m=u*u+a*a,g=h*h+p*p,d=Math.sqrt(m),y=Math.sqrt(f),w=o*Math.tan((To-Math.acos((m+f-g)/(2*d*y)))/2),v=w/y,b=w/d;Math.abs(v-1)>Io&&this._append`L${t+v*l},${e+v*c}`,this._append`A${o},${o},0,0,${+(c*h>l*p)},${this._x1=t+b*u},${this._y1=e+b*a}`}else this._append`L${this._x1=t},${this._y1=e}`}arc(t,e,n,r,o,i){if(t=+t,e=+e,i=!!i,(n=+n)<0)throw new Error(`negative radius: ${n}`);let s=n*Math.cos(r),u=n*Math.sin(r),a=t+s,l=e+u,c=1^i,f=i?r-o:o-r;null===this._x1?this._append`M${a},${l}`:(Math.abs(this._x1-a)>Io||Math.abs(this._y1-l)>Io)&&this._append`L${a},${l}`,n&&(f<0&&(f=f%Po+Po),f>qo?this._append`A${n},${n},0,1,${c},${t-s},${e-u}A${n},${n},0,1,${c},${this._x1=a},${this._y1=l}`:f>Io&&this._append`A${n},${n},0,${+(f>=To)},${c},${this._x1=t+n*Math.cos(o)},${this._y1=e+n*Math.sin(o)}`)}rect(t,e,n,r){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}h${n=+n}v${+r}h${-n}Z`}toString(){return this._}}function Vo(t){let e=3;return t.digits=function(n){if(!arguments.length)return e;if(null==n)e=null;else{const t=Math.floor(n);if(!(t>=0))throw new RangeError(`invalid digits: ${n}`);e=t}return t},()=>new zo(e)}function Do(t){return t[0]}function Lo(t){return t[1]}function Bo(t,e){var n=Oo(!0),r=null,o=No,i=null,s=Vo(u);function u(u){var a,l,c,f=(u=jo(u)).length,h=!1;for(null==r&&(i=o(c=s())),a=0;a<=f;++a)!(a<f&&n(l=u[a],a,u))===h&&((h=!h)?i.lineStart():i.lineEnd()),h&&i.point(+t(l,a,u),+e(l,a,u));if(c)return i=null,c+""||null}return t="function"==typeof t?t:void 0===t?Do:Oo(t),e="function"==typeof e?e:void 0===e?Lo:Oo(e),u.x=function(e){return arguments.length?(t="function"==typeof e?e:Oo(+e),u):t},u.y=function(t){return arguments.length?(e="function"==typeof t?t:Oo(+t),u):e},u.defined=function(t){return arguments.length?(n="function"==typeof t?t:Oo(!!t),u):n},u.curve=function(t){return arguments.length?(o=t,null!=r&&(i=o(r)),u):o},u.context=function(t){return arguments.length?(null==t?r=i=null:i=o(r=t),u):r},u}function Fo(t,e,n){this.k=t,this.x=e,this.y=n}zo.prototype,Fo.prototype={constructor:Fo,scale:function(t){return 1===t?this:new Fo(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new Fo(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},new Fo(1,0,0),Fo.prototype;var Xo=n(406);Xo.XA,Xo.a_;const Uo=Xo.yQ,Yo=(Xo.Ec,Xo.dx),Ho=(Xo.LU,Xo.Rm,Xo.y3),Qo=(Xo.qK,Xo.pb,Xo.j,Xo.sO,Xo.BZ,Xo.EK,Xo.Db,Xo.Fx,Xo.tU,Xo.Ym,Xo.rs,Xo.QR,Xo.TB,Xo.oH,Xo.Sc,Xo.it,Xo.$r,Xo.QM,Xo.AV,Xo.y3,Xo.y3,Xo.GH),Go=Xo.SO,Wo=(Xo.uZ,Xo.yU,Xo.F1);Xo.re;var Ko=n(377);function Zo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,"symbol"==typeof(o=function(t,e){if("object"!=typeof t||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key))?o:String(o)),r)}var o}function Jo(t,e,n){return e&&Zo(t.prototype,e),n&&Zo(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function ti(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,ei(t,e)}function ei(t,e){return ei=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},ei(t,e)}var ni=function(){function t(){}return t.prototype._seed=function(t,e){if(t===(t||0))return t;for(var n=""+t,r=0,o=0;o<n.length;++o)r^=0|n.charCodeAt(o);return r},t}(),ri=function(t){function e(e,n){var r;return(r=t.call(this)||this)._rng=void 0,r.seed(e,n),r}ti(e,t);var n=e.prototype;return n.next=function(){return this._rng()},n.seed=function(t,e){this._rng=t},n.clone=function(t,n){return new e(this._rng,n)},Jo(e,[{key:"name",get:function(){return"function"}}]),e}(ni),oi=function(){var t=[].slice.call(arguments),e=t[0],n=void 0===e?"default":e;switch(typeof n){case"object":if(n instanceof ni)return n;break;case"function":return new ri(n);default:return new ri(Ko.apply(void 0,t))}throw new Error('invalid RNG "'+n+'"')},ii=function(t,e,n){return void 0===e&&(e=0),void 0===n&&(n=1),function(){return t.next()*(n-e)+e}};function si(t){return new ui(t)}var ui=function(t){var e=this;this.n=void 0,this.isInt=function(){if(Number.isInteger(e.n))return e;throw new Error("Expected number to be an integer, got "+e.n)},this.isPositive=function(){if(e.n>0)return e;throw new Error("Expected number to be positive, got "+e.n)},this.lessThan=function(t){if(e.n<t)return e;throw new Error("Expected number to be less than "+t+", got "+e.n)},this.greaterThanOrEqual=function(t){if(e.n>=t)return e;throw new Error("Expected number to be greater than or equal to "+t+", got "+e.n)},this.greaterThan=function(t){if(e.n>t)return e;throw new Error("Expected number to be greater than "+t+", got "+e.n)},this.n=t},ai=function(t,e,n){return void 0===e&&(e=0),void 0===n&&(n=1),void 0===n&&(n=void 0===e?1:e,e=0),si(e).isInt(),si(n).isInt(),function(){return Math.floor(t.next()*(n-e+1)+e)}},li=function(t){return function(){return t.next()>=.5}},ci=[0,0,.6931471805599453,1.791759469228055,3.1780538303479458,4.787491742782046,6.579251212010101,8.525161361065415,10.60460290274525,12.801827480081469],fi=function(t){return ci[t]},hi=function(t){function e(){return t.apply(this,arguments)||this}ti(e,t);var n=e.prototype;return n.next=function(){return Math.random()},n.seed=function(t,e){},n.clone=function(){return new e},Jo(e,[{key:"name",get:function(){return"default"}}]),e}(ni),pi=function(){function t(t){var e=this;this._rng=void 0,this._patch=void 0,this._cache={},this.next=function(){return e._rng.next()},this.float=function(t,n){return e.uniform(t,n)()},this.int=function(t,n){return e.uniformInt(t,n)()},this.integer=function(t,n){return e.uniformInt(t,n)()},this.bool=function(){return e.uniformBoolean()()},this.boolean=function(){return e.uniformBoolean()()},this.uniform=function(t,n){return e._memoize("uniform",ii,t,n)},this.uniformInt=function(t,n){return e._memoize("uniformInt",ai,t,n)},this.uniformBoolean=function(){return e._memoize("uniformBoolean",li)},this.normal=function(t,n){return function(t,e,n){return void 0===e&&(e=0),void 0===n&&(n=1),function(){var r,o,i;do{i=(r=2*t.next()-1)*r+(o=2*t.next()-1)*o}while(!i||i>1);return e+n*o*Math.sqrt(-2*Math.log(i)/i)}}(e,t,n)},this.logNormal=function(t,n){return function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=1);var r=t.normal(e,n);return function(){return Math.exp(r())}}(e,t,n)},this.bernoulli=function(t){return function(t,e){return void 0===e&&(e=.5),si(e).greaterThanOrEqual(0).lessThan(1),function(){return Math.floor(t.next()+e)}}(e,t)},this.binomial=function(t,n){return function(t,e,n){return void 0===e&&(e=1),void 0===n&&(n=.5),si(e).isInt().isPositive(),si(n).greaterThanOrEqual(0).lessThan(1),function(){for(var r=0,o=0;r++<e;)t.next()<n&&o++;return o}}(e,t,n)},this.geometric=function(t){return function(t,e){void 0===e&&(e=.5),si(e).greaterThan(0).lessThan(1);var n=1/Math.log(1-e);return function(){return Math.floor(1+Math.log(t.next())*n)}}(e,t)},this.poisson=function(t){return function(t,e){if(void 0===e&&(e=1),si(e).isPositive(),e<10){var n=Math.exp(-e);return function(){for(var r=n,o=0,i=t.next();i>r;)i-=r,r=e*r/++o;return o}}var r=Math.sqrt(e),o=.931+2.53*r,i=.02483*o-.059,s=1.1239+1.1328/(o-3.4),u=.9277-3.6224/(o-2);return function(){for(;;){var n=void 0,a=t.next();if(a<=.86*u)return n=a/u-.43,Math.floor((2*i/(.5-Math.abs(n))+o)*n+e+.445);a>=u?n=t.next()-.5:(n=((n=a/u-.93)<0?-.5:.5)-n,a=t.next()*u);var l=.5-Math.abs(n);if(!(l<.013&&a>l)){var c=Math.floor((2*i/l+o)*n+e+.445);if(a=a*s/(i/(l*l)+o),c>=10){var f=(c+.5)*Math.log(e/c)-e-.9189385332046727+c-(1/12-(1/360-1/(1260*c*c))/(c*c))/c;if(Math.log(a*r)<=f)return c}else if(c>=0){var h,p=null!=(h=fi(c))?h:0;if(Math.log(a)<=c*Math.log(e)-e-p)return c}}}}}(e,t)},this.exponential=function(t){return function(t,e){return void 0===e&&(e=1),si(e).isPositive(),function(){return-Math.log(1-t.next())/e}}(e,t)},this.irwinHall=function(t){return function(t,e){return void 0===e&&(e=1),si(e).isInt().greaterThanOrEqual(0),function(){for(var n=0,r=0;r<e;++r)n+=t.next();return n}}(e,t)},this.bates=function(t){return function(t,e){void 0===e&&(e=1),si(e).isInt().isPositive();var n=t.irwinHall(e);return function(){return n()/e}}(e,t)},this.pareto=function(t){return function(t,e){void 0===e&&(e=1),si(e).greaterThanOrEqual(0);var n=1/e;return function(){return 1/Math.pow(1-t.next(),n)}}(e,t)},t&&t instanceof ni?this.use(t):this.use(new hi),this._cache={}}var e=t.prototype;return e.clone=function(){var e=[].slice.call(arguments);return e.length?new t(oi.apply(void 0,e)):new t(this.rng.clone())},e.use=function(){this._rng=oi.apply(void 0,[].slice.call(arguments))},e.patch=function(){if(this._patch)throw new Error("Math.random already patched");this._patch=Math.random,Math.random=this.uniform()},e.unpatch=function(){this._patch&&(Math.random=this._patch,delete this._patch)},e.choice=function(t){if(!Array.isArray(t))throw new Error("Random.choice expected input to be an array, got "+typeof t);var e=null==t?void 0:t.length;return e>0?t[this.uniformInt(0,e-1)()]:void 0},e._memoize=function(t,e){var n=[].slice.call(arguments,2),r=""+n.join(";"),o=this._cache[t];return void 0!==o&&o.key===r||(o={key:r,distribution:e.apply(void 0,[this].concat(n))},this._cache[t]=o),o.distribution},Jo(t,[{key:"rng",get:function(){return this._rng}}]),t}(),mi=new pi;function gi(t){return gi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},gi(t)}function di(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function yi(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==gi(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==gi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===gi(o)?o:String(o)),r)}var o}function wi(t,e,n){return e&&yi(t.prototype,e),n&&yi(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}var vi=function(){function t(e,n){di(this,t),this.mean=e,this.variance=n,this.normal=mi.normal()}return wi(t,[{key:"at",value:function(t){return Math.exp(-.5*Math.pow(t-this.mean,2)/this.variance)*(1/Math.sqrt(2*this.variance*Math.PI))}},{key:"sample",value:function(){return this.std()*this.normal()+this.mean}},{key:"std",value:function(){return Math.sqrt(this.variance)}}]),t}(),bi=function(){function t(e,n){di(this,t),e instanceof Ho&&n instanceof Ho?(this.mean=e,this.cov=n):(this.mean=new Ho([e]).transpose(),this.cov=new Ho(n)),this.dim=this.mean.rows}return wi(t,[{key:"at",value:function(t){var e=new Ho(t).sub(this.mean);return e.transpose().mmul(Go(this.cov)).mmul(e).mul(-.5).exp().get(0,0)*(1/Math.sqrt(Math.pow(2*Math.PI,this.mean.rows)*Qo(this.cov)))}},{key:"jointLogLikelihood",value:function(t){var e=this;return t.map((function(t){return Math.log(e.at(t))})).reduce((function(t,e){return t+e}),0)}},{key:"marginalize",value:function(e){var n=xi(this.mean,0,0,e,1),r=xi(this.mean,e,0,this.mean.rows,1),o=xi(this.cov,0,0,e,e),i=xi(this.cov,e,e,this.mean.rows,this.mean.rows);return[new t(n,o),new t(r,i)]}},{key:"condition",value:function(e){var n=e.length,r=new Ho([e]).transpose(),o=xi(this.cov,0,0,n,n),i=xi(this.cov,0,n,n,this.mean.rows),s=i.transpose(),u=xi(this.cov,n,n,this.mean.rows,this.mean.rows),a=new Uo(o).lowerTriangularMatrix,l=Wo(a,r);return new t(Wo(a,i).transpose().mmul(l),u.sub(s.mmul(Go(o)).mmul(i)))}},{key:"transformationMatrix",value:function(){for(var t=new Yo(this.cov),e=t.eigenvectorMatrix,n=Ho.zeros(e.rows,e.columns),r=0;r<n.rows;++r)n.set(r,r,Math.sqrt(t.realEigenvalues[r]));return e.mmul(n)}},{key:"sample",value:function(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,e=[],n=0;n<t;n++){for(var r=Ho.zeros(this.mean.rows,1),o=mi.normal(),i=0;i<this.mean.rows;++i)r.set(i,0,o());e.push(Ho.add(this.mean,this.transformationMatrix().mmul(r)))}return e}},{key:"getMean",value:function(){return this.mean.getColumn(0)}},{key:"getSd",value:function(){return this.cov.diag().map((function(t){return Math.sqrt(t)}))}}]),t}();function xi(t,e,n,r,o){for(var i=new Ho(r-e,o-n),s=e;s<r;++s)for(var u=n;u<o;++u)i.set(s-e,u-n,t.get(s,u));return i}function _i(t){return _i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_i(t)}function Mi(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i,s,u=[],a=!0,l=!1;try{if(i=(n=n.call(t)).next,0===e){if(Object(n)!==n)return;a=!1}else for(;!(a=(r=i.call(n)).done)&&(u.push(r.value),u.length!==e);a=!0);}catch(t){l=!0,o=t}finally{try{if(!a&&null!=n.return&&(s=n.return(),Object(s)!==s))return}finally{if(l)throw o}}return u}}(t,e)||function(t,e){if(t){if("string"==typeof t)return $i(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?$i(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function $i(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Ei(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==_i(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==_i(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===_i(o)?o:String(o)),r)}var o}var Si=function(){function t(e,n,r,o){var i=Mi(r,2),s=i[0],u=i[1],a=Mi(o,2),l=a[0],c=a[1];!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.width=e,this.height=n,this.xmin=s,this.xmax=u,this.xToViewport=So().domain([s,u]).range([0,e]),this.yToViewport=So().domain([l,c]).range([n,0])}var e,n;return e=t,(n=[{key:"x",value:function(t){return this.xToViewport.invert(t)}},{key:"y",value:function(t){return this.yToViewport.invert(t)}},{key:"u",value:function(t){return this.xToViewport(t)}},{key:"v",value:function(t){return this.yToViewport(t)}},{key:"xDomain",value:function(){return this.xToViewport.domain()}},{key:"yDomain",value:function(){return this.yToViewport.domain()}}])&&Ei(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),Ai=function(t){return ko(.05+.3*t)};function ki(t){return Math.round(100*t)/100}function ji(t,e){return Math.round(t*Math.pow(10,e))/Math.pow(10,e)}function Oi(t){return Oi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Oi(t)}function Ri(t,e){return Ri=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Ri(t,e)}function Ni(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ti(t){return Ti=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ti(t)}function Pi(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i,s,u=[],a=!0,l=!1;try{if(i=(n=n.call(t)).next,0===e){if(Object(n)!==n)return;a=!1}else for(;!(a=(r=i.call(n)).done)&&(u.push(r.value),u.length!==e);a=!0);}catch(t){l=!0,o=t}finally{try{if(!a&&null!=n.return&&(s=n.return(),Object(s)!==s))return}finally{if(l)throw o}}return u}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Ii(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ii(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ii(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function qi(t){s(t,"svelte-1pppf9g",".zero.svelte-1pppf9g{stroke:rgba(0, 0, 0, 0.5);stroke-width:1px}.sd.svelte-1pppf9g{stroke:rgba(0, 0, 0, 0.2);stroke-width:1px}input.svelte-1pppf9g{font-size:12px}")}function Ci(t){var e,n,r,o,s,p,d,v,x,_,E,S,A,k,j,O,R,N,T,P,I,q,C,z,V,D,L,B,F,X,U,Y,H,Q,G,W,K,Z,J,tt,et,nt,rt,ot,it,st,ut,at,lt,ct,ft,ht,pt,mt,gt,dt,yt,wt,vt,bt,xt,_t,Mt,$t,Et,St,At,kt,jt,Ot,Rt,Nt=ki(t[0].std())+"";return{c:function(){e=c("svg"),n=c("g"),r=c("text"),o=f("y = 0"),p=c("line"),_=c("text"),E=f("x = 0\n    "),k=c("line"),N=c("text"),T=f("σ = "),P=f(Nt),q=c("line"),D=c("line"),X=c("text"),U=f("The\n    "),Y=c("tspan"),H=f("probability density function"),Q=h(),G=c("tspan"),W=f("(line)"),K=h(),Z=c("tspan"),J=f("of a Gaussian distribution with standard"),tt=h(),et=c("tspan"),nt=f("deviation σ shows how samples from it"),rt=h(),ot=c("tspan"),it=f("will be distributed"),st=h(),ut=c("text"),at=f("The histogram\n    "),lt=c("tspan"),ct=f("(shaded)"),ft=f("\n    shows the\n    "),ht=c("tspan"),pt=f("actual distribution of "),mt=f(zi),gt=f(" samples"),wt=h(),vt=l("div"),bt=l("p"),xt=l("input"),_t=f(" =\n    "),Mt=l("input"),St=h(),At=l("input"),g(r,"x","16"),g(r,"y",s=Vi(t[3],0)+15),g(r,"class","annotation"),g(p,"class","zero svelte-1pppf9g"),g(p,"x1","0"),g(p,"y1",d=Vi(t[3],0)),g(p,"x2",v=t[3].width),g(p,"y2",x=Vi(t[3],0)),g(_,"x",S=Di(t[3],0)+15),g(_,"y",A=t[3].height-15),g(_,"class","annotation"),g(k,"class","zero svelte-1pppf9g"),g(k,"x1",j=Di(t[3],0)),g(k,"y1","0"),g(k,"x2",O=Di(t[3],0)),g(k,"y2",R=t[3].height),g(N,"x",I=Di(t[3],t[0].std())+15),g(N,"y","15"),g(N,"class","annotation"),g(q,"class","sd svelte-1pppf9g"),g(q,"x1",C=Di(t[3],t[0].std())),g(q,"y1","0"),g(q,"x2",z=Di(t[3],t[0].std())),g(q,"y2",V=t[3].height),g(D,"class","sd svelte-1pppf9g"),g(D,"x1",L=Di(t[3],-t[0].std())),g(D,"y1","0"),g(D,"x2",B=Di(t[3],-t[0].std())),g(D,"y2",F=t[3].height),g(Y,"font-weight","bold"),g(G,"fill","#c51b8a"),g(Z,"x","16"),g(Z,"dy","1.5em"),g(et,"x","16"),g(et,"dy","1.5em"),g(ot,"x","16"),g(ot,"dy","1.5em"),g(X,"x","16"),g(X,"y","10"),g(X,"class","annotation"),g(lt,"fill","#fa9fb5"),g(ht,"x","470"),g(ht,"dy","1.5em"),g(ut,"x","470"),g(ut,"y","200"),g(ut,"class","annotation"),g(e,"width",dt=t[3].width),g(e,"height",yt=t[3].height),xt.disabled=!0,g(xt,"class","labelSlider svelte-1pppf9g"),Mt.disabled=!0,g(Mt,"class","entry svelte-1pppf9g"),g(Mt,"min",$t=t[2].min),g(Mt,"max",Et=t[2].max),g(bt,"class","label"),g(At,"type","range"),g(At,"min",kt=t[2].min),g(At,"max",jt=t[2].max),g(At,"step","0.01"),g(At,"class","svelte-1pppf9g"),g(vt,"class","grid-item svelte-1pppf9g")},m:function(s,a){u(s,e,a),i(e,n),i(n,r),i(r,o),i(n,p),i(n,_),i(_,E),i(n,k),i(n,N),i(N,T),i(N,P),i(n,q),i(n,D),t[9](n),i(e,X),i(X,U),i(X,Y),i(Y,H),i(X,Q),i(X,G),i(G,W),i(X,K),i(X,Z),i(Z,J),i(X,tt),i(X,et),i(et,nt),i(X,rt),i(X,ot),i(ot,it),i(X,st),i(e,ut),i(ut,at),i(ut,lt),i(lt,ct),i(ut,ft),i(ut,ht),i(ht,pt),i(ht,mt),i(ht,gt),u(s,wt,a),u(s,vt,a),i(vt,bt),i(bt,xt),w(xt,t[2].name),i(bt,_t),i(bt,Mt),w(Mt,t[2].value),i(vt,St),i(vt,At),w(At,t[2].value),Ot||(Rt=[m(xt,"input",t[10]),m(Mt,"input",t[11]),m(At,"change",t[12]),m(At,"input",t[12]),m(At,"input",(function(){$(t[4](t[2]))&&t[4](t[2]).apply(this,arguments)}))],Ot=!0)},p:function(n,o){var i=Pi(o,1)[0];t=n,8&i&&s!==(s=Vi(t[3],0)+15)&&g(r,"y",s),8&i&&d!==(d=Vi(t[3],0))&&g(p,"y1",d),8&i&&v!==(v=t[3].width)&&g(p,"x2",v),8&i&&x!==(x=Vi(t[3],0))&&g(p,"y2",x),8&i&&S!==(S=Di(t[3],0)+15)&&g(_,"x",S),8&i&&A!==(A=t[3].height-15)&&g(_,"y",A),8&i&&j!==(j=Di(t[3],0))&&g(k,"x1",j),8&i&&O!==(O=Di(t[3],0))&&g(k,"x2",O),8&i&&R!==(R=t[3].height)&&g(k,"y2",R),1&i&&Nt!==(Nt=ki(t[0].std())+"")&&y(P,Nt),9&i&&I!==(I=Di(t[3],t[0].std())+15)&&g(N,"x",I),9&i&&C!==(C=Di(t[3],t[0].std()))&&g(q,"x1",C),9&i&&z!==(z=Di(t[3],t[0].std()))&&g(q,"x2",z),8&i&&V!==(V=t[3].height)&&g(q,"y2",V),9&i&&L!==(L=Di(t[3],-t[0].std()))&&g(D,"x1",L),9&i&&B!==(B=Di(t[3],-t[0].std()))&&g(D,"x2",B),8&i&&F!==(F=t[3].height)&&g(D,"y2",F),8&i&&dt!==(dt=t[3].width)&&g(e,"width",dt),8&i&&yt!==(yt=t[3].height)&&g(e,"height",yt),4&i&&xt.value!==t[2].name&&w(xt,t[2].name),4&i&&$t!==($t=t[2].min)&&g(Mt,"min",$t),4&i&&Et!==(Et=t[2].max)&&g(Mt,"max",Et),4&i&&Mt.value!==t[2].value&&w(Mt,t[2].value),4&i&&kt!==(kt=t[2].min)&&g(At,"min",kt),4&i&&jt!==(jt=t[2].max)&&g(At,"max",jt),4&i&&w(At,t[2].value)},i:b,o:b,d:function(n){n&&(a(e),a(wt),a(vt)),t[9](null),Ot=!1,M(Rt)}}}var zi=1e4;function Vi(t,e){return t.v(e)}function Di(t,e){return t.u(e)}function Li(t,e,n){var r=e.graph,o=e.variance,i=void 0===o?{name:"Variance",value:1,min:.1,max:2}:o,s=e.context,u=void 0===s?new Si(700,400,[-3,3],[-.1,1]):s,a=e.gaussian,l=void 0===a?new vi(0,i.value):a,c=e.mean,f=e.sdArea,h=e.curve,p=Pi(u.xDomain(),2),m=p[0],g=p[1],y=(g-m)/100;function w(){wt(m,g+y,y);for(var t=function(){var t=ct,e=lt,n=yt;function r(r){Array.isArray(r)||(r=Array.from(r));var o,i,s,u=r.length,a=new Array(u);for(o=0;o<u;++o)a[o]=t(r[o],o,r);var l=e(a),c=l[0],f=l[1],h=n(a,c,f);if(!Array.isArray(h)){const t=f,n=+h;if(e===lt&&([c,f]=function(t,e,n){let r;for(;;){const o=dt(t,e,n);if(o===r||0===o||!isFinite(o))return[t,e];o>0?(t=Math.floor(t/o)*o,e=Math.ceil(e/o)*o):o<0&&(t=Math.ceil(t*o)/o,e=Math.floor(e*o)/o),r=o}}(c,f,n)),(h=gt(c,f,n))[0]<=c&&(s=dt(c,f,n)),h[h.length-1]>=f)if(t>=f&&e===lt){const t=dt(c,f,n);isFinite(t)&&(t>0?f=(Math.floor(f/t)+1)*t:t<0&&(f=(Math.ceil(f*-t)+1)/-t))}else h.pop()}for(var p=h.length,m=0,g=p;h[m]<=c;)++m;for(;h[g-1]>f;)--g;(m||g<p)&&(h=h.slice(m,g),p=g-m);var d,y=new Array(p+1);for(o=0;o<=p;++o)(d=y[o]=[]).x0=o>0?h[o-1]:c,d.x1=o<p?h[o]:f;if(isFinite(s)){if(s>0)for(o=0;o<u;++o)null!=(i=a[o])&&c<=i&&i<=f&&y[Math.min(p,Math.floor((i-c)/s))].push(r[o]);else if(s<0)for(o=0;o<u;++o)if(null!=(i=a[o])&&c<=i&&i<=f){const t=Math.floor((c-i)*s);y[Math.min(p,t+(h[t]<=i))].push(r[o])}}else for(o=0;o<u;++o)null!=(i=a[o])&&c<=i&&i<=f&&y[ut(h,i,0,p)].push(r[o]);return y}return r.value=function(e){return arguments.length?(t="function"==typeof e?e:at(e),r):t},r.domain=function(t){return arguments.length?(e="function"==typeof t?t:at([t[0],t[1]]),r):e},r.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:at(Array.isArray(t)?tt.call(t):t),r):n},r}().domain([m,g]).thresholds(99),e=[],n=0;n<zi;n++)e.push(l.sample());return t(e)}var v=e.bins,b=void 0===v?w():v;return k((function(){var t=Cr(r);t.selectAll(".bar").data(b).enter().append("g").attr("class","bar").append("rect").attr("x",(function(t){return u.u(t.x0)})).attr("y",(function(t){return u.v(t.length/(zi*y))})).attr("width",(function(t){return u.u(t.x1)-u.u(t.x0)})).attr("height",(function(t){return u.v(0)-u.v(t.length/(zi*y))})).attr("stroke","#fa9fb5").attr("fill","rgba(253,224,221,0.6"),t.append("path").data([h]).attr("class","curve").attr("fill","none").attr("stroke","#c51b8a").attr("stroke-width","2px").attr("d",c)})),j((function(){var t=Cr(r);t.transition().select(".curve").duration(750).attr("d",c(h)),t.selectAll("rect").data(b).transition().duration(750).attr("y",(function(t){return u.v(t.length/(zi*y))})).attr("height",(function(t){return u.v(0)-u.v(t.length/(zi*y))}))})),t.$$set=function(t){"graph"in t&&n(1,r=t.graph),"variance"in t&&n(2,i=t.variance),"context"in t&&n(3,u=t.context),"gaussian"in t&&n(0,l=t.gaussian),"mean"in t&&n(5,c=t.mean),"sdArea"in t&&n(6,f=t.sdArea),"curve"in t&&n(7,h=t.curve),"bins"in t&&n(8,b=t.bins)},t.$$.update=function(){if(8&t.$$.dirty&&n(5,c=Bo().x((function(t){return u.u(t[0])})).y((function(t){return u.v(t[1])}))),8&t.$$.dirty&&n(6,f=function(t,e,n){var r=null,o=Oo(!0),i=null,s=No,u=null,a=Vo(l);function l(l){var c,f,h,p,m,g=(l=jo(l)).length,d=!1,y=new Array(g),w=new Array(g);for(null==i&&(u=s(m=a())),c=0;c<=g;++c){if(!(c<g&&o(p=l[c],c,l))===d)if(d=!d)f=c,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),h=c-1;h>=f;--h)u.point(y[h],w[h]);u.lineEnd(),u.areaEnd()}d&&(y[c]=+t(p,c,l),w[c]=+e(p,c,l),u.point(r?+r(p,c,l):y[c],n?+n(p,c,l):w[c]))}if(m)return u=null,m+""||null}function c(){return Bo().defined(o).curve(s).context(i)}return t="function"==typeof t?t:void 0===t?Do:Oo(+t),e="function"==typeof e?e:Oo(void 0===e?0:+e),n="function"==typeof n?n:void 0===n?Lo:Oo(+n),l.x=function(e){return arguments.length?(t="function"==typeof e?e:Oo(+e),r=null,l):t},l.x0=function(e){return arguments.length?(t="function"==typeof e?e:Oo(+e),l):t},l.x1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Oo(+t),l):r},l.y=function(t){return arguments.length?(e="function"==typeof t?t:Oo(+t),n=null,l):e},l.y0=function(t){return arguments.length?(e="function"==typeof t?t:Oo(+t),l):e},l.y1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:Oo(+t),l):n},l.lineX0=l.lineY0=function(){return c().x(t).y(e)},l.lineY1=function(){return c().x(t).y(n)},l.lineX1=function(){return c().x(r).y(e)},l.defined=function(t){return arguments.length?(o="function"==typeof t?t:Oo(!!t),l):o},l.curve=function(t){return arguments.length?(s=t,null!=i&&(u=s(i)),l):s},l.context=function(t){return arguments.length?(null==t?i=u=null:u=s(i=t),l):i},l}().x((function(t){return u.u(t[0])})).y0((function(t){return u.v(t[1]-2*t[2])})).y1((function(t){return u.v(t[1]+2*t[2])}))),9&t.$$.dirty){var e=Pi(u.xDomain(),2),r=e[0],o=e[1],i=(o-r)/75,s=wt(r,o+i,i),a=s.map((function(t){return l.at([t])}));n(7,h=function(){return function(t){if(!(o=t.length))return[];for(var e=-1,n=function(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n>e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let o of t)null!=(o=e(o,++r,t))&&(n>o||void 0===n&&o>=o)&&(n=o)}return n}(t,vt),r=new Array(n);++e<n;)for(var o,i=-1,s=r[e]=new Array(o);++i<o;)s[i]=t[i][e];return r}(arguments)}(s,a))}},[l,r,i,u,function(t){n(0,l.variance=t.value,l),n(8,b=w())},c,f,h,b,function(t){R[t?"unshift":"push"]((function(){n(1,r=t)}))},function(){i.name=this.value,n(2,i)},function(){i.value=this.value,n(2,i)},function(){i.value=d(this.value),n(2,i)}]}const Bi=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ri(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ti(n);if(r){var o=Ti(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Oi(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Ni(t)}(this,t)});function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),W(Ni(e=o.call(this)),t,Li,Ci,E,{graph:1,variance:2,context:3,gaussian:0,mean:5,sdArea:6,curve:7,bins:8},qi),e}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(Z);function Fi(t,e,n){return Math.min(Math.max(t,e),n)}function Xi(t){return Xi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Xi(t)}function Ui(t,e){return Ui=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Ui(t,e)}function Yi(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Hi(t){return Hi=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Hi(t)}function Qi(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i,s,u=[],a=!0,l=!1;try{if(i=(n=n.call(t)).next,0===e){if(Object(n)!==n)return;a=!1}else for(;!(a=(r=i.call(n)).done)&&(u.push(r.value),u.length!==e);a=!0);}catch(t){l=!0,o=t}finally{try{if(!a&&null!=n.return&&(s=n.return(),Object(s)!==s))return}finally{if(l)throw o}}return u}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Gi(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Gi(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Gi(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Wi(t,e,n){var r=t.slice();return r[6]=e[n],r[8]=n,r}function Ki(t){var e,n,r,o;return{c:function(){g(e=c("ellipse"),"rx",n=t[6].x),g(e,"ry",r=t[6].y),g(e,"fill",o=t[2](t[8])),g(e,"transform",t[0]),g(e,"vector-effect","non-scaling-stroke")},m:function(t,n){u(t,e,n)},p:function(t,i){2&i&&n!==(n=t[6].x)&&g(e,"rx",n),2&i&&r!==(r=t[6].y)&&g(e,"ry",r),4&i&&o!==(o=t[2](t[8]))&&g(e,"fill",o),1&i&&g(e,"transform",t[0])},d:function(t){t&&a(e)}}}function Zi(t){for(var e,n=Y(t[1]),r=[],o=0;o<n.length;o+=1)r[o]=Ki(Wi(t,n,o));return{c:function(){for(var t=0;t<r.length;t+=1)r[t].c();e=p()},m:function(t,n){for(var o=0;o<r.length;o+=1)r[o]&&r[o].m(t,n);u(t,e,n)},p:function(t,o){var i=Qi(o,1)[0];if(7&i){var s;for(n=Y(t[1]),s=0;s<n.length;s+=1){var u=Wi(t,n,s);r[s]?r[s].p(u,i):(r[s]=Ki(u),r[s].c(),r[s].m(e.parentNode,e))}for(;s<r.length;s+=1)r[s].d(1);r.length=n.length}},i:b,o:b,d:function(t){t&&a(e),function(t,e){for(let n=0;n<t.length;n+=1)t[n]&&t[n].d(e)}(r,t)}}}function Ji(t,e,n){var r=e.context,o=void 0===r?new Si(300,300,[-4,4],[-4,4]):r,i=e.gaussian,s=void 0===i?new bi([0,0],[[1,.7],[.7,2]]):i,u=e.contours,a=void 0===u?[Math.sqrt(4.61),Math.sqrt(3.22),Math.sqrt(1.83),Math.sqrt(1.02),Math.sqrt(.446)]:u,l=e.transform,c=e.radii,f=e.color;return t.$$set=function(t){"context"in t&&n(3,o=t.context),"gaussian"in t&&n(4,s=t.gaussian),"contours"in t&&n(5,a=t.contours),"transform"in t&&n(0,l=t.transform),"radii"in t&&n(1,c=t.radii),"color"in t&&n(2,f=t.color)},t.$$.update=function(){if(24&t.$$.dirty){var e=Qi(s.getMean(),2),r=e[0],i=e[1],u=Qi(s.transformationMatrix().to2DArray(),2),h=Qi(u[0],2),p=h[0],m=h[1],g=Qi(u[1],2),d=g[0],y=g[1];n(0,l="matrix(".concat(p,",").concat(-d,",").concat(-m,",").concat(y,",").concat(o.u(r),",").concat(o.v(i),")"))}40&t.$$.dirty&&n(1,c=a.map((function(t){return{x:o.u(t)-o.u(0),y:o.v(0)-o.v(t)}}))),32&t.$$.dirty&&n(2,f=Ao(Ai).domain([0,a.length-1]))},[l,c,f,o,s,a]}var ts=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ui(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Hi(n);if(r){var o=Hi(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Xi(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Yi(t)}(this,t)});function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),W(Yi(e=o.call(this)),t,Ji,Zi,E,{context:3,gaussian:4,contours:5,transform:0,radii:1,color:2}),e}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(Z);const es=ts;function ns(t){return ns="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ns(t)}function rs(t,e){return rs=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},rs(t,e)}function os(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function is(t){return is=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},is(t)}function ss(t){s(t,"svelte-1anzemp",".handleLine.svelte-1anzemp{stroke:rgba(0, 110, 168);stroke-width:2}.handleInvisible.svelte-1anzemp{fill:rgba(245, 181, 62, 0);cursor:grab}.handle.svelte-1anzemp{fill:rgb(0, 110, 168)}.handle.svelte-1anzemp:hover{stroke:gray;stroke-width:2px}")}function us(t){var e,n;return e=new es({props:{width:t[10].width,height:t[10].height,context:t[10],gaussian:t[2]}}),{c:function(){H(e.$$.fragment)},m:function(t,r){Q(e,t,r),n=!0},p:function(t,n){var r={};1024&n[0]&&(r.width=t[10].width),1024&n[0]&&(r.height=t[10].height),1024&n[0]&&(r.context=t[10]),4&n[0]&&(r.gaussian=t[2]),e.$set(r)},i:function(t){n||(X(e.$$.fragment,t),n=!0)},o:function(t){U(e.$$.fragment,t),n=!1},d:function(t){G(e,t)}}}function as(t){var e,n,r,o,i,s,l,f,h,p,m,d,y,w,v,b,x,_,M,$,E,S,A,k,j,O,R,N;return{c:function(){e=c("circle"),o=c("circle"),l=c("circle"),p=c("line"),v=c("line"),$=c("circle"),A=c("circle"),O=c("circle"),g(e,"class","handle svelte-1anzemp"),g(e,"cx",n=t[10].u(t[0]+t[3].e1.x)),g(e,"cy",r=t[10].v(t[1]+t[3].e1.y)),g(e,"r","3"),g(o,"class","handle svelte-1anzemp"),g(o,"cx",i=t[10].u(t[0]+t[3].e2.x)),g(o,"cy",s=t[10].v(t[1]+t[3].e2.y)),g(o,"r","3"),g(l,"class","handle svelte-1anzemp"),g(l,"cx",f=t[10].u(t[0])),g(l,"cy",h=t[10].v(t[1])),g(l,"r","4"),g(p,"class","handleLine svelte-1anzemp"),g(p,"x1",m=t[10].u(t[0])),g(p,"y1",d=t[10].v(t[1])),g(p,"x2",y=t[10].u(t[0]+t[3].e1.x)),g(p,"y2",w=t[10].v(t[1]+t[3].e1.y)),g(v,"class","handleLine svelte-1anzemp"),g(v,"x1",b=t[10].u(t[0])),g(v,"y1",x=t[10].v(t[1])),g(v,"x2",_=t[10].u(t[0]+t[3].e2.x)),g(v,"y2",M=t[10].v(t[1]+t[3].e2.y)),g($,"class","handleInvisible svelte-1anzemp"),g($,"cx",E=t[10].u(t[0]+t[3].e1.x)),g($,"cy",S=t[10].v(t[1]+t[3].e1.y)),g($,"r","44"),g(A,"class","handleInvisible svelte-1anzemp"),g(A,"cx",k=t[10].u(t[0]+t[3].e2.x)),g(A,"cy",j=t[10].v(t[1]+t[3].e2.y)),g(A,"r","44"),g(O,"class","handleInvisible svelte-1anzemp"),g(O,"cx",R=t[10].u(t[0])),g(O,"cy",N=t[10].v(t[1])),g(O,"r","44")},m:function(n,r){u(n,e,r),u(n,o,r),u(n,l,r),u(n,p,r),u(n,v,r),u(n,$,r),t[22]($),u(n,A,r),t[23](A),u(n,O,r),t[24](O)},p:function(t,u){1033&u[0]&&n!==(n=t[10].u(t[0]+t[3].e1.x))&&g(e,"cx",n),1034&u[0]&&r!==(r=t[10].v(t[1]+t[3].e1.y))&&g(e,"cy",r),1033&u[0]&&i!==(i=t[10].u(t[0]+t[3].e2.x))&&g(o,"cx",i),1034&u[0]&&s!==(s=t[10].v(t[1]+t[3].e2.y))&&g(o,"cy",s),1025&u[0]&&f!==(f=t[10].u(t[0]))&&g(l,"cx",f),1026&u[0]&&h!==(h=t[10].v(t[1]))&&g(l,"cy",h),1025&u[0]&&m!==(m=t[10].u(t[0]))&&g(p,"x1",m),1026&u[0]&&d!==(d=t[10].v(t[1]))&&g(p,"y1",d),1033&u[0]&&y!==(y=t[10].u(t[0]+t[3].e1.x))&&g(p,"x2",y),1034&u[0]&&w!==(w=t[10].v(t[1]+t[3].e1.y))&&g(p,"y2",w),1025&u[0]&&b!==(b=t[10].u(t[0]))&&g(v,"x1",b),1026&u[0]&&x!==(x=t[10].v(t[1]))&&g(v,"y1",x),1033&u[0]&&_!==(_=t[10].u(t[0]+t[3].e2.x))&&g(v,"x2",_),1034&u[0]&&M!==(M=t[10].v(t[1]+t[3].e2.y))&&g(v,"y2",M),1033&u[0]&&E!==(E=t[10].u(t[0]+t[3].e1.x))&&g($,"cx",E),1034&u[0]&&S!==(S=t[10].v(t[1]+t[3].e1.y))&&g($,"cy",S),1033&u[0]&&k!==(k=t[10].u(t[0]+t[3].e2.x))&&g(A,"cx",k),1034&u[0]&&j!==(j=t[10].v(t[1]+t[3].e2.y))&&g(A,"cy",j),1025&u[0]&&R!==(R=t[10].u(t[0]))&&g(O,"cx",R),1026&u[0]&&N!==(N=t[10].v(t[1]))&&g(O,"cy",N)},d:function(n){n&&(a(e),a(o),a(l),a(p),a(v),a($),a(A),a(O)),t[22](null),t[23](null),t[24](null)}}}function ls(t){var e,n,r,o,s,l,f=t[8]&&us(t),h=t[9]&&as(t);return{c:function(){e=c("svg"),n=c("g"),f&&f.c(),r=p(),h&&h.c(),g(e,"width",o=t[10].width),g(e,"height",s=t[10].height)},m:function(o,s){u(o,e,s),i(e,n),f&&f.m(n,null),i(n,r),h&&h.m(n,null),t[25](n),l=!0},p:function(t,i){t[8]?f?(f.p(t,i),256&i[0]&&X(f,1)):((f=us(t)).c(),X(f,1),f.m(n,r)):f&&(B={r:0,c:[],p:B},U(f,1,1,(function(){f=null})),B.r||M(B.c),B=B.p),t[9]?h?h.p(t,i):((h=as(t)).c(),h.m(n,null)):h&&(h.d(1),h=null),(!l||1024&i[0]&&o!==(o=t[10].width))&&g(e,"width",o),(!l||1024&i[0]&&s!==(s=t[10].height))&&g(e,"height",s)},i:function(t){l||(X(f),l=!0)},o:function(t){U(f),l=!1},d:function(n){n&&a(e),f&&f.d(),h&&h.d(),t[25](null)}}}function cs(t,e,n){var r=function(){const t=A();return(e,n,{cancelable:r=!1}={})=>{const o=t.$$.callbacks[e];if(o){const i=function(t,e,{bubbles:n=!1,cancelable:r=!1}={}){return new CustomEvent(t,{detail:e,bubbles:n,cancelable:r})}(e,n,{cancelable:r});return o.slice().forEach((e=>{e.call(t,i)})),!i.defaultPrevented}return!0}}(),o=e.show_contours,i=void 0===o||o,s=e.show_handles,u=void 0===s||s,a=e.show_samples,l=void 0===a||a,c=e.graph,f=e.mu1,h=void 0===f?0:f,p=e.mu2,m=void 0===p?0:p,g=e.sigma1,d=void 0===g?1:g,y=e.sigma2,w=void 0===y?1:y,v=e.corr,b=void 0===v?0:v,x=function(t){return Math.sqrt(t[0]*t[0]+t[1]*t[1])},_=e.gaussian,M=void 0===_?new bi([h,m],[[d,b],[b,w]]):_,$=new Yo(M.cov),E=Math.sqrt($.realEigenvalues[0]),S=Math.sqrt($.realEigenvalues[1]),O=e.eig,N=void 0===O?{e1:{x:$.eigenvectorMatrix.get(0,0)*E,y:$.eigenvectorMatrix.get(1,0)*E},e2:{x:$.eigenvectorMatrix.get(0,1)*S,y:$.eigenvectorMatrix.get(1,1)*S}}:O,T=e.context,P=void 0===T?new Si(300,300,[-3,3],[-3,3]):T,I=e.mid,q=e.e1,C=e.e2,z=e.n_samples,V=void 0===z?1e3:z,D=e.resample,L=void 0===D?1:D,B=e.samples,F=e.estimatedMean,X=e.estimatedCov;function U(){r("update",{gaussian:M,errorMean:Y,errorCov:H})}var Y=e.errorMean,H=e.errorCov;function Q(){n(11,B=M.sample(V)),U()}return k((function(){U();var t=Cr(c);l&&t.selectAll(".sample").data(B).enter().append("circle").attr("class","sample").attr("fill","rgb(73, 0, 106, 0.5)").attr("r",1).attr("cx",(function(t){return P.u(t.get(0,0))})).attr("cy",(function(t){return P.v(t.get(1,0))})),u&&(Cr(q).call(Gr().on("drag",(function(t,e){var r=N.e2.x*N.e2.x+N.e2.y*N.e2.y,o=P.x(Fi(t.x,10,P.width-10)),i=P.y(Fi(t.y,10,P.height-10));n(3,N.e1={x:o,y:i},N),n(3,N.e2={x:-i*Math.sqrt(r)/x([o,i]),y:o*Math.sqrt(r)/x([o,i])},N),Q()}))),Cr(C).call(Gr().on("drag",(function(t,e){var r=N.e1.x*N.e1.x+N.e1.y*N.e1.y,o=P.x(Fi(t.x,10,P.width-10)),i=P.y(Fi(t.y,10,P.height-10));n(3,N.e2={x:o,y:i},N),n(3,N.e1={x:i*Math.sqrt(r)/x([o,i]),y:-o*Math.sqrt(r)/x([o,i])},N),Q()}))),Cr(I).call(Gr().on("drag",(function(t,e){var r=P.x(Fi(t.x,10,P.width-10)),o=P.y(Fi(t.y,10,P.height-10));n(0,h=r),n(1,m=o),Q()}))))})),j((function(){var t=Cr(c);if(l){var e=t.selectAll(".sample").data(B);e.exit().remove(),e.enter().append("circle").attr("class","sample").attr("fill","rgb(73, 0, 106, 0.5)").attr("r",1).merge(e).transition().duration(500).attr("cx",(function(t){return P.u(t.get(0,0))})).attr("cy",(function(t){return P.v(t.get(1,0))}))}})),t.$$set=function(t){"show_contours"in t&&n(8,i=t.show_contours),"show_handles"in t&&n(9,u=t.show_handles),"show_samples"in t&&n(16,l=t.show_samples),"graph"in t&&n(4,c=t.graph),"mu1"in t&&n(0,h=t.mu1),"mu2"in t&&n(1,m=t.mu2),"sigma1"in t&&n(17,d=t.sigma1),"sigma2"in t&&n(18,w=t.sigma2),"corr"in t&&n(19,b=t.corr),"gaussian"in t&&n(2,M=t.gaussian),"eig"in t&&n(3,N=t.eig),"context"in t&&n(10,P=t.context),"mid"in t&&n(5,I=t.mid),"e1"in t&&n(6,q=t.e1),"e2"in t&&n(7,C=t.e2),"n_samples"in t&&n(20,V=t.n_samples),"resample"in t&&n(21,L=t.resample),"samples"in t&&n(11,B=t.samples),"estimatedMean"in t&&n(12,F=t.estimatedMean),"estimatedCov"in t&&n(13,X=t.estimatedCov),"errorMean"in t&&n(14,Y=t.errorMean),"errorCov"in t&&n(15,H=t.errorCov)},t.$$.update=function(){if(11&t.$$.dirty[0]){var e=new Ho([[N.e1.x,N.e2.x],[N.e1.y,N.e2.y]]);n(2,M=new bi([h,m],e.mmul(e.transpose())))}if(3145732&t.$$.dirty[0]&&L&&n(11,B=M.sample(V)),1054724&t.$$.dirty[0]){n(12,F=Ho.zeros(M.dim,1));for(var r=0;r<V;r++)F.add(B[r]);F.div(V)}if(1062916&t.$$.dirty[0]){n(13,X=Ho.zeros(M.dim,M.dim));for(var o=0;o<V;o++){var i=Ho.sub(B[o],F);X.add(i.mmul(i.transpose()))}X.div(V-1)}4100&t.$$.dirty[0]&&n(14,Y=Ho.sub(M.mean,F).norm()),8196&t.$$.dirty[0]&&(n(15,H=Ho.sub(M.cov,X).norm()),U())},[h,m,M,N,c,I,q,C,i,u,P,B,F,X,Y,H,l,d,w,b,V,L,function(t){R[t?"unshift":"push"]((function(){n(6,q=t)}))},function(t){R[t?"unshift":"push"]((function(){n(7,C=t)}))},function(t){R[t?"unshift":"push"]((function(){n(5,I=t)}))},function(t){R[t?"unshift":"push"]((function(){n(4,c=t)}))}]}var fs=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&rs(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=is(n);if(r){var o=is(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===ns(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return os(t)}(this,t)});function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),W(os(e=o.call(this)),t,cs,ls,E,{show_contours:8,show_handles:9,show_samples:16,graph:4,mu1:0,mu2:1,sigma1:17,sigma2:18,corr:19,gaussian:2,eig:3,context:10,mid:5,e1:6,e2:7,n_samples:20,resample:21,samples:11,estimatedMean:12,estimatedCov:13,errorMean:14,errorCov:15},ss,[-1,-1]),e}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(Z);const hs=fs;function ps(t){return ps="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ps(t)}function ms(t,e){return ms=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},ms(t,e)}function gs(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ds(t){return ds=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},ds(t)}function ys(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function ws(t){s(t,"svelte-4upv0b",".entry.svelte-4upv0b{font-size:14px;fill:rgba(0, 0, 0, 0.8);text-anchor:middle;alignment-baseline:center}.entryBox.svelte-4upv0b{fill:hsl(200, 20%, 97%);stroke-width:1;stroke:rgba(0, 0, 0, 0.2)}")}function vs(t){var e,n,r,o,s,l,h,p,m,d,w,v,x,_,M,$,E;return{c:function(){e=c("svg"),n=c("g"),r=c("rect"),o=c("text"),s=f(t[0]),l=c("g"),h=c("rect"),p=c("text"),m=f(t[2]),d=c("g"),w=c("rect"),v=c("text"),x=f(t[2]),_=c("g"),M=c("rect"),$=c("text"),E=f(t[1]),g(r,"x","0"),g(r,"y","0"),g(r,"width","50"),g(r,"height","35"),g(r,"rx","5"),g(r,"ry","5"),g(r,"class","entryBox svelte-4upv0b"),g(o,"x","25"),g(o,"y","23"),g(o,"class","entry svelte-4upv0b"),g(n,"transform","translate(1,1)"),g(h,"x","0"),g(h,"y","0"),g(h,"width","50"),g(h,"height","35"),g(h,"rx","5"),g(h,"ry","5"),g(h,"class","entryBox svelte-4upv0b"),g(p,"x","25"),g(p,"y","23"),g(p,"class","entry svelte-4upv0b"),g(l,"transform","translate(61,1)"),g(w,"x","0"),g(w,"y","0"),g(w,"width","50"),g(w,"height","35"),g(w,"rx","5"),g(w,"ry","5"),g(w,"class","entryBox svelte-4upv0b"),g(v,"x","25"),g(v,"y","23"),g(v,"class","entry svelte-4upv0b"),g(d,"transform","translate(1,46)"),g(M,"x","0"),g(M,"y","0"),g(M,"width","50"),g(M,"height","35"),g(M,"rx","5"),g(M,"ry","5"),g(M,"class","entryBox svelte-4upv0b"),g($,"x","25"),g($,"y","23"),g($,"class","entry svelte-4upv0b"),g(_,"transform","translate(61,46)"),g(e,"height","82"),g(e,"width","112")},m:function(t,a){u(t,e,a),i(e,n),i(n,r),i(n,o),i(o,s),i(e,l),i(l,h),i(l,p),i(p,m),i(e,d),i(d,w),i(d,v),i(v,x),i(e,_),i(_,M),i(_,$),i($,E)},p:function(t,e){var n,r,o=(n=e,r=1,function(t){if(Array.isArray(t))return t}(n)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i,s,u=[],a=!0,l=!1;try{if(i=(n=n.call(t)).next,0===e){if(Object(n)!==n)return;a=!1}else for(;!(a=(r=i.call(n)).done)&&(u.push(r.value),u.length!==e);a=!0);}catch(t){l=!0,o=t}finally{try{if(!a&&null!=n.return&&(s=n.return(),Object(s)!==s))return}finally{if(l)throw o}}return u}}(n,r)||function(t,e){if(t){if("string"==typeof t)return ys(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ys(t,e):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];1&o&&y(s,t[0]),4&o&&y(m,t[2]),4&o&&y(x,t[2]),2&o&&y(E,t[1])},i:b,o:b,d:function(t){t&&a(e)}}}function bs(t,e,n){var r=e.sigma1,o=void 0===r?1:r,i=e.sigma2,s=void 0===i?1:i,u=e.corr,a=void 0===u?.5:u;return t.$$set=function(t){"sigma1"in t&&n(0,o=t.sigma1),"sigma2"in t&&n(1,s=t.sigma2),"corr"in t&&n(2,a=t.corr)},[o,s,a]}var xs=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&ms(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=ds(n);if(r){var o=ds(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===ps(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return gs(t)}(this,t)});function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),W(gs(e=o.call(this)),t,bs,vs,E,{sigma1:0,sigma2:1,corr:2},ws),e}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(Z);const _s=xs;function Ms(t){return Ms="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ms(t)}function $s(t,e){return $s=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},$s(t,e)}function Es(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ss(t){return Ss=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ss(t)}function As(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function ks(t){s(t,"svelte-8qsmfp","svg.svelte-8qsmfp{width:100%;height:auto}.gauss-grid.svelte-8qsmfp{display:inline-grid;grid-template-columns:1fr 2fr;grid-auto-rows:min-content;text-align:center}@media only screen and (max-width: 1168px){.gauss-grid.svelte-8qsmfp{display:inline-grid;grid-template-columns:1fr;grid-auto-rows:min-content;text-align:center}}.grid-item.svelte-8qsmfp{margin:5px}.plot.svelte-8qsmfp{float:left}")}function js(t){var e,n,r,o,s,p,m,d,y,w,v,b,x,_,M,$,E,S,A,k,j,O,R,N,T,P,I,q,C,z,V,D,L,B,F,Y,W,K,Z,J,tt,et,nt,rt,ot,it,st,ut,at;return(o=new hs({props:{sigma1:t[0].cov.get(0,0),sigma2:t[0].cov.get(1,1),cov:t[0].cov.get(0,1),context:t[2]}})).$on("update",t[3]),$=new _s({props:{sigma1:ki(t[0].cov.get(0,0)),sigma2:ki(t[0].cov.get(1,1)),corr:ki(t[0].cov.get(0,1))}}),{c:function(){e=l("div"),n=l("div"),r=c("svg"),H(o.$$.fragment),d=h(),y=l("div"),w=c("svg"),v=c("text"),b=c("tspan"),x=f("Covariance matrix (Σ)"),_=h(),M=c("g"),H($.$$.fragment),E=c("text"),S=f("By dragging the handles you\n        "),A=c("tspan"),k=f("can adjust the variance along"),j=h(),O=c("tspan"),R=f("each dimension, as well as the"),N=h(),T=c("tspan"),P=f("correlation between the two"),I=h(),q=c("tspan"),C=f("random variables.\n          "),z=c("tspan"),V=f("Pink"),L=h(),B=c("tspan"),F=f("regions show a high probability"),Y=h(),W=c("tspan"),K=f("inside the distribution.\n          "),Z=c("tspan"),J=f("Violet"),et=h(),nt=c("tspan"),rt=f("points are samples from the"),ot=h(),it=c("tspan"),st=f("distribution."),ut=h(),g(r,"width",s=t[2].width),g(r,"height",p=t[2].height),g(r,"viewBox",m="0 0 "+t[2].width+" "+t[2].height),g(r,"class","plot svelte-8qsmfp"),g(n,"class","grid-item svelte-8qsmfp"),g(b,"font-weight","bold"),g(v,"x","70"),g(v,"y","40"),g(v,"class","annotation"),g(M,"transform","translate(82,50)"),g(A,"x","230"),g(A,"dy","1.5em"),g(O,"x","230"),g(O,"dy","1.5em"),g(T,"x","230"),g(T,"dy","1.5em"),g(z,"fill",D=t[1](.35)),g(z,"font-style","italic"),g(q,"x","230"),g(q,"dy","1.5em"),g(B,"x","230"),g(B,"dy","1.5em"),g(Z,"fill",tt=t[1](1)),g(Z,"font-style","italic"),g(W,"x","230"),g(W,"dy","1.5em"),g(nt,"x","230"),g(nt,"dy","1.5em"),g(it,"x","230"),g(it,"dy","1.5em"),g(E,"x","230"),g(E,"y","30"),g(E,"class","annotation"),g(w,"width","450"),g(w,"height","200"),g(w,"class","svelte-8qsmfp"),g(y,"class","grid-item svelte-8qsmfp"),g(e,"class","gauss-grid svelte-8qsmfp")},m:function(t,s){u(t,e,s),i(e,n),i(n,r),Q(o,r,null),i(e,d),i(e,y),i(y,w),i(w,v),i(v,b),i(b,x),i(v,_),i(w,M),Q($,M,null),i(w,E),i(E,S),i(E,A),i(A,k),i(E,j),i(E,O),i(O,R),i(E,N),i(E,T),i(T,P),i(E,I),i(E,q),i(q,C),i(q,z),i(z,V),i(E,L),i(E,B),i(B,F),i(E,Y),i(E,W),i(W,K),i(W,Z),i(Z,J),i(E,et),i(E,nt),i(nt,rt),i(E,ot),i(E,it),i(it,st),u(t,ut,s),at=!0},p:function(t,e){var n,i,u=(n=e,i=1,function(t){if(Array.isArray(t))return t}(n)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i,s,u=[],a=!0,l=!1;try{if(i=(n=n.call(t)).next,0===e){if(Object(n)!==n)return;a=!1}else for(;!(a=(r=i.call(n)).done)&&(u.push(r.value),u.length!==e);a=!0);}catch(t){l=!0,o=t}finally{try{if(!a&&null!=n.return&&(s=n.return(),Object(s)!==s))return}finally{if(l)throw o}}return u}}(n,i)||function(t,e){if(t){if("string"==typeof t)return As(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?As(t,e):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],a={};1&u&&(a.sigma1=t[0].cov.get(0,0)),1&u&&(a.sigma2=t[0].cov.get(1,1)),1&u&&(a.cov=t[0].cov.get(0,1)),4&u&&(a.context=t[2]),o.$set(a),(!at||4&u&&s!==(s=t[2].width))&&g(r,"width",s),(!at||4&u&&p!==(p=t[2].height))&&g(r,"height",p),(!at||4&u&&m!==(m="0 0 "+t[2].width+" "+t[2].height))&&g(r,"viewBox",m);var l={};1&u&&(l.sigma1=ki(t[0].cov.get(0,0))),1&u&&(l.sigma2=ki(t[0].cov.get(1,1))),1&u&&(l.corr=ki(t[0].cov.get(0,1))),$.$set(l),(!at||2&u&&D!==(D=t[1](.35)))&&g(z,"fill",D),(!at||2&u&&tt!==(tt=t[1](1)))&&g(Z,"fill",tt)},i:function(t){at||(X(o.$$.fragment,t),X($.$$.fragment,t),at=!0)},o:function(t){U(o.$$.fragment,t),U($.$$.fragment,t),at=!1},d:function(t){t&&(a(e),a(ut)),G(o),G($)}}}function Os(t,e,n){var r=e.scale,o=void 0===r?Ao(Ai).domain([0,.2]):r,i=e.context,s=void 0===i?new Si(200,200,[-2,2],[-2,2]):i,u=e.gaussian,a=void 0===u?new bi([0,0],[[1,0],[0,1]]):u;return t.$$set=function(t){"scale"in t&&n(1,o=t.scale),"context"in t&&n(2,s=t.context),"gaussian"in t&&n(0,a=t.gaussian)},[a,o,s,function(t){n(0,a=t.detail.gaussian)}]}var Rs=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&$s(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ss(n);if(r){var o=Ss(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Ms(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Es(t)}(this,t)});function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),W(Es(e=o.call(this)),t,Os,js,E,{scale:1,context:2,gaussian:0},ks),e}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(Z);const Ns=Rs;function Ts(t){return Ts="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ts(t)}function Ps(t,e){return Ps=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Ps(t,e)}function Is(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function qs(t){return qs=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},qs(t)}function Cs(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function zs(t){s(t,"svelte-1f31ly0","svg.svelte-1f31ly0{width:100%;height:auto}.gauss-grid.svelte-1f31ly0{display:inline-grid;grid-template-columns:1fr 2fr;grid-auto-rows:min-content;text-align:center}@media only screen and (max-width: 1168px){.gauss-grid.svelte-1f31ly0{display:inline-grid;grid-template-columns:1fr;grid-auto-rows:min-content;text-align:center}}.grid-item.svelte-1f31ly0{margin:5px}.plot.svelte-1f31ly0{float:left}input.svelte-1f31ly0{font-size:12px}.entry.svelte-1f31ly0{font-size:14px;fill:rgba(0, 0, 0, 0.8);text-anchor:middle;alignment-baseline:center}.entryBox.svelte-1f31ly0{fill:hsl(200, 20%, 97%);stroke-width:1;stroke:rgba(0, 0, 0, 0.2)}")}function Vs(t){var e,n,r,o,s,p,d,b,x,_,$,E,S,A,k,j,O,R,N,T,P,I,q,C,z,V,D,L,B,F,Y,W,K,Z,J,tt,et,nt,rt,ot,it,st,ut,at;return(o=new hs({props:{sigma1:t[6].cov.get(0,0),sigma2:t[6].cov.get(1,1),corr:t[6].cov.get(0,1),context:t[5],n_samples:t[3],resample:t[2]}})).$on("update",t[7]),{c:function(){e=l("div"),n=l("div"),r=c("svg"),H(o.$$.fragment),b=h(),x=l("div"),_=l("p"),$=l("input"),E=f(" =\n      "),S=l("input"),A=h(),k=l("input"),j=h(),O=l("div"),R=h(),(N=l("button")).textContent="Resample",T=h(),P=l("table"),I=l("tr"),(q=l("td")).innerHTML="<d-math>\\| \\hat\\mu - \\mu \\|_2 =</d-math>",C=h(),z=l("td"),V=c("svg"),D=c("g"),L=c("rect"),B=c("text"),F=f(t[0]),Y=h(),W=l("tr"),(K=l("td")).innerHTML="<d-math>\\| \\hat\\Sigma - \\Sigma \\|_2 =</d-math>",Z=h(),J=l("td"),tt=c("svg"),et=c("g"),nt=c("rect"),rt=c("text"),ot=f(t[1]),it=h(),g(r,"width",s=t[5].width),g(r,"height",p=t[5].height),g(r,"viewBox",d="0 0 "+t[5].width+" "+t[5].height),g(r,"class","plot svelte-1f31ly0"),g(n,"class","grid-item svelte-1f31ly0"),$.disabled=!0,g($,"class","labelSlider svelte-1f31ly0"),$.value="Sample points",S.disabled=!0,g(S,"class","entry svelte-1f31ly0"),g(_,"class","label"),g(k,"id","input"),g(k,"type","range"),g(k,"min","0"),g(k,"max","2"),g(k,"step","1"),g(k,"class","svelte-1f31ly0"),g(O,"id","output"),g(N,"type","button"),v(q,"border-bottom","none"),g(L,"x","0"),g(L,"y","0"),g(L,"width","50"),g(L,"height","35"),g(L,"rx","5"),g(L,"ry","5"),g(L,"class","entryBox svelte-1f31ly0"),g(B,"x","25"),g(B,"y","23"),g(B,"class","entry svelte-1f31ly0"),g(D,"transform","translate(0,7)"),g(V,"width","56"),g(V,"height","42"),g(V,"class","svelte-1f31ly0"),v(z,"border-bottom","none"),g(nt,"x","0"),g(nt,"y","0"),g(nt,"width","50"),g(nt,"height","35"),g(nt,"rx","5"),g(nt,"ry","5"),g(nt,"class","entryBox svelte-1f31ly0"),g(rt,"x","25"),g(rt,"y","23"),g(rt,"class","entry svelte-1f31ly0"),g(et,"transform","translate(0,7)"),g(tt,"width","56"),g(tt,"height","42"),g(tt,"class","svelte-1f31ly0"),v(P,"border-bottom","none"),g(x,"class","grid-item svelte-1f31ly0"),g(e,"class","gauss-grid svelte-1f31ly0")},m:function(s,a){u(s,e,a),i(e,n),i(n,r),Q(o,r,null),i(e,b),i(e,x),i(x,_),i(_,$),i(_,E),i(_,S),w(S,t[3]),i(x,A),i(x,k),w(k,t[4]),i(x,j),i(x,O),i(x,R),i(x,N),i(x,T),i(x,P),i(P,I),i(I,q),i(I,C),i(I,z),i(z,V),i(V,D),i(D,L),i(D,B),i(B,F),i(P,Y),i(P,W),i(W,K),i(W,Z),i(W,J),i(J,tt),i(tt,et),i(et,nt),i(et,rt),i(rt,ot),u(s,it,a),st=!0,ut||(at=[m(S,"input",t[10]),m(k,"change",t[11]),m(k,"input",t[11]),m(k,"input",t[8]),m(N,"click",t[9])],ut=!0)},p:function(t,e){var n,i,u=(n=e,i=1,function(t){if(Array.isArray(t))return t}(n)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i,s,u=[],a=!0,l=!1;try{if(i=(n=n.call(t)).next,0===e){if(Object(n)!==n)return;a=!1}else for(;!(a=(r=i.call(n)).done)&&(u.push(r.value),u.length!==e);a=!0);}catch(t){l=!0,o=t}finally{try{if(!a&&null!=n.return&&(s=n.return(),Object(s)!==s))return}finally{if(l)throw o}}return u}}(n,i)||function(t,e){if(t){if("string"==typeof t)return Cs(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Cs(t,e):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],a={};64&u&&(a.sigma1=t[6].cov.get(0,0)),64&u&&(a.sigma2=t[6].cov.get(1,1)),64&u&&(a.corr=t[6].cov.get(0,1)),32&u&&(a.context=t[5]),8&u&&(a.n_samples=t[3]),4&u&&(a.resample=t[2]),o.$set(a),(!st||32&u&&s!==(s=t[5].width))&&g(r,"width",s),(!st||32&u&&p!==(p=t[5].height))&&g(r,"height",p),(!st||32&u&&d!==(d="0 0 "+t[5].width+" "+t[5].height))&&g(r,"viewBox",d),8&u&&S.value!==t[3]&&w(S,t[3]),16&u&&w(k,t[4]),(!st||1&u)&&y(F,t[0]),(!st||2&u)&&y(ot,t[1])},i:function(t){st||(X(o.$$.fragment,t),st=!0)},o:function(t){U(o.$$.fragment,t),st=!1},d:function(t){t&&(a(e),a(it)),G(o),ut=!1,M(at)}}}function Ds(t,e,n){var r=e.context,o=void 0===r?new Si(300,300,[-2,2],[-2,2]):r,i=e.gaussian,s=void 0===i?new bi([0,0],[[1,0],[0,1]]):i,u=e.errorMean,a=e.errorCov,l=e.resample,c=void 0===l?1:l,f=e.n_samples,h=void 0===f?1e3:f,p=e.n_samples_slider,m=void 0===p?1:p;return t.$$set=function(t){"context"in t&&n(5,o=t.context),"gaussian"in t&&n(6,s=t.gaussian),"errorMean"in t&&n(0,u=t.errorMean),"errorCov"in t&&n(1,a=t.errorCov),"resample"in t&&n(2,c=t.resample),"n_samples"in t&&n(3,h=t.n_samples),"n_samples_slider"in t&&n(4,m=t.n_samples_slider)},[u,a,c,h,m,o,s,function(t){n(0,u=ji(t.detail.errorMean,4)),n(1,a=ji(t.detail.errorCov,4))},function(){n(3,h=[100,1e3,1e4][m])},function(){n(2,c++,c)},function(){h=this.value,n(3,h)},function(){m=d(this.value),n(4,m)}]}var Ls=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ps(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=qs(n);if(r){var o=qs(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Ts(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Is(t)}(this,t)});function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),W(Is(e=o.call(this)),t,Ds,Vs,E,{context:5,gaussian:6,errorMean:0,errorCov:1,resample:2,n_samples:3,n_samples_slider:4},zs),e}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(Z);const Bs=Ls;function Fs(t){return Fs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Fs(t)}function Xs(t,e){return Xs=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Xs(t,e)}function Us(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ys(t){return Ys=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ys(t)}function Hs(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Qs(t){s(t,"svelte-1j6ve5r","svg.svelte-1j6ve5r{width:100%;height:auto}.gauss-grid.svelte-1j6ve5r{display:inline-grid;grid-template-columns:1fr 2fr;grid-auto-rows:min-content;text-align:center}@media only screen and (max-width: 1168px){.gauss-grid.svelte-1j6ve5r{display:inline-grid;grid-template-columns:1fr;grid-auto-rows:min-content;text-align:center}}.grid-item.svelte-1j6ve5r{margin:5px}.plot.svelte-1j6ve5r{float:left}.entry.svelte-1j6ve5r{font-size:14px;fill:rgba(0, 0, 0, 0.8);text-anchor:middle;alignment-baseline:center}.entryBox.svelte-1j6ve5r{fill:hsl(200, 20%, 97%);stroke-width:1;stroke:rgba(0, 0, 0, 0.2)}")}function Gs(t){var e,n,r,o,s,p,m,d,w,b,x,_,M,$,E,S,A,k,j,O,R,N,T,P;return(o=new hs({props:{mu1:t[0].mean.get(0,0),mu2:t[0].mean.get(1,0),sigma1:t[0].cov.get(0,0),sigma2:t[0].cov.get(1,1),corr:t[0].cov.get(0,1),show_samples:!1,n_samples:1,context:t[2]}})).$on("update",t[5]),s=new hs({props:{mu1:t[3].mean.get(0,0),mu2:t[3].mean.get(1,0),sigma1:t[3].cov.get(0,0),sigma2:t[3].cov.get(1,1),corr:t[3].cov.get(0,1),show_contours:!1,show_handles:!1,context:t[2],samples:t[4]}}),{c:function(){e=l("div"),n=l("div"),r=c("svg"),H(o.$$.fragment),H(s.$$.fragment),w=h(),b=l("div"),x=l("div"),_=h(),M=l("table"),$=l("tr"),(E=l("td")).innerHTML="<d-math>\\log p(X|\\Theta) =</d-math>",S=h(),A=l("td"),k=c("svg"),j=c("g"),O=c("rect"),R=c("text"),N=f(t[1]),T=h(),g(r,"width",p=t[2].width),g(r,"height",m=t[2].height),g(r,"viewBox",d="0 0 "+t[2].width+" "+t[2].height),g(r,"class","plot svelte-1j6ve5r"),g(n,"class","grid-item svelte-1j6ve5r"),g(x,"id","output"),v(E,"border-bottom","none"),g(O,"x","0"),g(O,"y","0"),g(O,"width","80"),g(O,"height","35"),g(O,"rx","5"),g(O,"ry","5"),g(O,"class","entryBox svelte-1j6ve5r"),g(R,"x","35"),g(R,"y","23"),g(R,"class","entry svelte-1j6ve5r"),g(j,"transform","translate(0,7)"),g(k,"width","86"),g(k,"height","42"),g(k,"class","svelte-1j6ve5r"),v(A,"border-bottom","none"),v(M,"border-bottom","none"),g(b,"class","grid-item svelte-1j6ve5r"),g(e,"class","gauss-grid svelte-1j6ve5r")},m:function(t,a){u(t,e,a),i(e,n),i(n,r),Q(o,r,null),Q(s,r,null),i(e,w),i(e,b),i(b,x),i(b,_),i(b,M),i(M,$),i($,E),i($,S),i($,A),i(A,k),i(k,j),i(j,O),i(j,R),i(R,N),u(t,T,a),P=!0},p:function(t,e){var n,i,u=(n=e,i=1,function(t){if(Array.isArray(t))return t}(n)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i,s,u=[],a=!0,l=!1;try{if(i=(n=n.call(t)).next,0===e){if(Object(n)!==n)return;a=!1}else for(;!(a=(r=i.call(n)).done)&&(u.push(r.value),u.length!==e);a=!0);}catch(t){l=!0,o=t}finally{try{if(!a&&null!=n.return&&(s=n.return(),Object(s)!==s))return}finally{if(l)throw o}}return u}}(n,i)||function(t,e){if(t){if("string"==typeof t)return Hs(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Hs(t,e):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0],a={};1&u&&(a.mu1=t[0].mean.get(0,0)),1&u&&(a.mu2=t[0].mean.get(1,0)),1&u&&(a.sigma1=t[0].cov.get(0,0)),1&u&&(a.sigma2=t[0].cov.get(1,1)),1&u&&(a.corr=t[0].cov.get(0,1)),4&u&&(a.context=t[2]),o.$set(a);var l={};8&u&&(l.mu1=t[3].mean.get(0,0)),8&u&&(l.mu2=t[3].mean.get(1,0)),8&u&&(l.sigma1=t[3].cov.get(0,0)),8&u&&(l.sigma2=t[3].cov.get(1,1)),8&u&&(l.corr=t[3].cov.get(0,1)),4&u&&(l.context=t[2]),16&u&&(l.samples=t[4]),s.$set(l),(!P||4&u&&p!==(p=t[2].width))&&g(r,"width",p),(!P||4&u&&m!==(m=t[2].height))&&g(r,"height",m),(!P||4&u&&d!==(d="0 0 "+t[2].width+" "+t[2].height))&&g(r,"viewBox",d),(!P||2&u)&&y(N,t[1])},i:function(t){P||(X(o.$$.fragment,t),X(s.$$.fragment,t),P=!0)},o:function(t){U(o.$$.fragment,t),U(s.$$.fragment,t),P=!1},d:function(t){t&&(a(e),a(T)),G(o),G(s)}}}function Ws(t,e,n){var r=e.context,o=void 0===r?new Si(300,300,[-2,2],[-2,2]):r,i=e.target,s=void 0===i?new bi([-.6,.7],[[.8,.3],[.3,.4]]):i,u=e.gaussian,a=void 0===u?new bi([0,0],[[1,0],[0,1]]):u,l=e.n_samples,c=void 0===l?1e3:l,f=e.samples,h=void 0===f?s.sample(c):f,p=e.logLikelihood;return t.$$set=function(t){"context"in t&&n(2,o=t.context),"target"in t&&n(3,s=t.target),"gaussian"in t&&n(0,a=t.gaussian),"n_samples"in t&&n(6,c=t.n_samples),"samples"in t&&n(4,h=t.samples),"logLikelihood"in t&&n(1,p=t.logLikelihood)},t.$$.update=function(){17&t.$$.dirty&&n(1,p=ji(a.jointLogLikelihood(h),2))},[a,p,o,s,h,function(t){n(0,a=t.detail.gaussian)},c]}var Ks=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Xs(t,e)}(i,t);var e,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ys(n);if(r){var o=Ys(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Fs(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Us(t)}(this,t)});function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),W(Us(e=o.call(this)),t,Ws,Gs,E,{context:2,target:3,gaussian:0,n_samples:6,samples:4,logLikelihood:1},Qs),e}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(Z);const Zs=Ks;new Bi({target:document.querySelector("#Teaser")});var Js=document.getElementById("multivariate-dfigure");Js.addEventListener("ready",(function(){var t=Js.querySelector("#multivariate-target");new Ns({target:t})}));var tu=document.getElementById("estimationError-dfigure");tu.addEventListener("ready",(function(){var t=tu.querySelector("#estimationError-target");new Bs({target:t})}));var eu=document.getElementById("sampleLikelihood-dfigure");eu.addEventListener("ready",(function(){var t=eu.querySelector("#sampleLikelihood-target");new Zs({target:t})}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,